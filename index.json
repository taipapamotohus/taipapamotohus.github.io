[{"authors":["admin"],"categories":null,"content":"このサイトについて フリーソフトで学会発表用のスライドを作ったり，論文を書いたりするのに役に立ちそうなことを，自分のためにまとめておく備忘録みたいなもの．最近とみに衰えてきた記憶力の補助になればいいな．．． 😄\nEmacsのorg-modeやLaTeX絡みの話が多くなりそう．．．\n殆どは先人の方々からの受け売りなので，できるだけ情報元も併記する．\n環境 MacBook Pro late 2016, Mojave 10.14.6\nGNU Emacs 26.2, TeX Live 2018 (MacTeX-2018)\n","date":1554595200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"このサイトについて フリーソフトで学会発表用のスライドを作ったり，論文を書いたりするのに役に立ちそうなことを，自分のためにまとめておく備忘録みたいなもの．最近とみに衰えてきた記憶力の補助になればいいな．．． 😄\nEmacsのorg-modeやLaTeX絡みの話が多くなりそう．．．\n殆どは先人の方々からの受け売りなので，できるだけ情報元も併記する．\n環境 MacBook Pro late 2016, Mojave 10.14.6\nGNU Emacs 26.2, TeX Live 2018 (MacTeX-2018)","tags":null,"title":"taipapa","type":"authors"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026#34;Courses\u0026#34; url = \u0026#34;courses/\u0026#34; weight = 50 Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026#34;Docs\u0026#34; url = \u0026#34;docs/\u0026#34; weight = 50 Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"このブログを始めた頃にLaTeXを用いたスライド作成について一連の記事（beamerでスライド原稿用pdfを作成する（その１）など）にまとめた．しかし，10年以上もこの方法を使ってきて，少々飽きてきたと言うのが正直な感想である．そんな時に気になっていたのが， reveal.js である．今回は，思いきってreveal.jsによるスライド作成に挑んでみたので，その顛末をまとめておく．私にはhtmlやjavascriptはさっぱりなので，例によってorg-modeを介しての作成となった．\n Table of Contents  reveal.js  Installation of reveal.js Example Presentations   org-reveal  References Installation of org-reveal Configuration of org-reveal   Plugin of reveal.js  Default plugin (reveal.js/plugin/) reveal.js-plugins reveal.js-menu Plugin location   Creation of slides by org-reveal and reveal.js  Creation of main file creation of custom css file Modification of main file      reveal.js 「HTMLを使って簡単に美しいプレゼンテーションを作成できるフレームワーク」だそうである．nested slides, Markdown support, PDF export, speaker notes, JavaScript APIなどの特徴を有する．リンク先のデモを見れば，どんなことができるか一目瞭然である．これがなかなかカッコ良い．．．\nInstallation of reveal.js 上述のご本家のサイトに詳細に記述されているとおりにすれば良い．\n  まず，node.jsをインストールする．macであれば，homebrewを使うのが簡単である．ついでにnpmもインストールする．他のOSでは，各自ググっていただきたい．．．(^^;;;\n$ brew install node.js $ brew install npm   スライドを作る場所として，適当なdirectoryを作成し，そこに移動して，reveal.jsのリポジトリをクローンする．ここでは，Slidesと言うdirectoryを作った．\n$ mkdir /Users/taipapa/Data/Slides $ cd /Users/taipapa/Data/Slides $ git clone https://github.com/hakimel/reveal.js.git   reveal.js directoryに移動する\n$ cd reveal.js   依存関係をインストールする\n$ npm install   プレゼンテーションを開始する\n$ npm start \u0026gt; reveal.js@3.9.2 start /Users/taipapa/Data/Slides/reveal.js \u0026gt; grunt serve Running \u0026#34;connect:server\u0026#34; (connect) task Started connect web server on http://localhost:8000 Running \u0026#34;watch\u0026#34; task Waiting...   ブラウザで， http://localhost:8000 が開き，プレゼンテーションが見られる．\n  ここまで非常に簡単である．defaultで開くプレゼンは素っ気ないものであるが，reveal.js directoryにあるdemo.htmlを以下のようにindex.htmlにすれば，上述のご本家のGitHub pageのリンクにあるデモと同じスライドが開くようになる．\n$ cd /Users/taipapa/Data/Slides/reveal.js $ ls CONTRIBUTING.md css js package.json LICENSE demo.html lib plugin README.md gruntfile.js node_modules test bower.json index.html package-lock.json $ mv index.html index.html_original $ cp demo.html index.html $ ls CONTRIBUTING.md css index.html_original package-lock.json LICENSE demo.html js package.json README.md gruntfile.js lib plugin bower.json index.html node_modules test $ npm start directory（フォルダ）の中身は以下のようになっている．\n css/ : これがないとプロジェクトが機能しないコアのスタイル js/ : 上記に同じだがJavascript用 plugin/ : reveal.jsの拡張用として開発されてきたコンポーネント lib/ : 他のすべてのthird party assets (JavaScript, CSS, fonts)  Example Presentations reveal.jsでどんなスライドを作れるのか実例を集めたページ．\n Sample scientific talk (on magnetism in small stars) by Peter Williams Autodesk Forge Viewer: Visual Reports with Connected Data by Philippe Leefsma  などは興味深い．\nreveal.jsの特徴として，Markdownでもスライドが作成できると言うことがあるが，私はいつも通りorg-modeを使用することにした．\norg-reveal References  org-reveal: 御本家 Introduction to org-reveal：御本家のデモ 【Org-mode】Org文書から reveal.js スライドを作成する emacs-reveal：御本家からのフォーク org-re-reveal：御本家からのフォーク  htmlもJavascriptも知らなくてもブログが書けるように，これらを知らなくても，org-modeとreveal.jsを組み合わせて使えばスライドが簡単に作れる．reveal.js用のorg-modeのパッケージは，元来は， org-reveal (org-reveal, Introduction to org-reveal) であり，そのforkである org-re-reveal も活発に開発されているとのことで，どちらをインストールするか迷ったのであるが，上記の御本家のGitHub pageを見ると，2018年6月ごろから作者のyiwenさんが再び盛んにcommitするようになっている．また，フォークのorg-re-revealはemacs-revealのバンドルの一部となっており，少し複雑である．以上の理由から，やはり，御本家を使うことにした．なお，フォークのorg-re-revealに関しては，【Org-mode】Org文書から reveal.js スライドを作成する に詳しく紹介されているので，参考にされたい．\nInstallation of org-reveal 御本家のorg-revealに書いてある通りにすれば良いのだが，私は，いつものごとく，use-packageを用いて以下のようにinit.orgに書き込んでインストールした．\n#+begin_src emacs-lisp (use-package ox-reveal :ensure t) #+end_src Installation of emacs-reveal 前述したように，org-revealのフォークであるorg-re-revealはemacs-revealのバンドルの一部である．後述するが，reveal.jsのthemeや設定ファイルとして有用なものが含まれているので，emacs-revealもクローンしておいて必要に応じて使えるようにすることをお勧めする．個々に行うと面倒なので，全部突っ込むことにして，Emacs-reveal for daily useの方法に従い，emacs-revealをクローンする．この際にrecursive optionをつけて再帰的にクローンすれば，org-re-reveal, org-re-reveal-ref, oer-revealなどが全部一緒に（161MB）入ってくる．\n$ cd /Users/taipapa/Sources $ git clone --recursive https://gitlab.com/oer/emacs-reveal.git $ cd emacs-reveal $ pwd /Users/taipapa/Sources/emacs-reveal $ ls CHANGELOG.org docker org-re-reveal-ref CONTRIBUTING.md emacs-reveal-submodules paper.bib LICENSE emacs-reveal.el paper.bib.license LICENSES oer-reveal paper.md Makefile org-mode paper.md.license README.md org-re-reveal tests Configuration of org-reveal 設定に関しては， org-revealに詳細に記載されているが，重要なことを中心に抜粋しておく．\nSet the location of Reveal.js org-revealはファイルの内容をexportする前にreveal.jsがどこにあるかを知っておく必要がある．reveal.jsの在り処というのは，reveal.jsのパッケージのトップディレクトリへのパスのことであり，そのディレクトリは reveal.jsのファイルを含むディレクトリではなく， README.mdを含むディレクトリ のことである．\nデフォルトでは，./reveal.js であるが，このままだと，全てのスライド原稿がreveal.jsと同じディレクトリにないといけなくなり不便である．そこで，init.orgにパスを書き込むか，あるいは，個々のorg fileの冒頭にrevieal.jsの在り処を書き込む．私は後者の方法をとっており，以下のように書き込んでいる．\n#+REVEAL_ROOT: file:///Users/taipapa/Data/Slides/reveal.js なお，org-re-revealでは，このパスを書き込んでも読み込んでくれない．私の環境の問題なのかは追及していないが，これも御本家のorg-revealを使用する理由である．\nSelect theme テーマをREVEAL_THEMEでセットする．テーマはdefaultで11個ぐらいついてくるが，ネットのあちこちにいろいろなテーマが落ちているので，あちこちのテーマを見て参考にし，自分なりに変更して好みのテーマを作れば良い．上述のemacs-orgの中のテーマ（oer-reveal.css）が割と良かったので，使用することにした．テーマを使用するには，reveal.jsのcss directoryの中のtheme directoryに入れれば良い．具体的には以下のようにした．\n$ cd /Users/taipapa/Sources/emacs-reveal/oer-reveal/css $ ls dbis-longtitle.css folder_inbox.png.license dbis.css index.css ercis-quote.css oer-reveal.css ercis.css outgoing-link.png ercis2019.css outgoing-link.png.base folder_inbox.png outgoing-link.png.base.license folder_inbox.png.base outgoing-link.png.license folder_inbox.png.base.license toc-style.css $ cp oer-reveal.css /Users/taipapa/Slides/reveal.js/css/theme/ Plugin of reveal.js reveal.jsを素のままで使っても十分に有用ではあるが，やはり，pdfやパワーポイントではできないことをやれるようにしたいものである．そこで，プラグインの登場である．\nDefault plugin (reveal.js/plugin/) デフォルトのプラグインについては，．デモを見て貰えばどんな機能か分かると思う．例えば，notesは，発表者用の別フレームが表示され，その中に現在と次のスライドとタイマーが表示される．あるいは，zoomでは，option keyを押しながらクリックすると拡大し，もう一度同じことをすると元に戻る．\nreveal.js-plugins これはthird-partyのプラグインである．このサイトにはデモのリンクも貼ってあるので参考にしていただきたい．私は蛍光ペンをスライドショーの際中にリアルタイムで使いたかったので，chalkboardをインストールして設定した．\nInstallation リンク先に書いてある通りbowerを用いてインストールする．bower自体はbrewでインストールした．前述のchalkboardだけでなく，このサイトの全プラグインがインストールされる．\n$ brew install bower $ brew info bower bower: stable 1.8.8 (bottled) Package manager for the web https://bower.io/ /usr/local/Cellar/bower/1.8.8 (5,413 files, 16.9MB) * Poured from bottle on 2020-03-01 at 17:58:14 ..... $ bower install reveal.js-plugins なお，次節のmenu-pluginはsubmoduleであり，別途インストールする必要がある．\nreveal.js-menu 各スライドのタイトルにジャンプできるようにするslide out menu プラグインである．また，テーマやスライド遷移を変更できる．このlive demoを見ると分かりやすい．同じく，bowerでインストールする．\nInstallation $ bower install reveal.js-menu Plugin location 上述のthird partyのプラグインのインストールされる場所は以下の通りである．\n$ cd /Users/taipapa/Data/Slides/reveal.js/bower_components $ tree -L 2 . ├── reveal.js-menu │ ├── CONTRIBUTING.md │ ├── LICENSE │ ├── README.md │ ├── bower.json │ ├── font-awesome │ ├── menu.css │ ├── menu.js │ └── package.json └── reveal.js-plugins ├── LICENSE ├── README.md ├── anything ├── audio-slideshow ├── bower.json ├── broadcast ├── chalkboard ├── chart ├── customcontrols ├── embed-tweet ├── fullscreen ├── mathsvg ├── package.json └── spreadsheet つまり，reveal.jsのbower_components directoryに入る．\nなお，default pluginはreveal.jsのすぐしたのplugin directoryに入る．\nCreation of slides by org-reveal and reveal.js 以前の記事（beamerでスライド原稿用pdfを作成する（その１））と同じような内容のスライド原稿をorg-revealを用いて作成してみる．作成したものはまとめてGithub pageに置いておくので（MySlides，live demoはこちら），クローンするか落とすかして中身を見て貰えば良いのだが，こちらでも順番に説明しておく．なお，前述のプラグインの中にはこのままでは動かないものもあるので，後述するように，一旦，exportしてからhtmlを修正する．（Github pageとlive demoは修正済みのものである）\nCreation of main file まず以下のファイルを作成する．簡単に解説をつけておく．\n REVEAL_ROOTでreveal.jsを設定する． REVEAL_HLEVELを999にすると遷移が全て横向きとなる． REVEAL_TITLE_SLIDEでタイトル（%t）と著者（%a）のヘッダーレベルを決める． REVEAL_INIT_OPTIONで各種のコントロールを行う．下図の設定を参照 REVEAL_THEMEでテーマを決める．前述のように，emacs-revealのバンドルから取ってきたoer-reveal.cssを使用した． REVEAL_EXTRA_CSSで追加のCSSを設定し，これで細かな調整を行う． REVEAL_PREAMBLEで，フッターを指定した．   #+REVEAL_ROOT: ./reveal.js # パスは各自の環境に合わせて書き換えていただきたい #+REVEAL_HLEVEL: 999 # transitionsは全て横向き #+REVEAL_TITLE_SLIDE: \u0026lt;h3\u0026gt;%t\u0026lt;/h3\u0026gt;\u0026lt;h5\u0026gt;%a\u0026lt;/h5\u0026gt; # スライド移動のコントローラーは右下に表示．スライド番号は，スライドの番号／全スライド数． #+REVEAL_INIT_OPTIONS: width:1200, height:800, controlsLayout: \u0026#39;bottom-right\u0026#39;, slideNumber:\u0026#34;c/t\u0026#34;, margin: 0, minScale:0.2, maxScale:2.5, transition: \u0026#39;fade\u0026#39;, menu: {side: \u0026#39;left\u0026#39;, titleSelector: \u0026#39;h1, h2, h3, h4, h5, h6\u0026#39;, hideMissingTitles: false, markers: true, custom: false, themes: true, transitions: true, openButton: true, openSlideNumber: false, keyboard: true, sticky: false, autoOpen: true}, chalkboard: {boardmarkerWidth: 8,\ttoggleChalkboardButton: { left: \u0026#34;80px\u0026#34; }, toggleNotesButton: { left: \u0026#34;130px\u0026#34;}} #+REVEAL_THEME: oer-reveal #+OPTIONS: num:nil toc:nil #+REVEAL_EXTRA_CSS: ./custom_oer.css # [[https://github.com/yjwen/org-reveal/issues/254][List of external plugins?#254]] # #+REVEAL_EXTERNAL_PLUGINS: {src: \u0026#39;%sbower_components/reveal.js-menu/menu.js\u0026#39;, async: true } #+REVEAL_EXTERNAL_PLUGINS: {src: \u0026#39;%sbower_components/reveal.js-menu/menu.js\u0026#39;} # #+REVEAL_EXTRA_CSS: https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css # フッター #+REVEAL_PREAMBLE: \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt;\u0026lt;p\u0026gt;日本hogefuga外科学会 第??回学術総会　202X年X月XX日 日本のどこか\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt; #+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績 #+Author: \\\\ #+Author: hogefuga大学大学院 hogefuga研究科　hogefuga分野　\\\\ #+Author: taipapa, 織田信長, 豊臣秀吉, 徳川家康 # #+DATE: 2020年3月22日 * 背景と目的 - hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い. - 当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている． - そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した. - 参照サイト：[[https://github.com/yjwen/org-reveal][Introduction to Org-Reveal]] * Table #+ATTR_HTML: :width 25% | | cTIA/SIE | stable | asymptomatic | P | | | (n = 12) | (n = 122) | (n = 186) | | | | \u0026lt;c\u0026gt; | \u0026lt;c4\u0026gt; | \u0026lt;c4\u0026gt; | \u0026lt;c\u0026gt; | |--------+----------+-----------+--------------+------| | stroke | 1 (8.3%) | 4 (3.3%) | 5 (2.7%) | 0.32 | | death | 0 | 1 (0.8%) | 0 | 0.42 | | MI | 0 | 1 (0.8%) | 0 | 0.42 | | Total | 1 (8.3%) | 6 (4.9%) | 5 (2.7%) | 0.26 | * hogefuga症例の画像 [[./figures/hoge_fuga.jpg]] * hogefuga症例の画像２ #+ATTR_REVEAL: :frag roll-in 遅延表示も可能 #+ATTR_REVEAL: :frag roll-in #+ATTR_HTML: :height 600px [[./figures/hoge_fuga.jpg]] * hogefuga症例の画像３ #+ATTR_REVEAL: :frag roll-in - 遅延表示も可能 #+ATTR_REVEAL: :frag roll-in - 画像の大きさを変更することも可能 #+ATTR_REVEAL: :frag roll-in #+ATTR_HTML: :height 400px [[./figures/hoge_fuga.jpg]] * ダブルコラムも可能 #+REVEAL_HTML: \u0026lt;div class=\u0026#34;column\u0026#34; style=\u0026#34;float:left; width: 50%\u0026#34;\u0026gt; Nullam eu ante vel est convallis dignissim. Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc porta vulputate tellus. Nunc rutrum turpis sed pede. Sed bibendum. Aliquam posuere. Nunc aliquet, augue nec adipiscing interdum, lacus tellus malesuada massa, quis varius mi purus non odio. #+REVEAL_HTML: \u0026lt;/div\u0026gt; #+REVEAL_HTML: \u0026lt;div class=\u0026#34;column\u0026#34; style=\u0026#34;float:right; width: 50%\u0026#34;\u0026gt; #+CAPTION: Hoge-fuga (2020) [[./figures/hoge_fuga.jpg]] #+REVEAL_HTML: \u0026lt;/div\u0026gt; #+ATTR_REVEAL: :frag roll-in キャプションも可能 * 動画もOK #+REVEAL_HTML: \u0026lt;video controls data-autoplay src=\u0026#34;./Movies/Knight-33990.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; #+CAPTION: Coronavirus * 動画もOK（大きな画面） #+REVEAL_HTML: \u0026lt;video class=\u0026#34;stretch\u0026#34; controls data-autoplay src=\u0026#34;./Movies/Knight-33990.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; このファイルを，/Users/taipapa/Slides/reveal_test.org として保存する．\ncreation of custom css file ついで，微調整のために以下に示すcssファイルを作成し，/Users/taipapa/Slides/custom_oer.cssとして作成する．locationが内容と齟齬のないように注意する．試行錯誤の痕跡もそのままにしておく．\n/* http://nwidger.github.io/blog/post/making-a-reveal.js-presentation-with-org-reveal/ */ .reveal table th, .reveal table td { /* text-align: center; */ border: 1px solid white; } /* https://stackoverflow.com/questions/4012872/how-to-center-a-footer-div-on-a-webpage/4012888 */ /* https://stackoverflow.com/questions/15629511/how-can-i-make-my-footer-center-to-the-bottom-of-the-page/15629635 */ /* div.footer { */ /* /\\* font-family: \u0026#34;Source Sans Pro\u0026#34;, Helvetica, sans-serif; *\\/ */ /* font-size: 2vh; */ /* color: gray; */ /* position: fixed; */ /* left: 400px; */ /* bottom: 2px; */ /* /\\* z-index: 50; *\\/ } */ div.footer { /* font-family: \u0026#34;Source Sans Pro\u0026#34;, Helvetica, sans-serif; */ font-size: 2vh; color: gray; position: fixed; /* left: 400px; */ bottom: 1px; width: 100%; text-align: center; /* margin-left:auto; */ /* margin-right:auto; */ /* margin-top:2em; */ /* z-index: 50; */ } .reveal .slides section \u0026gt; section { /*これによりフレームタイトルが上部に固定される．*/ /* height: 100%; */ height: 95%; /* width: 100%; */ } .reveal h3 { font-size: 1.8em; } .reveal h2 { font-size: 2.0em; } /* 段落内の行間の調整 */ /* https://github.com/yjwen/org-reveal/issues/38 */ /* .reveal p { */ /* line-height: 3; */ /* } */ /* .reveal .org-ul { */ /* line-height: 2; */ /* } */ /* リストの間のスペースの調整 */ /* https://github.com/yjwen/org-reveal/issues/38 */ .reveal li { margin: 0; padding: 0.5em} /* Push each slide change to the browser history */ /* スライドの変更をブラウザの履歴に記録する */ Reveal.initialize({ history: true, }); （うーむ，何故かhtml blockはsyntax highlightが効かない．．．まぁ，ここは後日に追求することにする．．．😅）\nこれでようやく準備が整った．reveal_test.orgをhtmlファイルとしてexportするために， C-c C-e とすると，下図のような画面になる．\n   R が Export to reveal.js HTML Presentation になっており， B によりファイルに保存してブラウザで開くことになる，つまり，続けて C-c C-e RB と打てば，作成したスライドがブラウザーで開く．1200x800でwideに設定してあるので，横長の画面で見た方が見やすいと思う．\n出来上がったスライドは，ほぼ期待通り動いてくれた．動画も問題なく動く．しかし，残念ながら，プラグインが問題であった．解決策を次節でまとめる．\nModification of main file これでできたhtmlファイルのスライドをいじってみると，いくつか不具合があることが分かる．要するにプラグインのいくつかが動かないのである．\n スライドの左下にある3つのアイコンは，それぞれ，メニュー，黒板，notesのボタンである． メニューは問題なく動く． 黒板も動く．ペンで書くことも，右クリックでwipeして書いたものを消すこともできる． しかし，delete keyで描いたものを一挙に消すことはできない． 右端のnotesをクリックすると，カーソルがマーカーに変わり，グレーの蛍光ペンとして書くことはできる．しかし，\u0026ldquo;x\u0026quot;を押すことにより，グレー，青，赤，緑，オレンジ，紫，黄色と順番に色が変わっていく機能は効かない．また，右クリックでwipeして書いたものを消すことはできるが，delete keyで描いたものを一挙に消すことはできない．  いちばん使いたかった蛍光ペンがうまく動かないのである．色々と弄ってみたが，ox-revealのレベルではorg-modeをどう設定しても機能するようにはならず，結局，出来上がったhtmlファイルに直に以下のように追記することにした．\n--- org-reveal_for_blog_oer-FINAL_v2.html\t2020-04-20 21:08:18.000000000 +0900 +++ org-reveal_for_blog_oer-FINAL_v2-keyboard.html\t2020-04-11 13:28:15.000000000 +0900 @@ -219,7 +219,16 @@ { src: \u0026#39;file:///Users/kohkichi/Data/Slides/reveal.js/plugin/markdown/marked.js\u0026#39;, condition: function() { return !!document.querySelector( \u0026#39;[data-markdown]\u0026#39; ); } }, { src: \u0026#39;file:///Users/kohkichi/Data/Slides/reveal.js/plugin/markdown/markdown.js\u0026#39;, condition: function() { return !!document.querySelector( \u0026#39;[data-markdown]\u0026#39; ); } }, { src: \u0026#39;file:///Users/kohkichi/Data/Slides/reveal.js/plugin/zoom-js/zoom.js\u0026#39;, async: true, condition: function() { return !!document.body.classList; } }, - { src: \u0026#39;file:///Users/kohkichi/Data/Slides/reveal.js/plugin/notes/notes.js\u0026#39;, async: true, condition: function() { return !!document.body.classList; } }] + { src: \u0026#39;file:///Users/kohkichi/Data/Slides/reveal.js/plugin/notes/notes.js\u0026#39;, async: true, condition: function() { return !!document.body.classList; } }], + keyboard: { +\t67: function() { RevealChalkboard.toggleNotesCanvas() },\t// toggle notes canvas when \u0026#39;c\u0026#39; is pressed +\t66: function() { RevealChalkboard.toggleChalkboard() },\t// toggle chalkboard when \u0026#39;b\u0026#39; is pressed +\t46: function() { RevealChalkboard.clear() },\t// clear chalkboard when \u0026#39;DEL\u0026#39; is pressed +\t8: function() { RevealChalkboard.reset() },\t// reset chalkboard data on current slide when \u0026#39;BACKSPACE\u0026#39; is pressed +\t68: function() { RevealChalkboard.download() },\t// downlad recorded chalkboard drawing when \u0026#39;d\u0026#39; is pressed +\t88: function() { RevealChalkboard.colorNext() },\t// cycle colors forward when \u0026#39;x\u0026#39; is pressed +\t89: function() { RevealChalkboard.colorPrev() },\t// cycle colors backward when \u0026#39;y\u0026#39; is pressed +\t}, }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 要するに，keyboard以下が追加部分である．chalkboardの設定をreveal.js-plugins/chalkboard/の解説に従って追記した．これにより，上記1ー5の問題は全て解消された．\n下に，Hugoのshortcodeを使って，できあがったスライドそのものを埋め込んでみた． ”f” を叩けば，フルスクリーンになる．色々と弄って遊んでいただければ有り難い．\n これで，やりたいことがほぼ出来るスライドの作成が可能になった．他にも色々な機能があるので，うまく動くようになれば，今後も報告していくつもりである．\n","date":1587654000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587910481,"objectID":"8e3daa560aad50fb092e45596d92012a","permalink":"/post/how-to-create-presentation-slides-by-reveal-dot-js-and-org-mode-org-re-reveal/","publishdate":"2020-04-24T00:00:00+09:00","relpermalink":"/post/how-to-create-presentation-slides-by-reveal-dot-js-and-org-mode-org-re-reveal/","section":"post","summary":"このブログを始めた頃にLaTeXを用いたスライド作成について一連の記事（beamerでスライド原稿用pdfを作成する（その１）など）にまとめた．しかし，10年以上もこの方法を使ってきて，少々飽きてきたと言うのが正直な感想である．そんな時に気になっていたのが， reveal.js である．今回は，思いきってreveal.jsによるスライド作成に挑んでみたので，その顛末をまとめておく．私にはhtmlやjavascriptはさっぱりなので，例によってorg-modeを介しての作成となった．\n","tags":["reveal","js","org-reveal","emacs","org-mode","presentation","slide","javascript"],"title":"How to create presentation slides by reveal.js and org-mode (org-reveal)","type":"post"},{"authors":null,"categories":null,"content":"考えてみれば，EmacsのFile ViewerであるDiredについては，peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法）を投稿した以外はほとんど何も書いていないことに気がついた．そこで，今回は，Diredを強化するパッケージについてまとめることにした．\n Table of Contents  DIRED: HUMAN-READABLE SIZES AND SORT BY SIZE dired-subtree  参照サイト： dired-hacks Installation Usage   Dired Plus  参照サイト Installation Usage   dired-quick-sort  参照サイト Installation Usage   treemacs-icons-dired  参照サイト   peep-dired    DIRED: HUMAN-READABLE SIZES AND SORT BY SIZE Emacsの老舗ブログの一つである Pragmatic Emacs からのパクリである．diredのデフォルトではファイルサイズが 24345 のようにバイトサイズで正確に表示されるのであるが，はっきり言って見にくい．そこで人間に読みやすい表示になるようにls commandのオプションを与える．例によって，~/.emacs.d/personal/init.orgに以下を追記する．\n#+begin_src emacs-lisp (setq dired-listing-switches \u0026#34;-alh\u0026#34;) #+end_src これで上記の例では， 24K と表示されるようになる．\ndired-subtree 参照サイト： dired-hacks これはdiredの様々な追加物のコレクションであるが，この中のdired-subtreeが便利である．\nInstallation diredのデフォルトでは，directoryでEnterすると新しいバッファが開いてそのdirectoryが表示される．しかし，ここは，やはり，同じバッファでsubdirectoryとして表示して欲しいところである．それを実現するのが，このdired-subtreeである．これも以下を，~/.emacs.d/personal/init.orgに書き込めば良い．\n#+begin_src emacs-lisp (use-package dired-subtree :ensure t :config (bind-keys :map dired-mode-map (\u0026#34;i\u0026#34; . dired-subtree-insert) (\u0026#34;;\u0026#34; . dired-subtree-remove))) #+end_src これで，directoryにカーソルを持っていって i を叩けば同じバッファ内でsubdirectoryとしてそのdirectoryが開き， ; を叩けば閉じるようになる．\nUsage 以下の図で説明する．（前述の設定でファイルサイズはKBやMBで表示されている）\n   まず，13行目のstatic directoryにカーソルを持っていき，i を叩くとstaticの行の下にimgとox-hugoのdirectoryが現れる．\n   ついで，imgにカーソルを移動し，再び i を叩くと下図のようにimg directoryの中身が表示される．\n   directoryを閉じるときには，前述のごとく ; を叩けば良い．\nDired Plus Diredの拡張強化版．多くの機能を有するが，私は色使いが綺麗なので使用している．それ以外の機能はほとんど使用していない（笑）．\n参照サイト  https://www.emacswiki.org/emacs/DiredPlus ご本家 What happened to dired+ package?  Installation #+begin_src emacs-lisp (use-package dired+ :quelpa (dired+ :fetcher github :repo \u0026#34;emacsmirror/dired-plus\u0026#34;) :defer 1 :init (setq diredp-hide-details-initially-flag nil) (setq diredp-hide-details-propagate-flag nil) :config (diredp-toggle-find-file-reuse-dir 1) (let ((gls \u0026#34;/usr/local/bin/gls\u0026#34;)) (if (file-exists-p gls) (setq insert-directory-program gls))) ) #+end_src Usage 上記のご本家サイトを参照．ここまでの画像はDired Plusがインストールされた状態のものであり，ファイル名，拡張子，time, size, permissionなどが色分けされているのが分かる．\ndired-quick-sort dired-modeにおいて，\u0026ldquo;S\u0026quot;をsort用のhydra立ち上げにバインドする．\n参照サイト  https://gitlab.com/xuhdev/dired-quick-sort http://pragmaticemacs.com/emacs/speedy-sorting-in-dired-with-dired-quick-sort/  Installation #+begin_src emacs-lisp (use-package dired-quick-sort :ensure t :config (dired-quick-sort-setup)) #+end_src Usage 以下の図で説明する．\n   これはdirectoryを開いた時のデフォルトの画像である．ここで，*S*を叩くと下図のような画面になる．\n   下に開いたhydraのバッファを見て，例えば，グループとサイズでソートするようにsとgを叩くと下の画像（directoryが最初に来てファイルがその後になり，サイズの大きい順になっている）のようになる．\n   ここでqを叩けば，このソートの状態が維持されたままhydraのバッファが閉じる．\ntreemacs-icons-dired 参照サイト  treemacs-icons-dired ご本家 Treemacs and Projectile 当サイトの以前の記事  treemacsのアイコンをdiredでも使えるようにしてくれるモード．この記事のここまでのdired bufferの画像に表示されているアイコンがそれである．treemacsをインストールすれば一緒にインストールされる（インストールについては，上記の過去記事を参考にされたい）．treemacsを立ち上げていれば，diredを立ち上げると自動的にバッファにアイコンが表示される．が，時々何故か表示されないことがある．そういう時は，M-x treemacs-icons-dired-modeを何回かやってtreemacs-icons-dired-modeを再起動すれば表示されるようになる．\npeep-dired 以前の記事（peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法））を参照．実はこれが一番役に立つかも．．．\n","date":1581951600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582462581,"objectID":"3db6c7007f113ee6130ddbc5a8f7c3f7","permalink":"/post/dired/","publishdate":"2020-02-18T00:00:00+09:00","relpermalink":"/post/dired/","section":"post","summary":"考えてみれば，EmacsのFile ViewerであるDiredについては，peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法）を投稿した以外はほとんど何も書いていないことに気がついた．そこで，今回は，Diredを強化するパッケージについてまとめることにした．\n","tags":["emacs","dired","treemacs"],"title":"Dired reinforcement","type":"post"},{"authors":null,"categories":null,"content":"1ヶ月ほど前にMacBook Pro late 2016のバッテリーが逝かれてしまい，laptopのはずがコンセントに繋がないと動かないdesktopになってしまった．すると待っていたかのようにMacBook Pro 16-inch 2019が発売となり，速攻で注文してしまった．これまでは常に半年ぐらい様子を見てから新機を購入していたのだが，今回は止むを得ず発売直後のものを購入せざるを得なかった．新しい計算機やOSへのEmacsやLaTeXのインストールは色々な問題に遭遇することが多い．幸いなことに今回の年末年始の休みは長いので，こちらにまとめておくことにした．基本的には，Upgrade to Mojave and upgrade to Emacs 26.2 by homebrewでまとめたことをやれば良くて，大きな問題はなかった．トップの画像で示しているように各種ソフトがスムーズに動いている．\nTable of contents\n Table of Contents  Dealing with read-only system volume in Catalina Preparation for Emacs installation How to install Emacs 26.3 into MacBook Pro 16 inch (Catalina) How to install LaTeX into MacBook Pro 16 inch (Catalina)  References フォントマップの確認とpdfへのフォントの埋め込みの確認   How to setup org-mode in MacBook Pro 16 inch (Catalina) How to setup full text search of pdf files on Catalina Encountered problems: 遭遇した問題点  zxjafontのプリセットの変更 org-modeからhtml exportの際のthemeを読み込まない（パスを読まない） Location of pdf files in BibDesk on Catalina   まとめ    Dealing with read-only system volume in Catalina  参照サイト : Catalinaでファイルシステムがこう変わる  Catalinaのファイルシステムではファイルアクセスが厳格化されており，APFS (Apple File System)でフォーマットされたルートボリューム(起動ディスク)はシステム領域とデータ領域に2分割され，そのうちシステム領域は完全にリードオンリーとなる（上記の参照サイトが詳細かつわかりやすく解説しているので参照されたい）．\n私はこれまでは，root directoryにData directoryを作成し，そこにほぼ全てのデータを入れ，また，各種ソフトウェアのソースなどは，root directoryにSources directoryを作成し保存してきた．しかし，Catalinaでは上述の変化に伴い，これが不可能となった．実際，管理者権限でdirectoryをrootに作成しようとしても，\n$ cd / $ sudo mkdir test Password: mkdir: test: Read-only file system と言う具合に撥ねられてしまう．\nそこで，Data directoryやSources directoryを自分のhome directory，即ち，/Users/taipapa/の下に入れることにした．つまり，\n/ ├── Data └── Sources から\ntaipapa ├── Data └── Sources に変更した．これに伴い，各ファイル内のパスも修正した．基本的にはファイルパスの最初に，/Users/taipapa/もしくは ~ をつければ良いだけであるが，これでうまくいかないものは個別に対応するしかない．例えば，文献管理ソフトの BibDesk がそうであった．これらの問題は別稿にまとめることにする．\nPreparation for Emacs installation つい先日やったばかりなのに，もはや記憶が定かではないのだが，要は，Upgrade to Mojave and upgrade to Emacs 26.2 by homebrewのUpgrade to Xcode 10.2.1にまとめたことを行った．tmp directoryのpermissionの問題があったかどうかは覚えていない（笑）．homebrew自体のインストールにも特に問題はなかった．要するに，ほとんど何も覚えていないくらいスムーズにことは運んだと言うことである．\nHow to install Emacs 26.3 into MacBook Pro 16 inch (Catalina) Emacsのインストールも，Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew の Upgrade to Emacs 26.2 from 26.1 にまとめたことを行っただけである．\n$ brew tap railwaycat/emacsmacport $ brew install emacs-mac --with-modern-icon --with-imagemagick $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications これで， /usr/local/Cellar/emacs-mac/emacs-26.3-z-mac-7.8 (4,010 files, 129.7MB) がインストールされた．\nあとは，以前に書いた以下の記事に従ってセットアップした．\nEmacsの設定（その1）Preludeの導入（2018年10月9日修正）\nEmacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する\nEmacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など\n実際には，preludeを導入した後に，前のMacBook Pro 2016 lateの/Users/taipapa/.emacs.d/personal/init.orgをコピペしただけである．もちろん，多少の微調整は必要であったが，特に問題なく設定も終了した．diredがらみの微調整はCatalinaに特有の問題ではないようだが，後日に別途まとめるつもりである．\nHow to install LaTeX into MacBook Pro 16 inch (Catalina) References  MacTeX 2019 のインストール＆日本語環境構築法 LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記） Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew  最初のMacTeX 2019 のインストール＆日本語環境構築法の通りにすれば良い．これにより， texlive2019 がインストールされる．下の2つのサイトは当ブログの以前の記事であるが，これをもとに補足作業を行なった．なお，macOS Catalina / macOS Mojave / macOS High Sierra / macOS Sierra / OS X El Capitan に付属するヒラギノフォントのセットアップ にCatalinaでのtexlive2019のインストールの方法が詳細に記載されているが，私は前述の通りにやった後にこのサイトに気が付いたので，こちらのやり方は行っていない．\nフォントマップの確認とpdfへのフォントの埋め込みの確認 いまさらMacTeXの更新 を参考に，フォントマップを見ると，\n$ kanji-config-updmap-sys status Cannot find ptex-fontmaps-macos-data.dat, skipping! CURRENT family for ja: hiragino-highsierra-pron Standby family : ipa Standby family : ipaex とりあえず， CURRENT family for ja: hiragino-highsierra-pron になっているのでよしとする．latexで生成したhogehoge.pdfのフォントの埋め込みを，pdffontを用いて確認してみると，\n$ pdffonts SMC-Ab.pdf name type encoding emb sub uni object ID ------------------------------------ ----------------- ---------------- --- --- --- --------- RWTTMJ+LMSans10-Bold Type 1C Custom yes yes yes 4 0 CZOKCD+CMMI12 Type 1C Builtin yes yes yes 5 0 NBDCJR+HiraKakuProN-W6-Identity-H CID Type 0C Identity-H yes yes no 7 0 TYTYWC+LMRoman17-Regular Type 1C Custom yes yes yes 8 0 GWABID+LMRoman12-Bold Type 1C Custom yes yes yes 9 0 AJNMNY+LMRoman12-Regular Type 1C Custom yes yes yes 10 0 HCOYDP+HiraMinProN-W3-Identity-H CID Type 0C Identity-H yes yes no 16 0 RMUEJU+LMRoman8-Regular Type 1C Custom yes yes yes 21 0 XXHLXJ+LMRoman7-Regular Type 1C Custom yes yes yes 23 0 PPVQFL+LMMono10-Regular Type 1C Custom yes yes yes 24 0 とヒラギノフォントも含めて全てのフォントはemb = yesとなっており，確かに埋め込まれている．\nなお，文献管理ソフトであるBibDeskのpdfの管理に問題が生じたが，これについては解決策とともに別稿でまとめる．\nHow to setup org-mode in MacBook Pro 16 inch (Catalina) 最もよく使うorg-modeのセットアップは以下の以前の記事の通りに作業した．\n Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力） Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理） Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化 Emacsのorg-modeで論文を書く（その4：pandocを利用してorg-modeからword [docx]を文献付きでexportする）  といっても実際にやったのは，以前の/Users/taipapa/.emacs.d/personal/init.orgをコピペしたことがほぼ全てである．\nHow to setup full text search of pdf files on Catalina 以前の記事で全文検索についてまとめたが（Full text search of PDF archives with hyperestraier on maos (mojave) — Hyper Estraierでpdfの全文検索を行う），Catalinaでもこの記事と同じ設定でpdf fileの全文検索が可能となった．Mojaveでもhome directoryでセットアップしたので，大きな問題はなかったのであろう．ただし，Catalinaでは，pdf fileの置き場所がhome directoryの下のData directory以下に変更されているため，/Users/taipapa/Sites/cgi-bin/est/estseek.confの設定は以下のように変更した．\n1 #indexname: casket 2 indexname: /Users/taipapa/Sites/pdf/casket 3 4 tmplfile: estseek.tmpl 5 6 topfile: estseek.top 7 8 helpfile: estseek.help 9 10 lockindex: true 11 12 pseudoindex: 13 14 #replace: ^file:///home/mikio/public_html/{{!}}http://localhost/ 15 #replace: /index\\.html?${{!}}/ 16 17 #replace: ^file:///Data/{{!}}http://localhost/~taipapa/pdf/PDFs/ 18 19 replace: ^file:///Users/taipapa/Data/{{!}}http://localhost/~taipapa/pdf/PDFs/ 20 これでブラウザによるpdf fileの全文検索が可能となった．なお，MacBook Pro late 2016では，document数が11734個，語数が1351563のindex作成に要した時間は約40分強であったが，今回，MacBook Pro 2019 16 inch では，document数が11782個，語数が1362430のindex作成に要した時間は約31分強であった．\nEncountered problems: 遭遇した問題点 ここからは，上述のセットアップの際に遭遇した問題点についてまとめておく．\nzxjafontのプリセットの変更  参照サイト：そういえば ZXjafont が新しくなった（v0.4） zxjafontとは，「和文フォントのプリセット設定」を XeLaTeX + zxjatype の環境で行うためのもの  上記サイト（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））にあるorg fileをコピペして，org fileからpdfをexportしようとすると，\n! Package zxjafont Error: The old preset \u0026#39;hiragino-dx\u0026#39; is *abolished*. See the zxjafont package documentation for explanation. Type H \u0026lt;return\u0026gt; for immediate help. と言うようなエラーになる．要するに，texlive2019をインストールしてzxjafontが新しくなったのに伴い，\u0026ldquo;hiragino-dx\u0026quot;と言うpresetは古くてもう廃止されたと言われているのである．指示に従ってドキュメントを読むと， hiragino-pron を使えとあるので，init.orgの中のhiragino-dxを全てhiragino-pronに変更するとうまくいくようになった．\norg-modeからhtml exportの際のthemeを読み込まない（パスを読まない） 以前の記事（Org-modeでhtml exportの際のthemeについて）で，好きなテーマとしてあげた org-spec であるが，org fileの冒頭の部分は以下のようになっている．\n#+HTML_HEAD: \u0026lt;link href=\u0026#34;http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; #+HTML_HEAD: \u0026lt;link href=\u0026#34;/Hoge/Fuga/org-spec-master/css/style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; これを，Catalinaではパスの変更に合わせて以下のように設定した．\n#+HTML_HEAD: \u0026lt;link href=\u0026#34;http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; #+HTML_HEAD: \u0026lt;link href=\u0026#34;/Users/taipapa/Hoge/Fuga/org-spec-master/css/style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; しかし，上記の2行目を，Catalinaではうまく読めなくなり，設定が読み込まれなくなった．スッピンのhtml とでも言うか，単なるテキストに近いものとしてexportされてしまう．しかし，org-specのcss/style.cssをorg fileと同じdirectoryに置いて，\n#+HTML_HEAD: \u0026lt;link href=\u0026#34;css/style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; と冒頭の部分を書き直すとうまくいく．前述の1行目はなくてもよかった．\nLocation of pdf files in BibDesk on Catalina 以前の記事でBibDeskについてまとめた（Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理））が，その中で，自分の文献リストに“hogefuga-reference.bib”と名前をつけて保存していることを記載している．ただ，保存場所については記述していなかった．実はこのリストは，/Users/taipapa/Documentsに置いており，iCloudを利用して，仕事場のiMacでも同じ文献リストが使えるようにしている．BibDeskでは，その論文のpdfも一緒に管理できるのだが，上述のファイルシステム構造の変化により，全て，pdfが行方不明になってしまった．\nBibDeskにおけるpdfのlocationを修正しようとしてhogefuga-reference.bibの中を見てみると，\nBdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAhLi4vLi4vLi4vRGF0YS9OUy1wZGYvMjVfM18zMTMucGRmTxEBQgAAAAABQgACAAAKSGllcm9ueW11cwAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////DDI1XzNfMzEzLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAwADAAAKIGN1AAAAAAAAAAAAAAAAAAZOUy1wZGYAAgApLzpVc2Vyczprb2hraWNoaTpEYXRhOk5TLXBkZjoyNV8zXzMxMy5wZGYAAA4AGgAMADIANQBfADMAXwAzADEAMwAuAHAAZABmAA8AFgAKAEgAaQBlAHIAbwBuAHkAbQB1AHMAEgAnVXNlcnMva29oa2ljaGkvRGF0YS9OUy1wZGYvMjVfM18zMTMucGRmAAATAAEvAAAVAAIAD///AAAACAANABoAJABIAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAY4=}} と言うふうに，pdfの場所は暗号化？されており，修正などできないことが判明した．1万数千のpdf fileをもう一度手作業でBibDeskに認識させないといけないのかと気が遠くなりかけた．しかし，よく考えてみると，BibDeskは相対的な場所やパスを認識している．以前のMacBook Pro late 2016では，/Data/hoge-pdf/のように，/Dataの下にdirectoryを作成して，そこにpdfを保存していた．Catalinaでは，Data directoryはhome directoryである/Users/taipapaの下に置かれるようになった．つまり，相対的には2レベル下のdirectoryに文献リストであるhogefuga-References.bibを置けば良いのである．\n$ cd /Users $ tree -L 5 . └── taipapa └── Documents └── taipapa2 └── Documents └── hogefuga-References.bib 上図のように，Documentsの下にtaipapa2 directoryを作成し，さらにその下にDocuments directoryを作成し，そこにhogefuga-References.bibを置くようにしたところ，BibDeskがpdfの場所を認識するようになった．ただ，iCloudを介してMojaveがインストールされた他のマック（まだmojave）からもこの文献リストを共有するためには，/Users/taipapa/Documents/にhogefuga-References.bibをコピーしておかなければならない．symbolic linkではオリジナルの方を認識してしまいうまくいかないし，hard linkではiCloudを経由するとうまくいかない．\nまとめ 今回はかなり苦労すると予想していたのだが，意外とスムーズに行ってしまった（笑）．問題になったのは細かい点が多く，ファイルシステムの変更に伴う問題が一番厄介であった．そのほかでは，GIMPも特に問題なく動き，動画ファイルも問題なかった．お陰で仕事ができる環境を素早く確立することができた．今回も，「案ずるより産むが易し」であった．😄\n","date":1577718000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578232841,"objectID":"a98c1570c7effc3d8e249cad43607e33","permalink":"/post/how-to-install-emacs-and-latex-to-macbook-pro-16in-on-catalina/","publishdate":"2019-12-31T00:00:00+09:00","relpermalink":"/post/how-to-install-emacs-and-latex-to-macbook-pro-16in-on-catalina/","section":"post","summary":"1ヶ月ほど前にMacBook Pro late 2016のバッテリーが逝かれてしまい，laptopのはずがコンセントに繋がないと動かないdesktopになってしまった．すると待っていたかのようにMacBook Pro 16-inch 2019が発売となり，速攻で注文してしまった．これまでは常に半年ぐらい様子を見てから新機を購入していたのだが，今回は止むを得ず発売直後のものを購入せざるを得なかった．新しい計算機やOSへのEmacsやLaTeXのインストールは色々な問題に遭遇することが多い．幸いなことに今回の年末年始の休みは長いので，こちらにまとめておくことにした．基本的には，Upgrade to Mojave and upgrade to Emacs 26.2 by homebrewでまとめたことをやれば良くて，大きな問題はなかった．トップの画像で示しているように各種ソフトがスムーズに動いている．\n","tags":["macbookpro16","Emacs","LaTeX","Catalina","setup"],"title":"How to install Emacs \u0026 LaTeX to MacBook Pro 16-inch on Catalina","type":"post"},{"authors":null,"categories":null,"content":"学会発表用のスライド作成については，beamerでスライド原稿用pdfを作成する（その１）に始まる一連の記事にまとめたが，ポスター作成については触れていなかったので，今回まとめることにする．\nlatexを使ってポスターを作成する場合の定番はbeamerを利用したもので，代表例には，beamerposterがある．それ以外にも，latexのポスター作成用のパッケージには，baposter, Gemini, betterposter, tikzposterなどがある．さらに，Inkscapeを使用する方法も報告されている．できるだけこれらの情報を集積してみた．なお，私自身は，標準的なbeamerposterの中に含まれているスタイルファイルを少し改変して用いている．\n Table of Contents  General remarks beamerposter  References Installation Usage Templates   Gemini  References Installation Usage   baposter  References Installation Usage Templates   tikzposter  References Installation Usage Templates   betterposter  References Installation Usage   Inkscape  Making a Math Conference Poster with Inkscape Creating a Science Conference Poster with Inkscape   まとめ    General remarks  Creating Research Posters How to create posters using LaTeX Gallery — Poster LaTeX Templates  beamerposter おそらく最もよく使われているパッケージ\nReferences  beamerposter – Extend beamer and a0poster for custom sized posters The LaTeX beamerposter package Writing posters with beamerposter package in LATEX LaTeX (Beamer)で学会発表用のポスターを作る LaTeX(Beamer)でポスターを作る  Installation texlive (MacTeX)をインストールした時点で入っているので，改めてインストールし直す必要はない．\nUsage スタイルシートの変更 まずスタイルファイルを使用する必要がある．私は，beamerposter packageの中のthemes directoryに入っている beamerthemeI6dv.sty を少し変更して beamerthemeI6dv_test.sty として使用している．変更箇所は以下の通りである．これも覚書として残しておく．\n--- beamerthemeI6dv.sty 2019-11-24 14:32:46.000000000 +0900 +++ beamerthemeI6dv_test.sty 2019-11-24 20:55:47.000000000 +0900 @@ -1,4 +1,4 @@ -\\ProvidesPackage{beamerthemeI6dv} % this style was created by David Vilar +\\ProvidesPackage{beamerthemeI6dv_test} % this style was created by David Vilar  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\selectcolormodel{cmyk} @@ -30,7 +30,7 @@  % footline colors and fonts \\setbeamercolor{footline}{fg=white,bg=i6colorschemeHeadline} -\\setbeamerfont{footline}{fg=white, size=\\normalsize} +%\\setbeamerfont{footline}{fg=white, size=\\normalsize}  % body colors and fonts \\setbeamercolor*{normal text}{fg=black,bg=i6colorscheme3} @@ -42,7 +42,7 @@  % example environment \\setbeamercolor*{example title}{fg=white,bg=i6colorscheme1} -\\setbeamerfont{example title}{size=\\large,series=\\bf,bg=i6colorscheme1,fg=white} +%\\setbeamerfont{example title}{size=\\large,series=\\bf,bg=i6colorscheme1,fg=white}  %\\setbeamercolor*{example body}{fg=white,bg=i6colorscheme4} @@ -88,27 +88,29 @@ \\begin{columns}[T] \\begin{column}{.02\\paperwidth} \\end{column} - \\begin{column}{.07\\paperwidth} + \\begin{column}{.1\\paperwidth} \\begin{center} - %\\includegraphics[width=.6\\linewidth]{logos/i6-hks44} + % \\includegraphics[width=.6\\linewidth]{logos/i6-hks44} + \\includegraphics[height=0.7\\linewidth]{ISC2017-Logo.pdf} \\end{center} \\vskip1ex \\end{column} - \\begin{column}{.675\\paperwidth} + \\begin{column}{.6\\paperwidth} \\vskip4ex \\raggedleft \\usebeamercolor{title in headline}{\\color{fg}\\textbf{\\LARGE{\\inserttitle}}\\\\[1ex]} \\usebeamercolor{author in headline}{\\color{fg}\\large{\\insertauthor}\\\\[1ex]} \\usebeamercolor{institute in headline}{\\color{fg}\\large{\\insertinstitute}\\\\[1ex]} \\end{column} - \\begin{column}{.25\\paperwidth} + \\begin{column}{.15\\paperwidth} \\vskip1cm \\begin{center} - \\includegraphics[width=.7\\linewidth]{/u/figures/deselaers/logos/rwthaachenuniversity-whitegray} + % \\includegraphics[width=.7\\linewidth]{/u/figures/deselaers/logos/rwthaachenuniversity-whitegray} + \\includegraphics[height=.45\\linewidth]{Kobito.jpg} \\end{center} \\vskip1.5cm \\end{column} - \\begin{column}{.03\\paperwidth} + \\begin{column}{.02\\paperwidth} \\end{column} \\end{columns} \\end{beamercolorbox} @@ -139,7 +141,7 @@ \\end{beamercolorbox} \\begin{beamercolorbox}[ht=4ex,leftskip=1cm,rightskip=1cm]{footline}% - Lehrstuhl f\\\u0026#34;ur Informatik 6 - Computer Science Department - RWTH Aachen University - Aachen, Germany \\hfill Mail: \\texttt{\u0026lt;surname\u0026gt;@cs.rwth-aachen.de} \\hfill WWW: \\texttt{http://www-i6.informatik.rwth-aachen.de} + Department of HogeFuga, HogeFuga University Graduate School of Medicine, Japan \\hfill Mail: \\texttt{taipapa@hoge-u.sc.jp} \\hfill WWW: \\texttt{http://www-hogefuga/TOP.html} \\vskip1ex \\end{beamercolorbox}  好みによって適当に変更すれば良い． LogoをKobito.jpgに入れ替えているが，これはそれぞれの所属組織のものに変更すれば良い． 左側のLogoは学会のもの（ISC2017-Logo.pdf）に変更している． 一番最後はフッターに所属組織，メールアドレス，ウェブサイトなどを入れるための情報であり，そこも適宜置き換えれば良い．  スタイルシートの置き場 私のように，LaTeXをMacTeXでインストールした場合は，上記の変更したスタイルシートは， ~/Library/texmf/tex/latex/beamer/themes/theme/ に置く．これでLaTeXはこのスタイルシートを見つけてくれる．\nPoster example 上記スタイルシートを用いて作成すると下図のようなポスターが出来上がる．これは実際の学会発表に使用したものである．ただし，発表者や所属組織やロゴは変更してある．\n   このポスターのtex fileは以下のようになっている．元々は．どこかからとってきたtex fileを改変しているのだが，オリジナルをどこから持ってきたかは，もはや記憶の彼方である\u0026hellip;..(^^;;; （どなたかご指摘いただければ幸いである） 素人が色々弄ってなんとか形にしたものだが，これを上書きしていく事で割と簡単にポスターが作成できるようになった．試行錯誤の跡もそのまま残した状態でアップしておく．念のために書いておくが，このファイルをdocument.texとして保存し，LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記） に書いたように， latexmk -pvc -pdf -view=none document.tex とすればコンパイルされてpdfが出来上がる．ただし，ファイルの中の画像（pdf）は適当なものと置き換えていただきたい．\n 9行目： \\usetheme{I6dv_test} によりスタイルシートを指定している． 45行目： orientation=landscape で横長， orientation=portrait で縦長になる．実際の大きさは， width=200,height=100 で合わせる（幅 200cm 高さ 100 cmということである）．scaleの部分でも調整する．coding:utf-8-*- \\documentclass[final,t]{beamer} \\mode\u0026lt;presentation\u0026gt; { % \\usetheme{Warsaw}  % \\usetheme{Aachen}  % \\usetheme{Oldi6}  % \\usetheme{I6td}  \\usetheme{I6dv_test} % \\usetheme{I6pd}  % \\usetheme{I6pd2} } % additional settings \\setbeamerfont{itemize}{size=\\normalsize} \\setbeamerfont{itemize/enumerate body}{size=\\normalsize} \\setbeamerfont{itemize/enumerate subbody}{size=\\normalsize} % additional packages % \\usepackage{times}  %% 上記だけではsans serifにならないので，下記を設定　%% http://www.tug.dk/FontCatalogue/ibmplexsansregular/ %% http://www.tug.dk/FontCatalogue/sansseriffonts.html % \\usepackage[T1]{fontenc} % \\usepackage[usefilenames,% Important for XeLaTeX % DefaultFeatures={Ligatures=Common}]{plex-otf} % % \\renewcommand*\\familydefault{\\sfdefault} %% Only if the base font of the document is to be sans serif  %% http://www.tug.dk/FontCatalogue/ibmplexsanstext/ \\usepackage[T1]{fontenc} \\usepackage[usefilenames,% Important for XeLaTeX RMstyle={Text,Semibold}, SSstyle={Text,Semibold}, TTstyle={Text,Semibold}, DefaultFeatures={Ligatures=Common}]{plex-otf} % \\renewcommand*\\familydefault{\\sfdefault} %% Only if the base font of the document is to be sans serif  \\usepackage{amsmath,amsthm, amssymb, latexsym} \\usepackage{exscale} % \\boldmath \\usepackage{booktabs, array} % \\usepackage{rotating} %sideways environment \\usepackage[english]{babel} \\usepackage[latin1]{inputenc} \\usepackage[orientation=landscape,size=custom,width=200,height=100,scale=1.725]{beamerposter} \\listfiles \\graphicspath{{figures/}} % \\usepackage{latexsym}  % Display a grid to help align images % \\beamertemplategridbackground[1cm]  \\title{\\huge Perioperative Assessment Of Cerebral Perfusion Territories Through Arterial Spin Labeling Magnetic Resonance Imaging In Carotid Stenosis} \\author[taipapa et al.]{taipapa, taimama, taison, taidaughter, other person1, other person2, other person3, other person 4, other person 5} \\institute[HogeFuga University]{Department of HogeFuga, HogeFuga Medical Center Japan} \\date[Feb. 23, 2017]{Feb. 17, 2017} % abbreviations \\usepackage{xspace} \\makeatletter \\DeclareRobustCommand\\onedot{\\futurelet\\@let@token\\@onedot} \\def\\@onedot{\\ifx\\@let@token.\\else.\\null\\fi\\xspace} \\def\\eg{{e.g}\\onedot} \\def\\Eg{{E.g}\\onedot} \\def\\ie{{i.e}\\onedot} \\def\\Ie{{I.e}\\onedot} \\def\\cf{{c.f}\\onedot} \\def\\Cf{{C.f}\\onedot} \\def\\etc{{etc}\\onedot} \\def\\vs{{vs}\\onedot} \\def\\wrt{w.r.t\\onedot} \\def\\dof{d.o.f\\onedot} \\def\\etal{{et al}\\onedot} \\makeatother %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{document} \\begin{frame}{} \\begin{columns}[t] \\begin{column}{.32\\linewidth} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  \\vspace*{-2.35cm} \\begin{block}{Introduction} % \\begin{columns}[t]  % \\begin{column}{.75\\linewidth}  \\begin{itemize} % \\item Arterial spin labeling (ASL) is a magnetic resonance  % imaging (MRI) technique that uses the protons of arterial  % blood water molecules as endogenous tracers to evaluate  % CBF noninvasively.  \\item Territorial arterial spin labeling (TASL), a modified ASL technique, allows for the independent labeling of major individual feeding vessels and, consequently, visualization of their perfusion territories. \\item Perfusion territories can change substantially during the perioperative periods of carotid endarterectomy (CEA) and carotid artery stenting (CAS). Perioperative changes in the perfusion territories of major arteries are important because these changes can influence the perioperative management of hyperperfusion and other conditions. \\end{itemize} \\vspace{0.5cm} \\small{ $\\bigstar$ \\textbf{Financial Disclosures:} This study was supported, in part, by a Grants-in-Aid for Scientific Research (C) KAKENHI Number 15K10302 from the Japan Society for the Promotion of Science. } \\end{block} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  \\begin{block}{Objective} The objective of this study was to use TASL to assess the relationships between perioperative changes in the perfusion territories of the ICA and the CBF increase after carotid revascularization in patients with carotid stenosis. \\end{block} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  \\begin{block}{Subjects and Methods} \\begin{columns}[t] \\begin{column}{.5\\linewidth} \\centering \\includegraphics[width=1\\linewidth]{Figures/ISC2017-subjects-left_Kohmura_opt.pdf}\\\\%[1ex]  \\end{column} \\begin{column}{.5\\linewidth} \\centering \\vspace{-44cm} \\includegraphics[width=0.85\\linewidth]{Figures/ISC2017-subjects-right_opt.pdf}\\\\[1ex] \\begin{itemize} \\item TASL images were fused with T1 weighed images(T1WI) on the software (Osirix) to match with anatomical images. Perfusion volume of each ICA was calculated from perfusion area and thickness of slices. \\item Asymmetry Index (AI) was also calculated from perfused volume of ICA on each side. % \\item The patients were divided into 2 groups on the  % basis of the preoperative perfusion volume of the  % stenotic ICA, that is, \\textbf{normal PV} (n = 13)  % or \\textbf{reduced PV} (n = 19) groups.  % \\item \\textbf{Normal PV} was defined as $\\geq$ -2SD of the  % healthy volunteer group, that is, 312.4 cm3.  % \\item \\textbf{Reduced PV} was defined as $\\textless$  % -2SD.  \\end{itemize} \\end{column} \\end{columns} \\end{block} \\end{column} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  \\begin{column}{.32\\linewidth} \\vspace*{-2.35cm} \\begin{block}{Results} \\textbf{General postoperative changes in PV of ICA}\\\\ \\begin{columns} \\begin{column}{.4\\linewidth} \\vspace*{-17cm} \\begin{itemize} \\item The preoperative perfusion volume (\\textbf{PV}) of the stenotic ICA in the carotid stenosis group was significantly smaller than that in the control group. Revascularization increased the PV of the stenotic ICA and equalized the PV of the ICAs bilaterally. \\end{itemize} \\end{column} \\begin{column}{.6\\linewidth} \\centering \\includegraphics[width=1\\linewidth]{Figures/Figure-2-WNS.pdf}\\\\ \\end{column} \\end{columns} \\vspace*{-0.5cm} \\begin{itemize} \\item The patients were divided into 2 groups on the basis of the preoperative PV of the stenotic ICA, that is, \\textbf{normal PV} (n = 13) or \\textbf{reduced PV} (n = 19) groups. \\item \\textbf{Normal PV} was defined as $\\geq$ -2SD of the healthy volunteer group, that is, 312.4 cm3. \\item \\textbf{Reduced PV} was defined as $\\textless$ -2SD. \\end{itemize} \\vspace{0.5cm} \\textbf{Differential postoperative changes in PV \\\u0026amp; CBF } \\begin{columns} \\begin{column}{.4\\linewidth} \\vspace*{-18cm} \\begin{itemize} \\item \\textbf{A:} The changes in the PV of the stenotic ICA before and after CEA or CAS in the normal PV group and the reduced PV group. After treatment, the PV increases significantly in the two groups, while the postoperative increase was much larger in the reduced PV group. \\end{itemize} \\end{column} \\begin{column}{.6\\linewidth} \\includegraphics[width=1\\linewidth]{Figures/Figure-3-WNS.pdf}\\\\ \\end{column} \\end{columns} \\begin{itemize} \\item \\textbf{B:} The changes in ipsilateral CBF before and after CEA or CAS in the normal PV group and the reduced PV group. The postoperative increase in the ipsilateral CBF was larger in the reduced PV group than in the normal PV group. \\end{itemize} \\vspace{0.5cm} \\textbf{Relationships between postoperative changes in PV \\\u0026amp; CBF} \\begin{columns} \\begin{column}{.45\\linewidth} \\vspace*{-24cm} \\begin{itemize} \\item \\textbf{A:} The rate of PV increase is significantly higher in the reduced PV group than in the normal PV group. \\item \\textbf{B:} The rate of CBF increase is significantly higher in the reduced PV group than in the normal PV group. \\item \\alert{Red circles} represent 4 patients whose postoperative increase in perfusion volume are less than lower quartile, and whose increase in CBF is more than upper quartile. \\end{itemize} \\end{column} \\begin{column}{.55\\linewidth} \\vspace*{-1.75cm} \\includegraphics[width=0.96\\linewidth]{Figures/Figure-4-WNS.pdf}\\\\[2ex] \\end{column} \\end{columns} \\end{block} \\end{column} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  \\begin{column}{.32\\linewidth} \\vspace*{-3cm} \\begin{block}{} \\textbf{Differential postoperative ICA flow changes} \\begin{columns}[t] \\begin{column}{.6\\linewidth} \\begin{itemize} \\item The preoperative ICA flow was significantly lower in the reduced PV group than in the normal PV group. \\item After treatment, the perfusion volume increases significantly in the two groups, while the postoperative increase was much larger in the reduced PV group. \\end{itemize} \\end{column} \\begin{column}{.4\\linewidth} \\vspace*{-4cm} \\centering \\includegraphics[width=0.8\\linewidth]{Figures/Figure-5-WNS.pdf}\\\\[2ex] \\end{column} \\end{columns} \\textbf{Illustrative cases} \\begin{itemize} \\item \\underline{Case 6 (normal PV group)}: PV markedly increased 1 day after CEA and was nearly unchanged between 1 and 7 days after CEA. ICA flow markedly increased after arterial reconstruction during CEA. Regional CBF was stable throughout the perioperative period. \\item \\underline{Case 8 (reduced PV group)}: PV 1 day after CEA was not significantly different from that before surgery, and then, it significantly increased between 1 and 7 days after CEA, resulting in equalization of the perfusion volumes of the left and right ICAs. ICA flow markedly increased after arterial reconstruction during CEA. Regional CBF increased significantly at 1 day after CEA (CBF increase $\\geq$ 100\\%), representing typical hyperperfusion. Regional CBF decreased significantly at 7 days after CEA compared with the first postoperative day and returned to its normal range. \\end{itemize} % \\vspace{1cm}  \\centering \\includegraphics[width=0.8\\linewidth]{Figures/UsualCase_legend_v2_opt.pdf}\\\\ \\end{block} \\vspace*{-0.95cm} \\begin{block}{Conclusion} \\vspace*{-1cm} \\begin{itemize} \\item TASL demonstrated that CEA and CAS elicited increases in the PV of stenotic ICAs, which resulted in equalization of the PV of the left and right ICAs. \\item Patients with reduced PV tended to increase the PV more markedly than patients with PV within normal ranges. \\item In some patients with a reduced PV, the PV increased slightly, while the ICA flow markedly increased, which resulted in a large increase in CBF or hyperperfusion. \\item These findings suggested that an imbalance between increases in the PV and ICA flow could play an important role in the pathophysiology of hyperperfusion. \\end{itemize} \\vspace{-1ex} \\end{block} \\vspace*{-0.5cm} \\begin{block}{References} \\vspace*{-0.75cm} \\begin{enumerate} \\scriptsize{ \\item Uchihashi et al. Clinical application of arterial spin-labeling MR imaging in patients with carotid stenosis: quantitative comparative study with single-photon emission CT. AJNR Am J Neuroradiol 32, 1545--51, 2011 \\item Hartkamp et al. Mapping of cerebral perfusion territories using territorial arterial spin labeling: techniques and clinical application. NMR Biomed 26, 901--12, 2013} \\end{enumerate} \\end{block} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  \\end{column} \\end{columns} \\end{frame} \\end{document} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%% Local Variables: %%% mode: latex %%% TeX-PDF-mode: t %%% TeX-master: t %%% End:   Templates Overleaf beamerposter templates : Overleafにあるbeamposterのテンプレート．膨大な数のテンプレートがあるので，参考になる．\nGemini texliveには含まれていないbeamerの新しいポスター用テーマ\nReferences  Gemini: A Modern LaTeX Poster Theme Gemini is a modern LaTex beamerposter theme : GitHub site  Installation  上記のGitHub siteをcloneするかdownloadすれば良い． beamerposterに依存  Usage  GitHub siteに書いてある通り  baposter texliveには含まれていない．より新し目のパッケージ？\nReferences  LaTeX Poster Template ご本家．ポスターの実例が数多く挙げられており，FAQもある．  Installation 上記サイトから baposter.tar.bz2 をdownloadする．\nUsage 上記サイトや， The baposter latex poster style を参照\nTemplates Overleaf baposter templates : Overleafにあるbaposterのテンプレート．\ntikzposter 「科学的ポスターを効率的に作成するLaTeXのクラス」である．\nReferences  tikzposter – Create scientific posters using TikZ CTAN TikZposter Wiki ガイドをダウンロードできるリンクあり Elena Botoeva 作者のページ  Installation texliveをインストールすれば，一緒に入ってくる．\nUsage 上記のガイドを参照．最も簡単な例は以下の通り．\n1 2 3 4 5 6 7 8 9 10 11 12  \\documentclass{tikzposter} \\title{Title} \\author{Author} \\institute{Institute} \\begin{document} \\maketitle \\block{Block}{Content} \\end{document}   Templates Overleaf tikzposter templates : Overleafにあるtikzposterのテンプレート．多数のテンプレートがあるので，参考になる．\nbetterposter 伝統的な学術ポスターに対する新たなスタイルのポスター．実にユニーク！\n   要するに中核的なメッセージを簡潔な文章で特大に表示し，方法，結果，考察などは極端に簡潔にし，詳細はQR codeから論文を落として読んでもらうという，とんでもない発想のポスターである．\nReferences  Better Scientific Poster : ご本家．元々はPowerPointのテンプレート How to create a better research poster in less time (including templates) : 作者自身のYouTube動画．面白い．必見！ Better Poster Latex Template : GitHub. LaTeXへの移植版． Mike Morrison : 作者のTwitter．多くの人が自分の\u0026quot;betterposter\u0026quot;をアップしているのが見られる．  Installation 上記の Better Poster Latex Template に詳細に書いてあるが，repositoryをclone するか，ダウンロードして，パスが通るところに置く．\nUsage 上記の Better Poster Latex Template を参考．\nInkscape これはオマケ．なぜかというと，ダントツでかっこいいから（笑）．\nMaking a Math Conference Poster with Inkscape これを見ると，羨望の念が．．．でも，Inkscapeを使えるようにならないと．．．\n   Creating a Science Conference Poster with Inkscape こちらも同じく．．．\n   まとめ 今回ポスターについてまとめてみて，改めて思ったのは，一旦自分のスタイルが出来上がると，万年一日のごとく，同じフォーマットで作成してしまい，金太郎飴のようになってしまうという事である．もちろん，内容が一番大事なのだが，如何に伝えるかという点でポスターのフォーマットは重要と思う．そういう意味では，betterposter や Inkscape によるポスターは非常に刺激的であった．特に，betterposterの手法は比較的模倣がしやすそうなので，次回は是非試みてみたい．\n","date":1574348400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575181310,"objectID":"b03bf8704203b64cba1ffc4e8dc4abc5","permalink":"/post/how-to-create-conference-poster-by-latex-beamer/","publishdate":"2019-11-22T00:00:00+09:00","relpermalink":"/post/how-to-create-conference-poster-by-latex-beamer/","section":"post","summary":"学会発表用のスライド作成については，beamerでスライド原稿用pdfを作成する（その１）に始まる一連の記事にまとめたが，ポスター作成については触れていなかったので，今回まとめることにする．\nlatexを使ってポスターを作成する場合の定番はbeamerを利用したもので，代表例には，beamerposterがある．それ以外にも，latexのポスター作成用のパッケージには，baposter, Gemini, betterposter, tikzposterなどがある．さらに，Inkscapeを使用する方法も報告されている．できるだけこれらの情報を集積してみた．なお，私自身は，標準的なbeamerposterの中に含まれているスタイルファイルを少し改変して用いている．\n","tags":["latex","beamer","conference","poster","emacs","Inkscape","tikz","overleaf"],"title":"How to create conference posters by latex (beamer)","type":"post"},{"authors":null,"categories":null,"content":"Emacsのカーソルは画面をスクロールして上端または下端に至ると画面の中に表示される状態を維持するように動いてしまい，元の位置には止まらないのが仕様になっている．これは通常のエディターとは違っており，不便と感じて，色々と調べたり試したりしたのだが，要するに思想の違いであると考えるに至った．カーソルの位置は保持できない代わりにマークという方法が提供されている．まぁ，これが結構分かりにくいのだが，使ってみると案外便利である．そこで，マークについてまとめることにした．\n Table of Contents  Mark  References   helm-all-mark-rings    Mark References  マークとリージョン Emacsのヘルプ （C-h i で自分のヘルプを読むのが一番早いかも）  Emacsでは，テキストのある位置にマーク（mark）をセットすることができる．マークをセットするとマークとカーソルがあるポイントまでの領域はactiveになり，ハイライト表示される．例えば，下図では，5081行の先頭の「例えば」の例にカーソルを置いた状態で， C-SPC と打ってマークを置き，そのままアローキーでカーソルを5086行の文末まで移動させた状態であるが，マークを置いたところから現在のカーソルのある位置までがハイライトされている（activeになっている）．windowの表示範囲を越えるような広い範囲を選択する際に特に便利である．\n   要するに，通常のエディターやワープロにおいて，マウスでクリックして押したままの状態でなぞった時と同じ状態である．この状態で，ハイライトされた領域をコピーしたり削除したりできる．まぁ，これだけだとどうと言うことはないのだが， マークはmark ringに格納されるので，そこに戻ることができる． これが便利である．この機能を利用するときはマークをセットしてactiveにしないほうが使いやすい．マークをセットした位置に戻るには C-u C-SPC と打つ．\n以上をまとめると以下のようになる．\n.zebra-striping table { text-align: center; }  Table 1: Key bindings for mark in emacs     Key binding Description     C-SPC マークをセットする．カーソルを移動させるとマークからカーソルの位置までがactiveになる   C-SPC C-SPC マークをactiveにせずにマークをセットしてから、マークリングにpush（格納）する   C-u C-SPC マークがあった場所にカーソルを移動し、mark ringから1つ前のマークを復元する     要するに，あとで戻りたい位置にいるときに C-SPC C-SPC でactiveにせずにマークをつけておき，しばらく作業をしたのち戻りたくなったら， C-u C-SPC で戻ると言う使い方ができる．マークはmark ringに格納され，新しいものからリストの上に追加されていく． C-u C-SPC を連打すれば，次々と古いマークの位置に移動できる．なお， set-mark-command-repeat-pop を非nilにセットすると、C-u C-SPCの後に続けて、C-u C-SPCではなく、C-SPCでマークリングを巡回できるようになる．これは， M-x customize から，Customize Aproposに入り，下図のようにset-mark-command-repeat-popをToggleでonにすれば良い．\n   最古のマークまで行くと，また，最新のマークに戻ってくる．それで，mark ringなのであろう．これだけでも十分に便利であり，カーソルの位置を保持できないことを補って余りあるともいえる．さて，mark ringには，localとglobalの2種類があるが，これについては以下の解説を参考にしていただきたい．\n グローバルマークリング（マニュアルから引用）: 各バッファーに属する普通のマークリングに加えて、Emacsにはグローバルマークリング(global mark ring)が1つあります。以前マークをセットしてからバッファーを切り替えた場合、マークをセットすると、マークはカレントバッファーのマークリングに加えて、グローバルマークリングにも記録されます。その結果、グローバルマークリングには訪れていたバッファーの系列が記録され、各バッファーではマークを設定した箇所が記録されます。グローバルマークリングの長さは、global-mark-ring-maxで制御され、デフォルトは16です。\nコマンド C-x C-SPC (pop-global-mark)は、グローバルリングの最新のバッファー位置にジャンプします。これもリングを巡回するので、連続してC-x C-SPCを使うことにより、古いバッファーのマーク位置に移動します。\n  ここまでくると，「mark ringの内容が見られたらもっと便利だろうなぁ」と期待してしまうのは人情というものである．\nhelm-all-mark-rings  参照1：Command: helm-all-mark-rings 参照2：コマンド: helm-all-mark-rings 上記記事の翻訳  さて，そんな期待を叶えてくれるのが，helm-all-mark-ringsである．localとglobalの両方のmark ringsをフレンドリーなインターフェースで可視化して，以前にいたところにいつでも戻れるようにする．私の場合は，最初にpreludeをインストールしている（Emacsの設定（その1）Preludeの導入）ので，helmは既にインストールされており，このコマンドはデフォルトでは，C-c h SPCにキーバインドされている．下図は，実際にC-c h SPCと打った時の画像である．下のバッファの中をarrow keyで上下し，見たい行のところでC-jと叩けば，上のバッファがそこへとぶ．そのまま次の行に動いてC-jとすれば，今度はそこに飛ぶ．Returnすれば，そのままそのバッファに行って確定する．\nmark-ringはarrow keyで上下に動けるのだが，そのままglobal-mark-ringには移ってくれない．どうするかというと，minibufferのpattern: とあるところに，行きたいglobal-mark-ringの項目の最初の文字か2文字目ぐらいまでを入れれば，その項目だけが残るので，それを選択すれば良い．いつものhelmの選択方法である．\n   今回は地味だ．．．．しかし，役に立つと思う．\n","date":1572102000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573045745,"objectID":"ad235c2741cbe27e404375c47eb0054f","permalink":"/post/mark-and-desktop-saving/","publishdate":"2019-10-27T00:00:00+09:00","relpermalink":"/post/mark-and-desktop-saving/","section":"post","summary":"Emacsのカーソルは画面をスクロールして上端または下端に至ると画面の中に表示される状態を維持するように動いてしまい，元の位置には止まらないのが仕様になっている．これは通常のエディターとは違っており，不便と感じて，色々と調べたり試したりしたのだが，要するに思想の違いであると考えるに至った．カーソルの位置は保持できない代わりにマークという方法が提供されている．まぁ，これが結構分かりにくいのだが，使ってみると案外便利である．そこで，マークについてまとめることにした．\n","tags":["emacs","mark","ring","helm"],"title":"How to use mark in Emacs (helm-all-mark-rings)","type":"post"},{"authors":null,"categories":null,"content":"ついにorg-mode用のサイドバーが登場した．最近，精力的にredditに投稿しているalphapapa氏の作った文字通りorg-sidebarがそれである．最初1年ぐらい前に発表され，暫くは様子見をしていたのだが，今回の最新版では色々と改良されており，紹介することにした．なお，前回紹介したorg-rifleも同氏の作成したパッケージである．\n Table of Contents  References Installation Usage  Combination of org-sidebar and treemacs      References  org-sidebar ご本家 Finally solving the lack of a tree-view navigation window in Org redditへの投稿記事 ts.el a date and time library for Emacs  Installation いつものように，init.orgに下記のように書き込む．\n#+begin_src emacs-lisp (use-package ts :ensure t) (use-package org-sidebar :ensure t :quelpa (org-sidebar :fetcher github :repo \u0026#34;alphapapa/org-sidebar\u0026#34;) :bind (\u0026#34;\u0026lt;f1\u0026gt; C-s\u0026#34; . org-sidebar-tree)) #+end_src ただし，まず，ご本家サイトにある通りに後半の部分のみでorg-sidebarをインストールしようとすると，tsがないと文句を言われた．そこで，後半部分はコメントアウトした上で，前半部分を追加し，まず，tsをインストールするようにした．ついで，後半部分のコメントアウトを外して，再度org-sidebarをインストールしたところ，うまくいった．キーバインディングの残りがほとんどなく，とりあえず，sidebarのsに合わせられて，かつ，空いているところということで，org-sidebar-treeをf1 C-sに割り当てた．\nUsage ご本家サイトに詳細な説明とGIF動画が掲載されている．GTD toolとしてorg-modeを全く使っていない私には， M-x org-sidebar-tree だけで十分役に立つことが分かった．同コマンドを打つ，あるいは， f1 C-s を打つと下図のような画面となる．\n   左側がtreeのwindowであり，このブログの原稿であるorg-mode fileのlevel2までのheadingが表示されている．5094行目のorg-sidebarにカーソルがあり，このheadingが選択されていることを示す．そして，右側には，このheading (org-sidebar)の内容を示すバッファが表示されている．左側のTree windowの中をカーソルで上下して目的のheadingに行きReturnを叩けば，右側にそのheadingの内容のみが表示され，かつ，カーソルがそちらに移る．他のheadingは表示されず，そこにだけ集中できる．なかなかよくできている．\nここで注意しないといけないのは，swiperやhelm-org-rifle-current-bufferによる検索を行った際に，どのバッファがactiveかで検索範囲が異なることである．右側のバッファでは，そのheadingの内容しか検索しない．Tree windowで行うと，そのファイルの全体を対象として検索する．ただし，結果に飛ぶところでフレームのlayoutが崩れてしまうことがある．そうなると，みやすくする調整に手間がかかる．一方，helm-org-rifleやprojectileのC-c p s gなどは，普通にどのバッファにいても，そのファイル全体を検索するので，org-sidebarを使用している時には，検索にはこちらを使うべきかもしれない．\nCombination of org-sidebar and treemacs やはり，treeとつくからには，以前に紹介したtreemacs（Treemacs and Projectile）との併用を試してみたくなり，やってみたのが，下図である．\n   このように併用はもちろん可能ではあるが，フレームの配列が乱れてしまい，それを調整するのに手間取ることがある．目的が違うものなので，一緒にしなくても異なるフレームで使えば良いと思う．\n","date":1571238000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571491006,"objectID":"4c44107965de4387067a8a409e408ad0","permalink":"/post/org-sidebar/","publishdate":"2019-10-17T00:00:00+09:00","relpermalink":"/post/org-sidebar/","section":"post","summary":"ついにorg-mode用のサイドバーが登場した．最近，精力的にredditに投稿しているalphapapa氏の作った文字通りorg-sidebarがそれである．最初1年ぐらい前に発表され，暫くは様子見をしていたのだが，今回の最新版では色々と改良されており，紹介することにした．なお，前回紹介したorg-rifleも同氏の作成したパッケージである．\n","tags":null,"title":"org-sidebar","type":"post"},{"authors":null,"categories":null,"content":"学会続きで，久方ぶりの更新である．org fileの中を検索する際に，Swiper, ivy, avy, migemoによるEmacsの検索強化で取り上げた swiper を，もっぱら使用しているのだが，そうすると，ファイル内のどこにいるのかが分からなくなることがある．検索ファイルのパスなどがorg fileの中で分かる検索ソフトはないものかと探したところ，このorg-rifleが見つかった．\n Table of Contents  References Installation Usage    References  org-rifle ご本家 helm-org-rifle Org Rifle Rifle through my org-mode entries.  ご本家サイトの最初に，有名な米海兵隊信条（The Creed of a United States Marine）が，以下のように引用されている．\nThis is my rifle. There are many like it, but this one is mine. My rifle is my best friend. It is my life. I must master it as I must master my life.\nrifleには，「くまなく探す」という意味もあるので，この命名は，それにかけたシャレのようである．非武装平和主義が信条の私にはよく分からん．．．とにかく，詳細に書かれたご本家サイトを読めば，こんなところを読む必要はないような気もするが（笑），後日の自分のためにまとめておく．\nInstallation いつものように，init.orgに下記のように書き込む．\n#+begin_src emacs-lisp (use-package helm-org-rifle :ensure t :after (helm org) :bind (\u0026#34;s-c r r\u0026#34; . helm-org-rifle) (\u0026#34;s-c r a\u0026#34; . helm-org-rifle-agenda-files) (\u0026#34;s-c r .\u0026#34; . helm-org-rifle-current-buffer) (\u0026#34;s-c r d\u0026#34; . helm-org-rifle-directories) (\u0026#34;s-c r f\u0026#34; . helm-org-rifle-files) (\u0026#34;s-c r D\u0026#34; . helm-org-rifle-org-directory) (\u0026#34;s-c o o\u0026#34; . helm-org-rifle-occur) (\u0026#34;s-c o a\u0026#34; . helm-org-rifle-occur-agenda-files) (\u0026#34;s-c o .\u0026#34; . helm-org-rifle-occur-current-buffer) (\u0026#34;s-c o d\u0026#34; . helm-org-rifle-occur-directories) (\u0026#34;s-c o d\u0026#34; . helm-org-rifle-occur-directories) (\u0026#34;s-c o f\u0026#34; . helm-org-rifle-occur-files) (\u0026#34;s-c o D\u0026#34; . helm-org-rifle-occur-org-directory)) #+end_src key-bindingは諸般の事情により，s-cを使うことにした（s はoption keyを意味する）．\nまた， helm-org-rifle-show-path を t にセット することにより，org file内でのそれぞれのheadingに至るパスが表示される．（実は，デフォルトで t になっている）\nUsage helm-org-rifleは，エントリーベースで結果が表示される．つまり，org fileの中のheadingとその内容が表示されるので，そこに至るパスが分かる，つまり，どこに位置しているかが分かる．これは思っていた以上に便利である．\n例えば，このブログの原稿をemacsで開いているときに，org-mode, export, wordを含む部分を探したいときは，s-c r . としてから，key wordを打てば，まず下図のようになる．下のバッファでハイライトされている部分は，最上位のheadingであるPostの下のsubheadingである「Emacsのorg-modeで論文を書く（その4：．．．」の下位に目的の部分が含まれていることを示す．\n   さらに，ハイライトされている部分で，C-jと打てば，下図のように，上のバッファが該当する領域にジャンプして表示してくれる．\n   もちろん，検索対象が明確に分かっていて\u0026quot;hogehoge.jpg\u0026quot;など名前も分かっているのであれば，swiperの方が便利であろう．しかし，「hogeとfugaとhogaに関連している部分はどこだったかな？」というようなときは，このorg-rifleが重宝する．\nさらにもっと色々な使い方ができるようで，該当項目のrefileも可能である．興味のある方は，tabを打ってでてくるメニューを試していただきたい．\n","date":1570978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571490760,"objectID":"aba7632dcba4157b05cd8991ae8a9b1b","permalink":"/post/org-rifle/","publishdate":"2019-10-14T00:00:00+09:00","relpermalink":"/post/org-rifle/","section":"post","summary":"学会続きで，久方ぶりの更新である．org fileの中を検索する際に，Swiper, ivy, avy, migemoによるEmacsの検索強化で取り上げた swiper を，もっぱら使用しているのだが，そうすると，ファイル内のどこにいるのかが分からなくなることがある．検索ファイルのパスなどがorg fileの中で分かる検索ソフトはないものかと探したところ，このorg-rifleが見つかった．\n","tags":["emacs","org-mode","org-rifle","search"],"title":"Org-rifle","type":"post"},{"authors":null,"categories":null,"content":"先日，ブログのアップデートについて2回に分けてまとめたが（How to update hugo and academic theme (Part1), How to update hugo and academic theme (Part2)），読み直してみるとhugoとacademic themeの全体的なアップデートのことで終わっていて，具体的な内容のアップデートについてはあまり書いていないことに気がついた．そこで，今回はその辺の細かいところについて，後日の自分のためにも，まとめておくことにした．今回の内容に関しては，ox-hugoのレベル，つまり，org-mode file ではどうすれば良いのか分からず，直接マークダウンファイルを弄らざるを得ない事が多かった．\n Table of Contents  自己紹介 Widget in Academic home pageの最初の画像 Day (light) and night (dark) mode    自己紹介  Introduce yourself academicのご本家の解説 リンク先に書いてあるが，content/authors/admin/_index.mdに自分のプロファイルを書く．不要な部分は#で全てコメントアウトすれば良い． avatorを表示するには，画像の名前をavatorとしてcontent/authors/admin/に保存する．例として元々あった画像と置き換えれば良い．  Widget in Academic  Getting Started With the Page Builder ご本家の解説 widgetとは．．．ウィジェットである．(^^;;; ブログを組み立てる部品のようなもの．上記のリンク先に詳細に解説されている．例えば， About widjetは読者にブログ主を紹介するためのものである．ただし，実際のプロファイルの内容は前述のようにcontent/authors/admin/_index.mdに記載されている． このブログのように，投稿記事を載せているだけの場合は，ほとんどのwidgetは不要である． 不要なwidgetは，content/home/のディレクトリから削除すれば良い．参考のために残して置きたければ， それぞれのindex.mdのfront matterの最初の方にある active = true を active = false とすれば良い．下図は， content/home/featured/index.mdのfeatured widget の場合である．これで featured widget は表示されなくなる．   +++ # A Featured Publications section created with the Featured Content widget. # This section displays publications from `content/publication/` which have # `featured = true` in their front matter. widget = \u0026#34;featured\u0026#34; # See https://sourcethemes.com/academic/docs/page-builder/ headless = true # This file represents a page section. active = false # Activate this widget? true/false weight = 80 # Order that this section will appear. home pageの最初の画像 ブログの最初のページに掲げる画像だが，アップデート前は， hero widget で設定していた．具体的には，content/home/hero.mdのなかで，front matterに\n+++ # Hero widget. widget = \u0026#34;hero\u0026#34; active = true ..... overlay_img = \u0026#34;headers/hogehoge.jpg\u0026#34; # Image path relative to your `static/img/` folder. ..... と書いていた．\nacademicをアップデート後は，画像の一部しか表示されなくなったために，content/home/hero/index.mdのfront matterに active = false と書いて，hero widget自体を無効にした．代わりに，content/home/slider/index.md のfront matterに　+++ # Slider widget. widget = \u0026#34;slider\u0026#34; # See https://sourcethemes.com/academic/docs/page-builder/ headless = true # This file represents a page section. active = true # Activate this widget? true/false weight = 1 # Order that this section will appear. # Slide interval. # Use `false` to disable animation or enter a time in ms, e.g. `5000` (5s). interval = false # Slide height (optional). # E.g. `500px` for 500 pixels or `calc(100vh - 70px)` for full screen. height = \u0026#34;400px\u0026#34; # Slides. # Duplicate an `[[item]]` block to add more slides. [[item]] title = \u0026#34;完璧な秋の日\u0026#34; content = \u0026#34;とりあえず備忘録として 🚀\u0026#34; # align = \u0026#34;center\u0026#34; # Choose `center`, `left`, or `right`. # Overlay a color or image (optional). # Deactivate an option by commenting out the line, prefixing it with `#`. # overlay_color = \u0026#34;#666\u0026#34; # An HTML color value. overlay_img = \u0026#34;hogefuga.jpg\u0026#34; # Image path relative to your `static/img/` folder. # overlay_filter = 0.5 # Darken the image. Value in range 0-1. ..... と書いて， slider widget を使うようにしたところ，ほぼ望み通りの画像表示となった（画像自体はstatic/img/に置いた ）．\nDay (light) and night (dark) mode  Academic: the website builder for Hugo こちらに書いてある機能  アップデートにより，今流行りのdark modeと通常のlight modeを，読者が右上のsun/moon iconをクリックすることで切り替えられるようになった．設定は，config/_default/params.tomlの中で，以下のように day_night = true とすれば良い．\n..... # Enable users to switch between day and night mode? day_night = true ..... \\\n今回は本当に殴り書きメモのような内容．それにhugoに関することは全然なくて，academicのことしか書いてない．看板に偽りありだな．．．(^^;;;\n","date":1567522800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567599578,"objectID":"cfa8dc3299086c8fbf70b69e0b252344","permalink":"/post/how-to-update-hugo-and-academic-theme-part3/","publishdate":"2019-09-04T00:00:00+09:00","relpermalink":"/post/how-to-update-hugo-and-academic-theme-part3/","section":"post","summary":"先日，ブログのアップデートについて2回に分けてまとめたが（How to update hugo and academic theme (Part1), How to update hugo and academic theme (Part2)），読み直してみるとhugoとacademic themeの全体的なアップデートのことで終わっていて，具体的な内容のアップデートについてはあまり書いていないことに気がついた．そこで，今回はその辺の細かいところについて，後日の自分のためにも，まとめておくことにした．今回の内容に関しては，ox-hugoのレベル，つまり，org-mode file ではどうすれば良いのか分からず，直接マークダウンファイルを弄らざるを得ない事が多かった．\n","tags":["hugo","academic","theme","upgrade","ox-hugo","org-mode","emacs"],"title":"How to update hugo and academic theme (Part3)","type":"post"},{"authors":null,"categories":null,"content":"MacのFinderに相当するのは，EmacsではDiredであろう．しかし，なにかのプロジェクトに関わる文書群を管理するということになると，Diredでは力不足である．というか目的が違う．これにぴったりなのが，treemacsであり，そのバックボーンになるのが，Projectileである．これらは，プログラマーでもない自分には必要ないものと思っていたのだが，このblogを書くのに使用しているHugoとそのテーマであるacademicをアップデートする際に，非常に役に立ったので，いまだによく分かっていない自分自身のために書き留めておく．\n Table of Contents  Projectile  References Installation Usage   Treemacs  References Installation Usage      Projectile References  projectile ご本家 Projectile: The Project Interaction Library for Emacs ご本家の解説 よく使っているEmacsの拡張 ProjectileとHelm Exploring large projects with Projectile and Helm Projectile  以下はProjectileご本家の解説からの抜粋\n 「外部への依存関係を導入することなく，プロジェクトを操作する便利な一連の特徴を提供することを目的とする」そうである．これだけでは何のこっちゃである． 「例えば，プロジェクトの文書を見つける機能はGNUのfindを使用せずに純粋にEmacs Lispによって実装されている」ということで，そういうことかと思う． プロジェクトとは，特定のファイルを含むフォルダーのこと version-controlであるgit, muecurial, bazaarなどのrepoはデフォルトでプロジェクトとみなされる．  Installation 以前の記事（Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記））に書いたように，私は，Preludeを導入しているが，これにより，prejectileのインストールと設定は既に終わっている．マニュアルで入れる場合は，以下のようにinit.orgに書き込めば良い．\n#+begin_src emacs-lisp (use-package projectile :ensure t :config (define-key projectile-mode-map (kbd \u0026#34;s-p\u0026#34;) \u0026#39;projectile-command-map) (define-key projectile-mode-map (kbd \u0026#34;C-c p\u0026#34;) \u0026#39;projectile-command-map) (projectile-mode +1)) #+end_src Usage 多分，このソフトは解説を読んでいても，有り難みがさっぱり分からない（私がそうであった）．gitを使って開発をしている人とかにはすごく役に立つと思う．では，プログラマーでもない私の様な素人が使ってなんの役に立つのかと思われるであろうが，これが，案外便利なのである．\nBasic Usage 個人的に実際に使うのは，以下の4つぐらい．\n current project内のファイルを検索: C-c p f current project内のディレクトリを検索: C-c p d current project内のディレクトリ内のファイルを検索: C-c p l current project内のファイルの中身をgrepで検索する: C-c p s g  さらに，which-key を導入しておくと，C-c pと打って，「次，なんだっけ？」と考えて1秒経つうちに，下図の様にメニューが下のバッファに表示される．私は，以前に書いた様にPreludeを導入しているが（Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）），Preludeの導入により，which-key はインストールと設定が終わっている様であり，何もせずとも，下図の様になった．これは，/Data/MyBlog/TaipapablogをDiredで開けて，そこで，C-c p と打ってから1秒が経過した時の様子である．これでkey-bindは，C-c p まで覚えておけば良いことがわかった．\n   例えば，あるディレクトリ内の文書を比較したりコピペしたりしたいときに，すぐに探し出せるのが便利である．文書名を忘れていても，あるキーワードを含む文書を探すということも簡単にできる（current project内のファイルの中身をgrepで検索する: C-c p s g）．そんなことは，別に，Finderのfindを使うなり，Terminalでgrepなりmdfindすればできるわけだが，何も面倒なコマンドを打たずとも，特定のproject，つまり，特定のディレクトリ内だけで検索ができるというのが肝である．これにより，一瞬で検索は終わるし，すぐにそのファイルに飛べる．後述するtreemacsをインストールせずとも，projectileだけでも，かなり，便利になると思う．例えば，下の画像は，Taipapablogというdirectoryの中にあり，_index.mdを名前に含むファイルを検索しているところである．下のバッファにズラズラと該当するファイルが並んでおり，C-jするとその中身が上のバッファに表示される．リターンすれば，そのファイルが開く．下のバッファでは，arrow keyで上下すれば別のファイルに行けて，そこでC-jすれば，その中身が見られる．Returnするまではこれを繰り返すことができる．\n   プログラミングをやっているわけではなく，論文を書くのにEmacsを使用している私のようなレベルの人間にとっても，一つのプロジェクト内のファイルを縦横無尽に検索や閲覧ができるのは，かなり，有用である．以下のtreemacsと組み合わせると，さらに便利になる（ような気がしている　笑）．最近のEmacsは画像でもpdfでも閲覧できるので，応用範囲はかなり広い．\nTreemacs 一見，neotreeの様に見えるが，特定のprojectに割り当てられている様な仕組みになっている．分かりにくいが，実際に使ってみれば便利である．treemacs-projectileをインストールすることにより，上述のprojectileと統合した状態で使えて，より便利になる．\nReferences  Treemacs - a tree layout file explorer for Emacs ご本家 Emacsの設定を色々いじった -その１- Using all-the-icons for Treemacs  Installation ご本家の方法を丸写ししておく．以下をinit.orgに書き込めば良い．デフォルト設定なので，これ全部写す必要はなさそうだが．．．\n#+begin_src emacs-lisp (use-package treemacs :ensure t :defer t :init (with-eval-after-load \u0026#39;winum (define-key winum-keymap (kbd \u0026#34;M-0\u0026#34;) #\u0026#39;treemacs-select-window)) :config (progn (setq treemacs-collapse-dirs (if (treemacs--find-python3) 3 0) treemacs-deferred-git-apply-delay 0.5 treemacs-display-in-side-window t treemacs-eldoc-display t treemacs-file-event-delay 5000 treemacs-file-follow-delay 0.2 treemacs-follow-after-init t treemacs-git-command-pipe \u0026#34;\u0026#34; treemacs-goto-tag-strategy \u0026#39;refetch-index treemacs-indentation 2 treemacs-indentation-string \u0026#34; \u0026#34; treemacs-is-never-other-window nil treemacs-max-git-entries 5000 treemacs-missing-project-action \u0026#39;ask treemacs-no-png-images nil treemacs-no-delete-other-windows t treemacs-project-follow-cleanup nil treemacs-persist-file (expand-file-name \u0026#34;.cache/treemacs-persist\u0026#34; user-emacs-directory) treemacs-recenter-distance 0.1 treemacs-recenter-after-file-follow nil treemacs-recenter-after-tag-follow nil treemacs-recenter-after-project-jump \u0026#39;always treemacs-recenter-after-project-expand \u0026#39;on-distance treemacs-show-cursor nil treemacs-show-hidden-files t treemacs-silent-filewatch nil treemacs-silent-refresh nil treemacs-sorting \u0026#39;alphabetic-desc treemacs-space-between-root-nodes t treemacs-tag-follow-cleanup t treemacs-tag-follow-delay 1.5 treemacs-width 35) ;; The default width and height of the icons is 22 pixels. If you are ;; using a Hi-DPI display, uncomment this to double the icon size. ;; (treemacs-resize-icons 44) (treemacs-follow-mode t) (treemacs-filewatch-mode t) (treemacs-fringe-indicator-mode t) (pcase (cons (not (null (executable-find \u0026#34;git\u0026#34;))) (not (null (treemacs--find-python3)))) (`(t . t) (treemacs-git-mode \u0026#39;deferred)) (`(t . _) (treemacs-git-mode \u0026#39;simple)))) :bind (:map global-map (\u0026#34;M-0\u0026#34; . treemacs-select-window) (\u0026#34;C-x t 1\u0026#34; . treemacs-delete-other-windows) (\u0026#34;C-x t t\u0026#34; . treemacs) (\u0026#34;C-x t B\u0026#34; . treemacs-bookmark) (\u0026#34;C-x t C-t\u0026#34; . treemacs-find-file) (\u0026#34;C-x t M-t\u0026#34; . treemacs-find-tag))) ;; (use-package treemacs-evil ;; :after treemacs evil ;; :ensure t) (use-package treemacs-projectile :after treemacs projectile :ensure t) (use-package treemacs-icons-dired :after treemacs dired :ensure t :config (treemacs-icons-dired-mode)) (use-package treemacs-magit :after treemacs magit :ensure t) #+end_src Usage 上記設定により，projectileと統合した状態で使用することになる．従って，git initしたdirectoryや，git cloneしたdirectoryが対象となる．それらに該当しなければ，directory内に.projectileという 空ファイルを作成すれば良い．まず，最初は， M-0 と叩いて，Treemacsを開き，C-c C-p a (treemacs-add-project-to-workspace) でプロジェクトをtreemacsのworkspaceに追加する．下図は，Taipapablogというdirectoryを開けて，そこから2つのファイルを横に並べて開いたところである．\n左のtreemacsのバッファの行番号114のさらに左のfringeに小さな青いマークがついている．行のハイライトとともに現在アクティブなバッファがどれかを示している．複数のプロジェクトや複数のディレクトリに同じ名前のファイルがあるときなどは，今作業しているファイルが，どこにあるファイルがわからなくなって困ることがある（少なくとも私は）．そのようなときに，このfringe indicatorは有用である．\n   ところで，上述したようなキーバインドを覚える必要はない．treemacsのバッファにいるときに，？を叩けば，下図のごとく，下にヘルプバッファが開く．楽チンである．ファイルやディレクトリやプロジェクトの追加，削除，名前の変更などはもちろん網羅しており，ファイルの開け方も横に並べたり，縦に並べたりと色々できるようになっている．\n   使い始めたときに問題となったのは，treemacsのコマンドはtreemacsのバッファにいるときでないと効かないことである（projectileのコマンドは何処でも効く）．いちいち，マウスでtreemacsのバッファをクリックしてそちらに移ってからコマンドを打たないといけないようではやってられない．これでは，Macのfinderと同じである．そこで，ご本家のサイトをよく読むと， Winum \u0026amp; ace-window compatibility と書いてある．上述したインストールのためのuse-packageの設定のconfigにも， (define-key winum-keymap (kbd \u0026ldquo;M-0\u0026rdquo;) #\u0026lsquo;treemacs-select-window) と書いてある．つまり，横や縦に並べたバッファ間の移動は， C-x o の後に行きたいバッファの番号を打てばよく，treemacsのバッファに戻るには， M-0 を打てば良い．下図は，先ほどの図の状態で， C-x o を打った時の様子である．茶色の小さな数字がそれぞれのバッファに割り当てられた番号である．\nなお，winumのインストールについては，emacs-winum を参照されたい．\n   とは言うものの，やはり，マウスを使う方が便利なこともある．Treemacsはmouse interfaceにも完全に対応しており，右クリックでpopup-menuが出るようになっている（下図参照）．よくできている．\n   まだ使い始めたばかりであり，projectileとtreemacsについて，まだまだ理解しないといけないことがたくさんあるが，日常的に使用できるところまではなんとかなったかな．．．\n","date":1566658800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567323294,"objectID":"6502a98747f22d842ee42dd95095a9fa","permalink":"/post/treemacs_projectile/","publishdate":"2019-08-25T00:00:00+09:00","relpermalink":"/post/treemacs_projectile/","section":"post","summary":"MacのFinderに相当するのは，EmacsではDiredであろう．しかし，なにかのプロジェクトに関わる文書群を管理するということになると，Diredでは力不足である．というか目的が違う．これにぴったりなのが，treemacsであり，そのバックボーンになるのが，Projectileである．これらは，プログラマーでもない自分には必要ないものと思っていたのだが，このblogを書くのに使用しているHugoとそのテーマであるacademicをアップデートする際に，非常に役に立ったので，いまだによく分かっていない自分自身のために書き留めておく．\n","tags":["emacs","projectile","treemacs","helm","project"],"title":"Treemacs and Projectile","type":"post"},{"authors":null,"categories":null,"content":"前回（How to update hugo and academic theme (Part 1)）にhutoとacademicのアップデートをまとめたが，やはり，githubにdeployするときのエラーが，どうしても気になる．そこで，今回は，Academic themeのインストールを一からやり直すことにした． Hugoとox-hugoのインストールやアップデートは前回の記事（How to update hugo and academic theme (Part 1)）を参考にしていただきたい．\n Table of Contents  References Install Academic Kickstart with Git Migrate Content    References  Install Academicご本家の解説 Update Academicご本家の解説  Install Academic Kickstart with Git やはり，公式ドキュメントに従うのが良いだろうと考え，上記のリンク先のInstallの解説の通りにしてみた．git submoduleを使うので，よく分からんと敬遠していたのだが，やってみると（作業自体は）簡単であった． Git submodule の基礎 によれば，「git submodule は、外部の git リポジトリを、自分の git リポジトリのサブディレクトリとして登録し、特定の commit を参照する仕組み」である．\n1. まず，Academic Kickstart repository を自分のウェブサイトを作るためにクローンする．\n またも間違っていた．上述の公式ドキュメントにはちゃんと，Fork the Academic Kickstart repository to create a new website と書いてあったのに読み過ごしていた．     ということで，まず，academic-kickstart に行って，右上の Fork ボタンを押して，自分のgithub pageにacademic-kickstartのrepositoryを作成する．\n  ついで，この自分のgithub pageのforkをgit cloneで自分のサイトにクローンする．\n$ pwd /Data/MyBlog $ git clone https://github.com/taipapamotohus/academic-kickstart Taipapablog Cloning into \u0026#39;Taipapablog\u0026#39;... remote: Enumerating objects: 579, done. remote: Total 579 (delta 0), reused 0 (delta 0), pack-reused 579 Receiving objects: 100% (579/579), 163.92 KiB | 480.00 KiB/s, done. Resolving deltas: 100% (179/179), done.   ついで，themeをsubmoduleでinitializeする．\n$ cd Taipapablog $ pwd /Data/MyBlog/Taipapablog $ git submodule update --init --recursive Submodule \u0026#39;themes/academic\u0026#39; (https://github.com/gcushen/hugo-academic.git) registered for path \u0026#39;themes/academic\u0026#39; Cloning into \u0026#39;/Data/MyBlog/Taipapablog/themes/academic\u0026#39;... Submodule path \u0026#39;themes/academic\u0026#39;: checked out \u0026#39;32b6145c06835e33668100105ac1835593cf8d72\u0026#39; $ ls LICENSE.md config/ netlify.toml themes/ README.md content/ scripts/ update_academic.sh* academic.Rproj data/ static/ view.sh* $ ll total 72 drwxr-xr-x 18 kohkichi admin 576 Aug 24 16:34 . drwxr-xr-x 18 kohkichi admin 576 Aug 24 16:35 .. -rw-r--r-- 1 kohkichi admin 298 Aug 24 16:34 .editorconfig drwxr-xr-x 13 kohkichi admin 416 Aug 24 16:34 .git -rw-r--r-- 1 kohkichi admin 15 Aug 24 16:34 .gitignore -rw-r--r-- 1 kohkichi admin 106 Aug 24 16:34 .gitmodules -rw-r--r-- 1 kohkichi admin 1078 Aug 24 16:34 LICENSE.md -rw-r--r-- 1 kohkichi admin 2671 Aug 24 16:34 README.md -rw-r--r-- 1 kohkichi admin 258 Aug 24 16:34 academic.Rproj drwxr-xr-x 3 kohkichi admin 96 Aug 24 16:34 config drwxr-xr-x 7 kohkichi admin 224 Aug 24 16:34 content drwxr-xr-x 3 kohkichi admin 96 Aug 24 16:34 data -rw-r--r-- 1 kohkichi admin 380 Aug 24 16:34 netlify.toml drwxr-xr-x 3 kohkichi admin 96 Aug 24 16:34 scripts drwxr-xr-x 3 kohkichi admin 96 Aug 24 16:34 static drwxr-xr-x 3 kohkichi admin 96 Aug 24 16:34 themes -rwxr-xr-x 1 kohkichi admin 1628 Aug 24 16:34 update_academic.sh -rwxr-xr-x 1 kohkichi admin 49 Aug 24 16:34 view.sh う〜む，実質2行のコマンドで終わり，これで，あとは，hugo serverと叩いて，ブラウザで，localhost:1313を開けば，デモ用のサイトが立ち上がる．非常に簡単である．自分のGitHub pageを持っていれば，2-3分でできてしまう．\n  Migrate Content 前回（How to update hugo and academic theme (Part 1)）にすでに投稿記事などはスクリプトなどを使ってアップデートしてあるし，設定ファイルもアップデート済みである．そちらのディレクトリから，config, content (home, postなど主要な部分を含む), layouts, static, assetsなどを，今回新たに作成したTaipapablog directoryにコピーすれば良い．コピー後にもう一度Taipapablog directoryの中身を見ると，\n$ ls LICENSE.md layouts/ README.md netlify.toml Taipapablog-20180816_v2.org public/ academic.Rproj resources/ assets/ scripts/ config/ static/ content/ themes/ data/ update_academic.sh* deploy.sh* view.sh* こんな風になっているはずである．（Taipapablog-20180816_v2.orgは，ox-hugoで書いたこのブログの原稿）\nこれで，hugo root directoryで，hugo serverを叩くと，元のブログが立ち上がる．\nあれ，今回は簡単にできてしまった．既に，前回で，Page Bundlesやfeatured imageに合わせて修正していたから，本当に流し込むだけであった．さて，これで，deployしてもエラーが出なければOKである．\nう〜ん，deployはできて，前回のエラーも消えたけど，また，別のエラーが出る．．．gitは苦手だ．．．(ToT)\nremote: Permission to sourcethemes/academic-kickstart.git denied to taipapamotohus. fatal: unable to access \u0026#39;https://github.com/sourcethemes/academic-kickstart.git/\u0026#39;: The requested URL returned error: 403 これって，master repositoryを上書きしようとしてるな．deploy scriptを直さないといけない．．．\nウェブからは見えてるので，とりあえず，後日に見直してみよう．．．(^^;;;\nEnumerating objects: 546, done. Counting objects: 100% (546/546), done. Delta compression using up to 8 threads Compressing objects: 100% (503/503), done. Writing objects: 100% (530/530), 131.20 MiB | 8.04 MiB/s, done. Total 530 (delta 20), reused 0 (delta 0) remote: Resolving deltas: 100% (20/20), completed with 5 local objects. To https://github.com/taipapamotohus/academic-kickstart 98a99bf..eb43ba1 master -\u0026gt; master Forkを行ってから，クローンするようにするとdeployの際にエラーは出なくなった．自分のサイトだから書き換えできるので，当たり前である．．．(^^;;;\n前回，今回と間違ったことばかりやってしまったが，後日にまた同じ轍を踏まないように，それも含めて，全て記録するようにした．やっとアップデートが終わった．gitは奥が深い（自分が無知なだけ．．．）\n","date":1566572400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566663106,"objectID":"0719f44a7fd9c2b7b47ffb2aae88fa63","permalink":"/post/how-to-update-hugo-and-academic-theme-part2/","publishdate":"2019-08-24T00:00:00+09:00","relpermalink":"/post/how-to-update-hugo-and-academic-theme-part2/","section":"post","summary":"前回（How to update hugo and academic theme (Part 1)）にhutoとacademicのアップデートをまとめたが，やはり，githubにdeployするときのエラーが，どうしても気になる．そこで，今回は，Academic themeのインストールを一からやり直すことにした． Hugoとox-hugoのインストールやアップデートは前回の記事（How to update hugo and academic theme (Part 1)）を参考にしていただきたい．\n","tags":null,"title":"How to update hugo and academic theme (Part2)","type":"post"},{"authors":null,"categories":null,"content":"最近のニュースを見ていて思い出した言葉がある．\n \u0026ldquo;True patriotism hates injustice in its own land more than anywhere else.” ― Clarence Darrow\n\u0026ldquo;Patriotism is the last refuge of a scoundrel.\u0026rdquo; ― Samuel Johnson\n\u0026ldquo;Violence is the last refuge of the incompetent.\u0026rdquo;\u0026rdquo; ― Salvor Hardin ( Isaac Asimov)\n 3番目はオマケ\n閑話休題，以前の記事（How to add horizontal scrollbar for codeblock in academic theme of hugo）で触れたように，このブログは，Hugoという静的サイトジェネレーター（themeはacademic）で作成している．\n実際には，ox-hugoというemacsのorg-modeのパッケージを用いて書いて，それをhugoのmarkdownとしてexportしている．同記事内で，academic themeのupgradeが速すぎて全く追随できていないと書いた．記事はゴールデンウィークの5月4日に投稿しており，既に3ヶ月以上が経過している．この夏休みにようやくupdateすることができたので，後日のためにまとめておく．\n本来なら，まずox-hugoを用いたhugoでのブログの作り方をまとめるべきであろうが，ネットを少し探せば，私のような素人よりはるかに詳しい方が懇切丁寧に解説しているサイトが山のように存在する．また，ブログ設定の一から十まで溯る気力もないので，順番が逆になるが，今回はアップグレードからということにした．素人がアップデートに困ってあれこれやったことの詳細なメモということで．．．(^^;;;\n Table of Contents  References Hugoのupdate ox-hugo update Academic theme update Migrate Content  Front matter Featured image Recent Postsのサマリが長すぎる！ Recent Postsの画像表示のフォーマット変更 Alerts WARN \u0026hellip;.. found no layout file for \u0026ldquo;CSS\u0026rdquo; for \u0026ldquo;home\u0026rdquo;   追記    References  HUGO ご本家 Academic academic themeのご本家 Getting started with the Academic framework for Hugo academic themeのインストール Update academic themeのupdateについて ox-hugo ox-hugoのご本家  Hugoのupdate hugoを最新版にする．\n$ brew upgrade hugo .......... $ hugo version Hugo Static Site Generator v0.57.2/extended darwin/amd64 BuildDate: unknown $ brew info hugo hugo: stable 0.57.2 (bottled), HEAD Configurable static site generator https://gohugo.io/ /usr/local/Cellar/hugo/0.57.2 (41 files, 59.2MB) * Poured from bottle on 2019-08-19 at 21:45:45 From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hugo.rb ==\u0026gt; Dependencies Build: go ✘ ==\u0026gt; Options --HEAD Install HEAD version ==\u0026gt; Caveats Bash completion has been installed to: /usr/local/etc/bash_completion.d ==\u0026gt; Analytics install: 23,734 (30 days), 46,557 (90 days), 196,750 (365 days) install_on_request: 22,865 (30 days), 45,011 (90 days), 186,183 (365 days) build_error: 0 (30 days) ox-hugo update ox-hugoを最新版にする．\nM-x package-utils-upgrade-by-name ........... ox-hugo C-h C-l ox-hugo-pkg.elすると，\n(define-package \u0026#34;ox-hugo\u0026#34; \u0026#34;20190802.1755\u0026#34; \u0026#34;Hugo Markdown Back-End for Org Export Engine\u0026#34; \u0026#39;((emacs \u0026#34;24.4\u0026#34;) (org \u0026#34;9.0\u0026#34;)) :keywords \u0026#39;(\u0026#34;org\u0026#34; \u0026#34;markdown\u0026#34; \u0026#34;docs\u0026#34;) :url \u0026#34;https://ox-hugo.scripter.co\u0026#34;) ;; Local Variables: ;; no-byte-compile: t ;; End: 最新版であることが確認できる．\nAcademic theme update Update のサイトには，以下の3つの場合でのupdateの方法が書かれている．\n If you installed Academic Kickstart If you installed by Git cloning hugo-academic If you installed from a ZIP  問題は，自分がどうやってインストールしたかを忘れている（！）ことだった\u0026hellip;..(^^;;; versionも 2.4.0とかなり古い． しかも，恐らくは，数種類の方法を重ねて試した結果が現在の状況と考えられるので，ドキュメントの通りにやってもうまくいくはずがない気がした．\n 以下のhugo new citeを行ってから，academic をgit cloneする方法はお勧めしない．この方法では，git repositryの中にgit repositoryを埋め込むことになりエラーが出る．1のAcademic Kickstartを使う方法が良い．次回の記事（How to update hugo and academic theme (Part2)）を参考にしていただきたい．以下の記述は自戒のために残しておく．   色々悩んだ末に，2の方法をいちから，やり直すことにした．要するにクリーンインストールを行い，その上に，現在までの内容を流し込むという泥臭いやり方を選択したわけである．\n以下，Getting started with the Academic framework for Hugo に沿って，まず，hugoで新しいサイトを作成し，そこにacademic themeをgitでインストールし，最新版の4.4.0になっていることを確認する．\n$ cd /Data/hoge $ hugo new site Taipapablog $ cd Taipapablog $ pwd /Data/hoge/Taipapablog $ git clone https://github.com/gcushen/hugo-academic.git themes/academic $ less themes/academic/data/academic.toml # Academic version = \u0026#34;4.4.0\u0026#34; themes/academic/data/academic.toml (END) そして，academicのexampleSite folder の中身を全てwebsite root folder（今回はTaipapablog directory）にコピーする．これらは，config fileなどを含んでおり，自分のウェブサイトの鋳型になる．\n$ pwd /Data/hoge/Taipapablog $ ls themes/academic/exampleSite/ config/ content/ static/ $ cp -av themes/academic/exampleSite/* . ここで，Hugo serverをwebsite root folderから立ち上げる．\n$ pwd /Data/hoge/Taipapablog $ hugo server --watch これで，ブラウザで，url windowにlocalhost:1313と打てば，Academic powered websiteのデモが立ち上がる．ここまでは実に簡単である．\nMigrate Content ここから以前の記事の内容を流し込んでいくわけであるが，academicの新旧versionの間には断絶があって，単純に流し込んで終わりというわけにはいかない．これも，上書きアップデート（？）のようなやり方を諦めた理由である．この断絶を \u0026ldquo;Breaking changes\u0026rdquo; と呼んでいる．これを乗り越えてブログの内容を移行するためのacademic-scripts のリンクが上記ページにある．これは，hugoの新しい機能であるPage Bundles への移行を自動化するスクリプトである．簡単に言えば，Page Bundlesとは，Page Resources をグループ化する方法であり，詳細は，リンク先を参照されたい．Page Bundlesは，下記のような構造になる．つまり，ファイルの構成が変わってmdファイルひとつだったのが，フォルダ（ディレクトリ）となり，mdファイルの名前はindex.mdとなり，かつ，featured.jpgが自動的にページの冒頭に置かれるようになる．同一記事に使用する画像などは，同じディレクトリ内にまとめることができる．以下は，アップデート前後の /Data/hoge/Taipapablog/content/post の比較である．\nOld version $ tree -L 2 . ├── Different-segment-to-each-facet-in-ggplot.md ├── Emacs_Install.md ├── EmbedRplotInBlog.md ├── ExportRplot.md ├── FullTextSearch.md ├── Japanese_setup.md .......... Current version $ tree -L 2 . ├── Different-segment-to-each-facet-in-ggplot │ ├── featured.jpg │ └── index.md ├── Emacs_Install │ ├── featured.jpg │ └── index.md ├── EmbedRplotInBlog │ ├── featured.jpg │ └── index.md ├── ExportRplot │ ├── featured.jpg │ └── index.md ├── FullTextSearch │ ├── featured.jpg │ └── index.md ├── Japanese_setup │ ├── featured.jpg │ └── index.md .......... 先ほどのスクリプトは，このフォルダ構成への移行を自動化してくれる．これをgitでクローンする．\n$ cd /Data/hoge $ ls Taipapablog $ git clone https://github.com/sourcethemes/academic-scripts.git Cloning into \u0026#39;academic-scripts\u0026#39;... remote: Enumerating objects: 27, done. remote: Total 27 (delta 0), reused 0 (delta 0), pack-reused 27 Unpacking objects: 100% (27/27), done. $ ls Taipapablog academic-scripts このacademic-scriptsの中身を見ると，\n$ cd academic-scripts/ $ ls LICENSE.md README.md refactor-homepage-sections-to-bundles.sh* refactor-pages-to-page-bundles.sh* refactor_page_bundles_to_pages.sh* $ less refactor-pages-to-page-bundles.sh #!/bin/sh # Helps migrate from v2.4.0 to v3.0.0 # # Refactor a page named `X.md` to `content/\u0026lt;section\u0026gt;/X/index.md` to use the # new page bundles and featured image system # .......... $ less refactor-homepage-sections-to-bundles.sh #!/usr/bin/env bash # Helps migrate from v4.1 to v4.2 # # Refactors homepage sections named `content/home/X.md` to `content/home/X/index.md`, # treating homepage sections as headless page bundles in Hugo. # # - E.g. an About section named `content/home/about.md` is converted to `content/home/about/index.md` .......... という具合に，確かに，pageからpage bundlesへの移行を自動でやってくれるようになっている．そこで，これまでのブログをTaipapablog_OLDとして保存し，そのポスト（投稿記事）にこのスクリプトを適用する．その後，これらの記事を全て新しい方のTaipapablogのpostにコピーする．\n$ cd /Data/hoge $ ls Taipapablog Taipapablog_OLD academic-scripts $ cd Taipapablog_OLD/ $ pwd /Data/hoge/Taipapablog_OLD $ ../academic-scripts/refactor-pages-to-page-bundles.sh ./content/posts/annotation.md -\u0026gt; ./content/posts/annotation/index.md ./content/post/org-html-export-theme.md -\u0026gt; ./content/post/org-html-export-theme/index.md ./content/post/org-mode_paper_2.md -\u0026gt; ./content/post/org-mode_paper_2/index.md .......... $ cp -a content/post/* ../Taipapablog/content/post/ 以降の作業は全て，新しい方のTaipapablog directoryで行う．こちらのcontent/home/にも先ほどのスクリプトのホームページセクション用のものを適用しておいた．こちらは不要かもしれない．\n$ ../academic-scripts/refactor-homepage-sections-to-bundles.sh ./content/home/search.md -\u0026gt; ./content/home/search/index.md ./content/home/hero_carousel.md -\u0026gt; ./content/home/hero_carousel/index.md ./content/home/hero.md -\u0026gt; ./content/home/hero/index.md これにより，/Data/hoge/Taipapablog/content/posts/*.mdや/Data/hoge/Taipapablog/content/home/.mdが，先ほどtreeで示したようなディレクトリ構造になる．\nここから先は，config/, content/, content/home/, content/post/の中身を弄って，アップデートする前と同じになるように修正していく．私は，blogをhugoのmarkdown自体はほとんど弄ることなく，org-modeのパッケージであるox-hugoで書いているので，そちらを中心に述べる．\nFront matter   content/home/には，demo, experienceなど多くのwidgetが入っているが，ほとんど使用してないので，それぞれのindex.mdのfront matterの最初の方にあるactive = trueを active = false にする．\n  上記のスクリプトを適用した際に，headless = true # This file represents a page section. が二重になることがあったので，余分な部分は全て削除した．\n  新規ポストを投稿する際に，page bundlesの形式になるようにするために，propertiesに EXPORT_HUGO_BUNDLE を使用する．詳細は次節で述べる．\n  subtitle を使用するのが可能となった．もしかして以前から？　以下のように，ox-hugoでpropertiesに追加すれば良い．\n:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle \u0026#34;Hugoとacademic テーマのアップデート\u0026#34;   Featured image   各ポストの冒頭に掲げていた画像は，アップデート前は明示的に場所と名前を指示しないといけなかったが，アップデート後はPage Bundlesとなり，同じフォルダにfeatured.jpgとして置いておけば，自動的にその記事の冒頭に表示されるようになる．各画像の移動が面倒であったが，今後は楽になりそう．．．(^^\n  ox-hugoから，Page Bundlesとしてexportするためには，propertiesに EXPORT_HUGO_BUNDLE を使って以下のように書けば，Front Matterとしてexportされる．2個目の項目追加からは，*EXPORT_HUGO_BUNDLE+* とする．\n:PROPERTIES: :EXPORT_HUGO_BUNDLE: how-to-upgrade-hugo-and-academic-theme :EXPORT_FILE_NAME: index :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle \u0026#34;Hugoとacademic テーマのアップデート\u0026#34; :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image \u0026#39;((placement . 3) (caption . \u0026#34;Ancient greek pottery, Musée du Louvre\u0026#34;))   Featured imageをどのような大きさで表示するかについては，上述のリンク先に説明がある．\n# Featured image # To use, place an image named `featured.jpg/png` in your page\u0026#39;s folder. # Placement options: 1 = Full column width, 2 = Out-set, 3 = Screen-width # Focal point options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight # Set `preview_only` to `true` to just use the image for thumbnails. とりあえずは，旧記事に合わせて，スクリーン幅となるplacement = 3とした．ox-hugoでのpropertiesで上述のように指定する．captionのつけ方も上記の通り．\n  Recent Postsのサマリが長すぎる！ Home ページの下方には，Recent Postsがあり，最近の記事のサマリが画像とともに表示される．この表示形式は以下のように5種類が選べる（View）．\nSeveral widgets have a view option to let you choose the layout of the widget. The following layouts are available: 1 = List (previously Simple) 2 = Compact (previously Stream) 3 = Card (previously Detailed) 4 = Citation (previously APA and MLA), only available for publications Optionally, edit the value of citation_style in params.toml to APA or MLA 5 = Showcase (large images), only available for projects この中から，以前のversionに一番近い 3，つまり，カード形式を選択した．しかし，画像のcropがイマイチで，しかもサマリがサマリと言えないくらいに長い．updateする前のフォーマットが気に入っていたので，この変化は残念．Create a blog post に記載されているように， \u0026lt;!\u0026ndash;more\u0026ndash;\u0026gt; を記事本文の適当なところに挿入して，サマリの長さを調整することにした．\nRecent Postsの画像表示のフォーマット変更 References  Crop Less with Focal Point Image Processing Partial Templates Hugoのテンプレート構文「template」「partial」「block」「define」のわかりやすい解説  上述のfeatured imageを記事のheader imageとして表示する際のサイズやクロップのやり方が気に入らないので，変更することにした．cardでacademic themeに全文検索をかけると， li_card.html というファイルが見つかり，どうやら，これが，カード形式のテンプレート（Partial Templates）と推察され，これを変更すれば良いと気がついた．\n  Data/hoge/Taipapablog/layouts に partials directoryを作成し，/Data/hoge/Taipapablog/themes/academic/layouts/partials/ li_card.html をコピーする．\n  Hugoは以下の優先順位で読み込まれる．（Partial Template Lookup Order）\n layouts/partials/*.html themes//layouts/partials/*.html  したがって，1にコピーしたli_card.htmlを弄れば，それが優先されることになる．\n  以下のように，li_card.htmlの53行目を変更する．\n..... 52 {{ with $resource }} 53 {{ $image := .Fill (printf \u0026#34;918x517 q90 %s\u0026#34; $anchor) }} 54 \u0026lt;a href=\u0026#34;{{ $item.RelPermalink }}\u0026#34;\u0026gt; ..... -----\u0026gt; ..... 53 {{ $image := .Resize \u0026#34;900x\u0026#34; }} ..... これは， Image Processing に解説されているように，FillをResizeに変更しただけであるが，ほぼ望み通りの画像表示となった．\n  Alerts  これは今回見つけた新たな小道具 ノート，ヒント，警告などに有用． いくつか方法はあるが，shortcodeを使うのが一番簡単．\\\n｛{% alert note %}}\\\nA Markdown aside is useful for displaying notices, hints, or definitions to your readers.\\\n｛{% alert %}}\\\nにより，（最初の \u0026quot;{\u0026quot; はescapeできないので全角の \u0026quot;｛\u0026quot; にしていることに注意）   A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   となる．\n｛{% alert warning %}}\\\nA Markdown aside is useful for displaying notices, hints, or definitions to your readers.\\\n｛{% /alert %}}\\\nは，以下のようになる．（最初の \u0026quot;{\u0026quot; はescapeできないので全角の \u0026quot;｛\u0026quot; にしていることに注意）\\\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   また，使ってみよう．\nWARN \u0026hellip;.. found no layout file for \u0026ldquo;CSS\u0026rdquo; for \u0026ldquo;home\u0026rdquo; アップデートしていじっているうちに，\n WARN 2019/08/23 00:36:28 found no layout file for \u0026ldquo;CSS\u0026rdquo; for \u0026ldquo;home\u0026rdquo;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.   のような警告が出るようになった（早速使ってみた）．サイト自体のビルドはできて，実害はないが，気持ちが悪いので，ネットを探ると，academicの作者のGitHub pageに，そのものズバリの Featurette widget does not change from example #1060 があった．\n You have updated to the unreleased version. You'll need to remove the \u0026ldquo;CSS\u0026rdquo; output entry from config.Toml\n ということなので，以下のように作業した．\n$ vi /Data/hoge/Taipapablog/config/_default/config.toml ..... 45 [outputs] 46 home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;, \u0026#34;WebAppManifest\u0026#34;, \u0026#34;CSS\u0026#34;] 47 section = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34; ] ..... -----\u0026gt; ..... 45 [outputs] 46 # home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;, \u0026#34;WebAppManifest\u0026#34;, \u0026#34;CSS\u0026#34;] 47 home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;, \u0026#34;WebAppManifest\u0026#34;] 48 section = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34; ] ..... 46行目の\u0026quot;CSS\u0026quot;を削除するだけで，警告が出なくなった．(^o^)\n見え方にまだまだ不満はあるが，こんなところだろうか．アップデートしてから，貼り付けた画像の上にマウスを持っていくと，拡大鏡のアイコンになり，クリックすると2段階で拡大されるようになった．他にも変化はあるようだが，全然活用できていない．ぼちぼち触っていって，面白いことがあれば，また，まとめてみよう．．．\n追記 githubにdeployした時に，以下のようなエラーが生じた．\nwarning: adding embedded git repository: themes/academic hint: You\u0026#39;ve added another git repository inside your current repository. hint: Clones of the outer repository will not contain the contents of hint: the embedded repository and will not know how to obtain it. hint: If you meant to add a submodule, use: hint: hint: git submodule add \u0026lt;url\u0026gt; themes/academic hint: hint: If you added this path by mistake, you can remove it from the hint: index with: hint: hint: git rm --cached themes/academic hint: hint: See \u0026#34;git help submodule\u0026#34; for more information. エラーは吐くものの，deployはできて，ウェブでサイトも見られるので，疲れたし（笑），しばらくは，このままで行くことにする．themeのインストールは，submoduleで行うべきだったと，今更にして気がついた．次回アップデートする時にやってみよう．．．(^^;;;\nで，結局，気になって，academic themeのインストールをやり直した（笑）．次回の記事（How to update hugo and academic theme (Part2)）を参照されたい．\n","date":1566054000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566660482,"objectID":"972c05b982b9a1292596aa128509b91b","permalink":"/post/how-to-upgrade-hugo-and-academic-theme/","publishdate":"2019-08-18T00:00:00+09:00","relpermalink":"/post/how-to-upgrade-hugo-and-academic-theme/","section":"post","summary":"最近のニュースを見ていて思い出した言葉がある．\n \u0026ldquo;True patriotism hates injustice in its own land more than anywhere else.” ― Clarence Darrow\n\u0026ldquo;Patriotism is the last refuge of a scoundrel.\u0026rdquo; ― Samuel Johnson\n\u0026ldquo;Violence is the last refuge of the incompetent.\u0026rdquo;\u0026rdquo; ― Salvor Hardin ( Isaac Asimov)\n 3番目はオマケ\n閑話休題，以前の記事（How to add horizontal scrollbar for codeblock in academic theme of hugo）で触れたように，このブログは，Hugoという静的サイトジェネレーター（themeはacademic）で作成している．\n","tags":["hugo","academic","theme","upgrade","ox-hugo","org-mode","emacs"],"title":"How to update hugo and academic theme (Part 1)","type":"post"},{"authors":null,"categories":null,"content":"論文というものはすぐにたまる．読みもしないのにどんどんたまる．21世紀に入った頃は論文のプリントアウトの山ができて定期的に捨てたりしていたのだが，それも今は昔，現在はpdfの時代であり，かなり前からpdfで読んで，注釈など書き込んだりするようになった．しかし，どんどんたまるのは昔以上である．何しろ取るスペースはディスクの容量だけで，物理空間を占拠するわけではないから，いくらでも気兼ねなくため込める．ため込んだ論文数が数千を越えるあたりで，ふと思うわけである．「これを全て読むのは不可能としても，全文検索ができたら便利だろうなぁ．．．」\nという訳で，今回は，hyperestraierを使ってため込んだpdfの全文検索をできるようにしようという話である．\nhyperestraierをインストールし，Apacheをセットアップして，pdf文書のインデックスを作成し，これをブラウザで検索できるようにするという流れでまとめていく．\nセットアップは結構面倒だが，非常に便利で，オススメである！\nなお，以下の手順は，MacBook Pro (15-inch, Late 2016) Mojave 10.14.6，および，iMac 2012 Mojave 10.14.6 の両方で確認済みである．\n Table of Contents  References Hyper Estraier  Install pdftotext ユーザー用のウェブディレクトリの作成 全文検索用のディレクトリの作成 全文検索用のindexの作成 indexの更新 検索のテスト   Apache set up  CGI を許可するように Apache を設定する Apacheの起動，再起動 CGIが動くかどうかのテスト DocumentRoot ユーザ毎のウェブディレクトリ   Hyperestraier付属の全文検索用CGI scriptのset up    References  Hyper Estraier で仏典探索 Amrtaさんのものすごく役に立つサイト Hyper Estraier で PDF 管理 これまた，Amrtaさんの物凄く役に立つサイト．以上の2つを読めば，このサイトを見る必要はないような．．．(^^;;;  sudoしてrootになるのはイヤ，普通のユーザーとしてapacheを使ってブラウザで全文検索をしたいという人は，この先を読むと参考になるかもしれない．\nHyper Estraier 今回用いるのはHyper Estraierという全文検索システムである．これがどんなものかはリンク先の文書を読んでもらうとして，早速インストールである．\nInstall homebrewを使用すれば一発である．qdbmなどの依存関係も全部面倒を見てくれるので楽である．\n$ brew install hyperestraier インストールされたものを見るとこうなっている．\n$ brew info hyperestraier hyperestraier: stable 1.4.13 (bottled) Full-text search system for communities https://fallabs.com/hyperestraier/ /usr/local/Cellar/hyperestraier/1.4.13 (278 files, 3.1MB) * Built from source on 2016-12-24 at 22:34:54 with: --with-mecab From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hyperestraier.rb ==\u0026gt; Dependencies Required: qdbm ==\u0026gt; Analytics install: 3 (30 days), 16 (90 days), 64 (365 days) install_on_request: 3 (30 days), 16 (90 days), 64 (365 days) build_error: 0 (30 days) pdfのindexを作成する際に，hyperestraierに含まれているestfxpdftohtmlというフィルタでPDFのファイルをHTML形式に変換する．しかし，このフィルタは/usr/local/bin/などには入ってくれないので，brewによりインストールされた場所を探して，pathの通るところにsymbolic linkを張っておく．\n$ mdfind -name filter | grep hyperestraier /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter $ ls -al /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter total 48 drwxr-xr-x 8 kohkichi admin 256 Feb 16 2017 ./ drwxr-xr-x 19 kohkichi admin 608 Dec 24 2016 ../ -rwxr-xr-x 1 kohkichi admin 1118 Dec 24 2016 estfxasis* -rwxr-xr-x 1 kohkichi admin 1063 Dec 24 2016 estfxmantotxt* -rwxr-xr-x 1 kohkichi admin 1263 Dec 24 2016 estfxmsotohtml* -rwxr-xr-x 1 kohkichi admin 1016 Dec 24 2016 estfxpdftohtml* -rwxr-xr-x 1 kohkichi admin 1007 Dec 24 2016 estfxxdwtotxt* -rwxr-xr-x 1 kohkichi admin 1057 Dec 24 2016 estwnetxpnd* $ ln -s /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter/* /usr/local/bin/ pdftotext 上述のestfxpdftohtmlであるが，内部でpdftotextを使用している．そして，厄介なことに，このpdftotextはxpdfとpopplerの両方に含まれている．しかも，xpdfに含まれているpdftotextには -htmlmeta optionがないのである．つまり， xpdfに含まれているpdftotextを使用するとpdf文書のindexができない ということになる．実際にそれぞれのversionを見てみると，\n\u0026lt;\u0026lt;xpdf\u0026gt;\u0026gt; $ pdftotext -h pdftotext version 4.01.01 Copyright 1996-2019 Glyph \u0026amp; Cog, LLC .......... \u0026lt;\u0026lt;poppler\u0026gt;\u0026gt; $ pdftotext -h pdftotext version 0.77.0 Copyright 2005-2019 The Poppler Developers - http://poppler.freedesktop.org Copyright 1996-2011 Glyph \u0026amp; Cog, LLC .......... このように，全く異なったものになっているが，どうやら，xpdfのものの方が古いらしい．もし，xpdfをすでに入れている場合は，popplerをインストールしようとすると，\n$ brew install poppler Error: Cannot install poppler because conflicting formulae are installed. xpdf: because poppler, pdftohtml, pdf2image, and xpdf install conflicting executables Please `brew unlink xpdf` before continuing. と怒られるので，言われる通りに brew unlink xpdf してから，再度，brew install popplerを行えば良い．これで，popplerの方のpdftotextが使われるようになって，ちゃんとindexができるようになる．私は2台あるMacの片方でだけ何故かindexが作成できないので，原因を調べているうちにこのことに気がついたが，ネットで他に触れている記事が見当たらないので，ここにまとめておく．\nまた，このようにしてxpdfとpopplerをインストールしていると，Emacsでpdfを読む (pdf-tools) (2019.07.17追記)に書いたように，pdf-toolをコンパイルする際に「libffiがどこにあるか分からん」というようなエラーメッセージが出ることがある．その際の対処法は，Emacsでpdfを読む (pdf-tools) (2019.07.17追記)に書いたとおりである．\nユーザー用のウェブディレクトリの作成 まず，Apacheを用いてブラウザで検索できるように（これについては後述），自分のhome directoryにSitesというdirectoryを作成する．\n$ cd ~ $ mkdir Sites $ cd Sites $ pwd /Users/taipapa/Sites Apacheの設定のところで述べるが，このSitesというディレクトリにウェブサイトを構築できるように設定し，WWW ブラウザで全文検索できるようにする．\n全文検索用のディレクトリの作成 Sites ディレクトリの中に全文検索用のディレクトリを作成する．ここではpdfファイルの全文検索を行うので，pdfという名前にした．さらに，pdf ディレクトリの中に全文検索の対象となるpdfを集約するためのPDFsというディレクトリを作成する．\n$ cd ~/Sites $ mkdir pdf $ cd pdf $ mkdir PDFs PDFsディレクトリへのpdfの集約 さて，pdfは，大抵の場合，いくつかのディレクトリに分けて置いてあるであろう．それを全て1箇所に集約して全文検索ができるようにするために，シンボリックリンクを使用する．具体的には，pdfのあるディレクトリが，/Data/hogehoge, /Data/fugaguga, /Data/misc とすると，以下のようにする．\n$ cd /Users/taipapa/Sites/pdf/PDFs $ ln -s /Data/hogehoge . $ ln -s /Data/fugafuga . $ ln -s /Data/misc . 全文検索用のindexの作成 hyperestraierのestcmdを用いて，空のindexを作成する．名前はマニュアルの真似をしてcasketとする（わかれば何でも良いと思う）．これはpdfの配下でPDFsと同じレベルに置く\n$ pwd /Users/taipapa/Sites/pdf $ estcmd create casket $ ls -la total 24 drwxr-xr-x 5 taipapa staff 160 Jul 29 20:34 . drwxr-xr-x 8 taipapa staff 256 Aug 4 22:19 .. -rw-r--r--@ 1 taipapa staff 8196 Aug 5 22:12 .DS_Store drwxr-xr-x 10 taipapa staff 320 Jul 29 20:21 PDFs drwxr-xr-x 11 taipapa staff 352 Jul 29 21:14 casket これでようやく，indexを作成する準備が整った．後は以下のように叩けば良い．optionについてはマニュアルを参照．\n$ cd /Users/taipapa/Sites/pdf $ estcmd gather -pc UTF-8 -cl -fx \u0026#34;.pdf\u0026#34; \u0026#34;H@estfxpdftohtml\u0026#34; -il ja -lf -1 -sd -cm -um casket PDFs document数が11734個，語数が1351563のindex作成に要した時間は約40分強であった．これは，MacBook Pro (15-inch, Late 2016)でもiMac 2012 でも，ほとんど変わらなかった．\noptionとしては，optimizeがインデックスを最適化して、不要な領域を削除，purgeはインデックス内にあってファイルシステム上にない文書の情報を削除する．\n$ cd /Users/taipapa/Sites/pdf $ estcmd optimize /Library/WebServer/Documents/pdf/casket $ estcmd purge -cl /Library/WebServer/Documents/pdf/casket  2019年9月17日修正： 上記の後二者はdirectoryを間違えている．下記が正しい．   $ cd /Users/taipapa/Sites/pdf $ estcmd optimize /Users/taipapa/Sites/pdf/casket $ estcmd purge -cl /Users/taipapa/Sites/pdf/casket indexの更新 前述の3つのコマンドを打てば良い．\n$ cd /Users/taipapa/Sites/pdf $ estcmd gather -pc UTF-8 -cl -fx \u0026#34;.pdf\u0026#34; \u0026#34;H@estfxpdftohtml\u0026#34; -il ja -lf -1 -sd -cm -um casket PDFs $ estcmd optimize /Library/WebServer/Documents/pdf/casket $ estcmd purge -cl /Library/WebServer/Documents/pdf/casket  2019年9月17日修正： 上記の後二者はdirectoryを間違えている．下記が正しい．   $ cd /Users/taipapa/Sites/pdf $ estcmd gather -pc UTF-8 -cl -fx \u0026#34;.pdf\u0026#34; \u0026#34;H@estfxpdftohtml\u0026#34; -il ja -lf -1 -sd -cm -um casket PDFs $ estcmd optimize /Users/taipapa/Sites/pdf/casket $ estcmd purge -cl /Users/taipapa/Sites/pdf/casket 最初にゼロからindexを作成する際は，上記のようにかなり時間がかかるが，一旦作ってしまえば，更新はごく短時間で終了する．更新の自動化については，Amrtaさんの インデックス更新の自動化 を参考にされたい．\n検索のテスト 試しにterminalで検索してみる．\n$ cd /Users/taipapa/Sites/pdf $ estcmd search -vh casket HSP27 --------[02D18ACF711B9586]-------- VERSION 1.0 NODE local HIT 288 HINT#1 hsp27 288 TIME 0.001226 DOCNUM 11734 WORDNUM 1354563 VIEW HUMAN .......... うん，ちゃんと動いている．それに速い！\nApache set up terminalで検索ではあまりに寂しいので，ブラウザで検索できるようにするために，Web serverを立ち上げる．MacにはデフォルトでApacheがインストールされているというありがたい状態になっているので，これを使う．なお，Apacheについては，Apacheとは？Webサーバーの仕組みと人気サーバーソフトを徹底解説などを参考にされたい．\nApacheの設定については，以下を参考にした．\n 参考1：Macでローカルサーバを立ち上げる方法 参考2：MacでApacheを立ち上げてみる 参考3：Macでローカルサーバー構築あれこれ 参考4：Apache Tutorial: CGI による動的コンテンツ （結局，きちんと理解する為には，これをはじめとするApacheのチュートリアルを読むのが一番であった）  これらのサイトを読んだ方が早いのだが，自分のために設定などをまとめておく．\nまず，念のためにApacheが既にインストールされているかどうかを確かめてみる．\n$ httpd -v Server version: Apache/2.4.34 (Unix) Server built: Feb 22 2019 20:20:11 確かにインストールされている．\nCGI を許可するように Apache を設定する   参照：Apache Tutorial: CGI による動的コンテンツ\n  Apacheの設定ファイルの場所は、/etc/apache2/httpd.conf\n  CGI (Common Gateway Interface) は，ウェブサーバが コンテンツ生成をする外部プログラムと協調して動作するための方法を 定義している．\n  CGI プログラムを正しく動作させるには、CGI を許可するように Apache の設定を行う必要がある．\n  Apache が共有モジュール機能付きでビルドされている場合、モジュールがロードされていることを確認する．具体的には，/etc/apache2/httpd.conf をviを使って以下のように書き換えれば良い（root権限が必要なので sudo している）．\nsudo vi /etc/apache2/httpd.conf .... 165 #LoadModule cgi_module libexec/apache2/mod_cgi.so -----\u0026gt; LoadModule cgi_module libexec/apache2/mod_cgi.so 165行目の行頭の＃を外してアンコメントし，有効化しておく．\nこれをやらないと，cgiが働かず，そのファイル自体がダウンロードされてしまう．\n  設定ファイルの更新内容を反映させるためにはApacheの再起動が必要\n  Apacheの起動，再起動   Apacheの起動\n$ sudo apachectl start  Apacheの停止   $ sudo apachectl stop  Apacheの再起動   $ sudo apachectl restart   これでApacheを起動したので，hyperestraierに含まれている検索用CGI scriptを利用する．\nCGIが動くかどうかのテスト Apache Tutorial: CGI による動的コンテンツ には，「ScriptAlias ディレクティブを使用して、 CGI プログラム用の特別な別ディレクトリを Apache に設定します。 Apache は、このディレクトリ中の全てのファイルを CGI プログラムであると仮定します。 そして、この特別なリソースがクライアントから要求されると、 そのプログラムの実行を試みます。」と記載されている．一方, mojaveのデフォルトの /etc/apache2/httpd.confでは，ScriptAliasではなく，以下のようにScriptAliasMatchを用いている．\n373 ScriptAliasMatch ^/cgi-bin/((?!(?i:webobjects)).*$) \u0026#34;/Library/WebServer/CGI-Executables/$1\u0026#34; この正規表現の記述により，cgi-bin/というパスが/Library/WebServer/CGI-Executables/に対応するようになっている（詳細は，ScriptAlias ディレクティブ のScriptAliasMatch ディレクティブを参照）\nということで，/Library/WebServer/CGI-Executables/にcgi scriptを置けば，CGI programとして動くはずである．macでは最初からperlがインストールされているので，以下のようなperl script（\u0026ldquo;Hello\u0026quot;と表示するだけ）を作成して試してみる．\n#!/usr/bin/perl print \u0026#34;Content-type: text/html \\n\\n\u0026#34;; print \u0026#34;Hello\u0026#34;; これを，test.cgiとして保存し，\n$ chomod 755 test.cgi して，実行権限を付与した上で，/Library/WebServer/CGI-Executables/に置く．この状態で，ブラウザのurl windowに localhost/cgi-bin/test.cgi と打ち込むと，\u0026ldquo;Hello\u0026rdquo; と表示される．\nさて，次の段階に進む前にDocumentRootについて，ちょっと説明が必要（後日の自分のため）．\nDocumentRoot  参考：ドキュメントルート(DocumentRoot)  /etc/apache2/httpd.confを，lessを使って読んでみると以下のように書かれている．\n$ less -N /etc/apache2/httpd.conf .......... 240 # 241 # DocumentRoot: The directory out of which you will serve your 242 # documents. By default, all requests are taken from this directory, but 243 # symbolic links and aliases may be used to point to other locations. 244 # 245 DocumentRoot \u0026#34;/Library/WebServer/Documents\u0026#34; 246 \u0026lt;Directory \u0026#34;/Library/WebServer/Documents\u0026#34;\u0026gt; .......... 要するにDocumentRootというのは文書やコンテンツの置き場所として使われるディレクトリである．Macの場合は， DocumentRoot \u0026ldquo;/Library/WebServer/Documents\u0026rdquo; と指定されており，WWW serverとして公開する内容は，/Library/WebServer/Documents 以下に配置していくことになる．他の場所を参照するためにシンボリックリンクやエーリアスを使用しても良いと書かれている．\n先ほど起動したApacheへブラウザからアクセスすると（ブラウザのurl が表示されているところにlocalhostと打てば良い）以下のような画面が表示される．\n   これは，/Library/WebServer/Documents/index.html.en が表示されているのである．\n$ less /Library/WebServer/Documents/index.html.en \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;It works!\u0026lt;/h1\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; /Library/WebServer/Documents/index.html.en (END) つまり，この /Library/WebServer/Documents ディレクトリの配下が， http://localhost のroot直下となる．pdfを含むディレクトリ，あるいはそのシンボリックリンクを/Library/WebServer/Documents ディレクトリの配下に置けば全文検索を行うcgi scriptの対象とできるわけである．\nしかし，そうなると，前述の/Library/WebServer/CGI-Executables/に於いても同じであるが，全ての作業をrootとして行わなければならなくなり，何をするにもsudoしないといけないのが面倒であるし，security上でも問題であろう．そこで，UserDir ディレクティブを使って 各ユーザがホームディレクトリにSites directoryを作成し，ウェブサイトを構築できるように設定する．要するに，先ほど作成した/Users/taipapa/Sites/pdf/以下のディレクトリで全文検索ができるように設定するということである．\nユーザ毎のウェブディレクトリ  参照1：apacheを使ってローカルサーバーを構築する方法 参照2：MacOS 同梱の Apache が参照するドキュメントルートを変更する 参照3：MacOS X の Yosemite (10.10) で Sites ディレクトリを使って localhost をアカウント別に利用する方法 参照4：ユーザ毎のウェブディレクトリ  やはりApacheのチュートリアル（ユーザ毎のウェブディレクトリ）を読むのが一番分かりやすかった．以下はこのサイトからの引用\n 「複数のユーザのいるシステムでは、UserDir ディレクティブを使って 各ユーザがホームディレクトリにウェブサイトを構築できるように設定することが 可能です。URL http://example.com/~username/ を訪れた人は \u0026ldquo;username\u0026rdquo; というユーザの UserDir ディレクティブで指定された サブディレクトリからコンテンツを得ることになります。」 「デフォルトではこれらのディレクトリへのアクセスは許可されていません。 UserDir を使って有効にできます。 有効にするには、デフォルトの設定ファイルで付随する httpd-userdir.conf ファイルが必要」という翻訳になっている．意味はなんとなくわかるが，後半部分は「デフォルトの設定ファイルであるhttpd-userdir.conf ファイルの中の次の行をアンコメントすることによりアクセスが可能となる．また，必要に応じてhttpd-userdir.confも適切に変更する」と訳すべきと思う．  httpd-userdir.confの有効化 手順としては，まず，/etc/apache2/httpd.confの511行目の行頭の#を外し，コメントアウトを外してhttpd-userdir.confを有効にする．\n$ sudo vi /etc/apache2/httpd.conf .......... 510 # User home directories 511 #Include /private/etc/apache2/extra/httpd-userdir.conf -----\u0026gt; 511 Include /private/etc/apache2/extra/httpd-userdir.conf .......... httpd-userdir.confの編集（ユーザー毎の設定ファイルを読み込む様にする） ついで，有効にした /etc/apache2/extra/httpd-userdir.confを見て，編集する．\n$ sudo vi /etc/apache2/extra/httpd-userdir.conf 1 # Settings for user home directories 2 # 3 # Required module: mod_authz_core, mod_authz_host, mod_userdir 4 5 # 6 # UserDir: The name of the directory that is appended onto a user\u0026#39;s home 7 # directory if a ~user request is received. Note that you must also set 8 # the default access control for these directories, as in the example below. 9 # 10 UserDir Sites 11 12 # 13 # Control access to UserDir directories. The following is an example 14 # for a site where these directories are restricted to read-only. 15 # 16 # Include /private/etc/apache2/users/*.conf 17 \u0026lt;IfModule bonjour_module\u0026gt; 18 RegisterUserSite customized-users 19 \u0026lt;/IfModule\u0026gt; 10行目の\u0026quot;UserDir Sites\u0026quot;は デフォルトでアンコメントされており，そのままで良い．これにより，~usernameでSites directoryにアクセスできるようになる．編集する部分は，16行目の \u0026quot; # Include /private/etc/apache2/users/*.conf\u0026rdquo; であり，行頭の＃を外してアンコメントし，有効化しておく．これによりユーザーごとの設定ファイルを読み込む様になる（MacOS X の Yosemite (10.10) で Sites ディレクトリを使って localhost をアカウント別に利用する方法）．\nまた，3行目にあるように，ユーザーのホームディレクトリのセットアップのために， mod_authz_core, mod_authz_host, mod_userdirを全て有効 にしておく必要がある．以下のように， /etc/apache2/httpd.conf を編集する．\nsudo vi /etc/apache2/httpd.conf ...... 77 LoadModule authz_host_module libexec/apache2/mod_authz_host.so 78 LoadModule authz_groupfile_module libexec/apache2/mod_authz_groupfile.so 79 LoadModule authz_user_module libexec/apache2/mod_authz_user.so 80 #LoadModule authz_dbm_module libexec/apache2/mod_authz_dbm.so 81 #LoadModule authz_owner_module libexec/apache2/mod_authz_owner.so 82 #LoadModule authz_dbd_module libexec/apache2/mod_authz_dbd.so 83 LoadModule authz_core_module libexec/apache2/mod_authz_core.so ...... 173 #LoadModule speling_module libexec/apache2/mod_speling.so 174 #LoadModule userdir_module libexec/apache2/mod_userdir.so 175 LoadModule alias_module libexec/apache2/mod_alias.so ... 77行目の \u0026ldquo;LoadModule authz_host_module libexec/apache2/mod_authz_host.so\u0026rdquo; と83行目の \u0026ldquo;LoadModule authz_core_module libexec/apache2/mod_authz_core.so\u0026quot;はデフォルトでアンコメントされていたが，174行目の \u0026ldquo;#LoadModule userdir_module libexec/apache2/mod_userdir.so\u0026rdquo; はコメントアウトされていたので，#を外して有効化した．これらの設定で， ユーザーディレクトリが有効 になる．\nユーザー毎の設定ファイルを作成 自分の使っているusernameを知らない人はいないと思うが，万一分からなければ以下のコマンドを使う．\n$ whoami taipapa ついで，/etc/apache2/users にユーザー毎の設定ファイルを作成する．今回はtaipapaの設定ファイルということになる．\n$ sudo vi /etc/apache2/users/taipapa.conf \u0026lt;Directory \u0026#34;/Users/taipapa/Sites/\u0026#34;\u0026gt; AddHandler cgi-script cgi AllowOverride All Options Indexes FollowSymLinks Multiviews ExecCGI Require all granted \u0026lt;/Directory\u0026gt; 内容を簡単に説明する．\n Directory (Directory ディレクティブ): 指定されたディレクトリとそのサブディレクトリにのみ ディレクティブを適用させるためには、 Directory と /Directory を対として、ディレクティブ群を囲む．以下はディレクティブの説明 AddHandler (AddHandler ディレクティブ ): ファイル名の拡張子を指定されたハンドラにマップする．\u0026ldquo;AddHandler cgi-script cgi\u0026rdquo; により，/Users/taipapa/Sites/の配下にある拡張子 \u0026ldquo;.\u0026rdquo; で終わるファイルを CGI スクリプトとして扱うようになる． AllowOverride (AllowOverride ディレクティブ): このディレクティブが All に設定されている時には、 .htaccess という コンテキスト を持つ 全てのディレクティブが利用できる． Options (Options ディレクティブ): ディレクトリに対して使用可能な機能を設定する．個々の機能はリンク先を参照．今回重要なのは， ExecCGI で，これはmod_cgiによるCGI scriptの実行を許可する． Require (参照：Apache 2.4 設定ファイルの記述例): サーバーのディレクトリに接続してくるクライアントについて、許可・拒否する条件を指定するディレクティブ．昔はAllow ディレクティブやDeny ディレクティブを利用していた． \u0026ldquo;Require all granted\u0026rdquo; は、すべてのクライアントからの接続を許可する． \u0026ldquo;Require all denied\u0026rdquo; は、すべてのクライアントからの接続を拒否する．  これで，Apache関連の設定が終了した．次はいよいよCGI scriptの設定である．\nHyperestraier付属の全文検索用CGI scriptのset up ようやく，ブラウザによる全文検索ができるようにするためにCGI scriptのset upをするところまでたどり着いた．hyperestraierに含まれている検索用CGI scriptは，estseek.cgiである．詳細はリンク先のマニュアルを参照していただきたい．そこにはこうある．「estseek.cgiが動作するには、設定ファイルとテンプレートファイルとトップページファイルとヘルプファイルが必要です。それぞれestseek.conf、estseek.tmpl、estseek.top、estseek.helpというのが標準的な名前です。」これらのscriptおよび関連ファイルは，brewでインストールした場合は，以下のような場所に入る．\n$ mdfind -name estseek /usr/local/Cellar/hyperestraier/1.4.13/libexec/estseek.cgi /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.top /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.tmpl /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.help /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.conf /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/increm/estseek-frame.html /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/increm/estseek-form.html /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.top /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.tmpl /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.help /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.conf $ ls /usr/local/Cellar/hyperestraier/1.4.13/libexec/ estfraud.cgi* estproxy.cgi* estscout.cgi* estseek.cgi* estsupt.cgi* $ ls /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/ COPYING estfraud.conf estscout.conf estseek.top locale/ ChangeLog estproxy.conf estseek.conf estsupt.conf THANKS estraier.idl estseek.help filter/ doc/ estresult.dtd estseek.tmpl increm/ そこで，これらのscriptをユーザーディレクトリのしかるべき場所にコピーする．今回は，まず，前半部で作成した/Users/taipapa/Sitesにcgi-bin というディレクトリを作成し，CGI scriptの置き場所とした．そして，その配下にestというディレクトリを作って，そこにhyperestraierによる全文検索用のscript などをコピーした．\n$ cd /Users/taipapa/Sites $ mkdir -p cgi-bin/est $ tree -L 2 . ├── cgi-bin │ ├── est │ └── test.cgi ├── index.html ├── pdf │ ├── PDFs │ └── casket └── test.cgi $ cd cgi-bin/est $ cp -a /usr/local/Cellar/hyperestraier/1.4.13/libexec/* . $ cp -a /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/est* . $ ls estfraud.cgi* estproxy.conf estscout.cgi* estseek.conf estseek.top estfraud.conf estraier.idl estscout.conf estseek.help estsupt.cgi* estproxy.cgi* estresult.dtd estseek.cgi* estseek.tmpl estsupt.conf 設定ファイルであるestseek.confはdefaultでは以下のようになっている．\n$ cd /Users/taipapa/Sites/cgi-bin/est $ less -N estseek.conf .......... 1 indexname: casket 2 3 tmplfile: estseek.tmpl 4 5 topfile: estseek.top 6 7 helpfile: estseek.help 8 9 lockindex: true 10 11 pseudoindex: 12 13 replace: ^file:///home/mikio/public_html/{{!}}http://localhost/ 14 replace: /index\\.html?${{!}}/ 15 16 showlreal: false .......... これを以下のように編集する．\n1 #indexname: casket 2 indexname: /Users/taipapa/Sites/pdf/casket 3 4 tmplfile: estseek.tmpl 5 6 topfile: estseek.top 7 8 helpfile: estseek.help 9 10 lockindex: true 11 12 pseudoindex: 13 14 #replace: ^file:///home/mikio/public_html/{{!}}http://localhost/ 15 #replace: /index\\.html?${{!}}/ 16 17 replace: ^file:///Data/{{!}}http://localhost/~taipapa/pdf/PDFs/ 18 17行目の replace: の部分はかなりの試行錯誤が必要であった．マニュアルでは，「replaceは正規表現によってURIを変換するのに使います。複数回指定できます。先頭にマッチする「^」を駆使すれば接頭辞（ディレクトリ）の変換ができますし、末尾にマッチする「$」を駆使すれば接尾辞（拡張子）の変換ができます。」とあるように，どこにpdf文書を置くかで適切に変更する必要がある．私の場合は，前述のごとく，pdfのあるディレクトリが，/Data/hogehoge, /Data/fugaguga, /Data/misc で，/Users/taipapa/Sites/pdf/PDFs にシンボリックリンクで集約したので，このような設定になった．他のファイルはdefaultのままとした．\nこれで，全ての準備は整った．Sites ディレクトリには前半部で説明した通り，pdf archiveへのシンボリックリンクが集約されており，かつ，全文検索用の索引であるcasketも置いてある．全てが正しく設定されていれば，ブラウザのurl windowに http://localhost/~username/cgi-bin/est/estseek.cgi （今回は~usernameは~taipapa） と打ち込むと，以下のような全文検索の画面になるはずである．\n   早速検索してみよう．HSP27と入れてみると，結果は以下の通り．検索に用いたキーワードが黄色でハイライトされている．\n   一番最初の2667.full.pdfを右クリックすると，下のように別タブでpdfが開く．\n   また，各結果の[detail]の部分を右クリックすると以下のような画面が別タブで開く．\n   これは，pdfの内容をテキストで出力したものである．一見，見にくくて何の役にたつと思うかもしれないが，検索キーワードが黄色にハイライトされており，この単語の使い方が一目でわかるようになっている．論文を書くときに参考になる．\nこの全文検索を使い始めてもう5-6年になるが，一旦セットアップしてしまえば，時々indexを更新する以外は手間いらずで，重宝している．更新の自動化については，前述の通り．\n今回は，このブログを始めて以来の長文になってしまった．後日の自分のためにできるだけ細かいところまで書き留めておいた．半分以上はApacheの設定に関する記述になっている（笑）．\n","date":1563894000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568725181,"objectID":"4a58f1a87635f93ed3fae3ad86484ab1","permalink":"/post/fulltextsearch/","publishdate":"2019-07-24T00:00:00+09:00","relpermalink":"/post/fulltextsearch/","section":"post","summary":"論文というものはすぐにたまる．読みもしないのにどんどんたまる．21世紀に入った頃は論文のプリントアウトの山ができて定期的に捨てたりしていたのだが，それも今は昔，現在はpdfの時代であり，かなり前からpdfで読んで，注釈など書き込んだりするようになった．しかし，どんどんたまるのは昔以上である．何しろ取るスペースはディスクの容量だけで，物理空間を占拠するわけではないから，いくらでも気兼ねなくため込める．ため込んだ論文数が数千を越えるあたりで，ふと思うわけである．「これを全て読むのは不可能としても，全文検索ができたら便利だろうなぁ．．．」\nという訳で，今回は，hyperestraierを使ってため込んだpdfの全文検索をできるようにしようという話である．\n","tags":["macos","mojave","full-text-search","hyperestraier","pdf"],"title":"Full text search of PDF archives with hyperestraier on maos (mojave) — Hyper Estraierでpdfの全文検索を行う","type":"post"},{"authors":null,"categories":null,"content":"Emacsでpdf文書を読もうとするとdefaultではDocViewで読むことになるが，解像度がイマイチで動きもややモッサリとしていて使い勝手が悪かったため，サクッと止めて，skimを使っている．ただ，pdf-toolsというのがあって，こちらは割とスグレモノらしいとの噂は聞いていた．そこで，今回はこれを試してみることにした．\n Table of Contents  PDF Tools  インストール 追記（2019年7月17日） 設定 使用法   org-pdfview  インストールと設定   PDF Toolsと他のアプリ（skim, Previewなど）との比較    PDF Tools  参考１：pdf-tools　ご本家 参考２：emacsをPDF Viewerにしよう 参考３：emacs内でTeX文書の作成からpdf閲覧まで行う 参考４：pdf-tools on macos 参考５：VIEW AND ANNOTATE PDFS IN EMACS WITH PDF-TOOLS 参考６：MORE PDF-TOOLS TWEAKS 参考７：EVEN MORE PDF-TOOLS TWEAKS 参考８：pdf-tools pretty much unusable with linum-mode enabled 参考９：Using Emacs 44 - An Org mode and PDF-tools workflow  ご本家のイントロに書いてあるが，DocViewのようにghostscriptで予めrenderしておくのではなく，on demandでページを作成し，メモリーに貯めておく仕組みになっている．このrenderingは，popplerという名前の特別なライブラリーによって行われるが，これはepdfinfoと呼ばれるserver programの中で走っている．こいつの仕事はEmacsからの要求を連続して読んで適切な結果，すなわち，PDFのページのPNG imageを作成することである．\n　「実際のところ，PDFファイルを表示するのはPDF toolsの仕事の一部に過ぎない．popplerは文書に関する全ての情報を提供でき，かつ，それを修飾もできるので，遥かにたくさんのことができる」とイントロの最後で大見得を切って，何ができるかを示す動画を紹介している．\nインストール OSXは公式にはサポートされていないが，コンパイルできたと報告されている，と書いてあり，実際，以下のように出来た．まず，homebrewでpopplerをインストールする．もし，まだ，automakeを入れていなければそれもhomebrewでインストールする．\n$ brew install poppler automake ついで，pkg-configをexportでいじるようなことが書いてあるが，特にそれはせずともよかった．ただし，pdf-toolsのインストールの際にコンパイルエラーが出た．どういうわけか， pdf-tools 20180428.1527 ではだめだったが，幸い， pdf-tools 20181221.1913 が出たので，参考4：pdf-tools on macosを頼りに，これにアップデートしたところ，あとは問題なくインストールできた．\n追記（2019年7月17日） その後何度かpdf-toolをコンパイルすることがあったが，「libffiがどこにあるか分からん」というようなエラーメッセージが出て，「pkg-configでなんとかせい」と怒られるようになった．つまり，ご本家に書いてある通りになったわけである．そこで，libffiのpkgconfigを探して，それをPKG_CONFIG_PATHに含めるようにした．\n$ mdfind -name pkgconfig | grep libffi /usr/local/Cellar/libffi/3.2.1/lib/pkgconfig $ export PKG_CONFIG_PATH=/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig $ /Applications/Emacs.app/Contents/MacOS/Emacs --debug-init これで下記のように設定していると，以下のようにpdf-toolが無事にコンパイルされる．\n/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/build/server/autobuild -i /Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/ --------------------------- Installing packages --------------------------- Skipping package installation (already installed) --------------------------- Configuring and compiling --------------------------- ./configure -q --bindir=/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/ \u0026amp;\u0026amp; make -s Is case-sensitive searching enabled ? yes Is modifying text annotations enabled ? yes Is modifying markup annotations enabled ? yes --------------------------- Installing --------------------------- make -s install /usr/local/bin/gmkdir -p \u0026#39;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018\u0026#39; /usr/local/bin/ginstall -c epdfinfo \u0026#39;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018\u0026#39; make[1]: Nothing to be done for `install-data-am\u0026#39;. =========================== Build succeeded. :O) =========================== 設定 例によって，use-packagを用いて以下のように，init.orgに書けばよい．\n#+begin_src emacs-lisp (use-package pdf-tools :ensure t :config ;; initialise (pdf-tools-install) ;; PDF Tools does not work well together with linum-mode (add-hook \u0026#39;pdf-view-mode-hook (lambda() (nlinum-mode -1))) ;; open pdfs scaled to fit page ;; (setq-default pdf-view-display-size \u0026#39;fit-page) ;; automatically annotate highlights (setq pdf-annot-activate-created-annotations t) ;; use normal isearch (define-key pdf-view-mode-map (kbd \u0026#34;C-s\u0026#34;) \u0026#39;isearch-forward) ;; more fine-grained zooming (setq pdf-view-resize-factor 1.1) ) #+end_src 以下に内容を説明する．\n pdf-tools-installにより最初のときにepdfinfoがコンパイルされる． 行番号を表示するとうまく動かない．私はnlinum-modeを使っているのでpdf-view-modeの際には止めておく． ハイライトした部分には自動的に注釈を加える． swiperはうまく動かないので，C-sを普通のisearchに戻す ＋とーで拡大，縮小だが，これを10%ずつにする．  使用法 上記のインストールと設定を行えば，C-x C-fでも，drag \u0026amp; dropでも，Emacsのpdf toolsのpdf-view-modeでpdfが開くようになる．ここまでくれば，あとは色々なことができる．\nhighlight マウスで文章をなぞって選択（下の画像の白黒反転した部分）したあとに，C-c C-a h もしくは，画像で示したように，PDF Tools → Add markup annotation → highlightを選択すれば，\n   選択した部分がハイライトされ，下に新たなバッファが開いてそこに注釈が書けるようになる（下の画像参照）．書き終わったら，C-c C-cで注釈バッファが閉じる．なお，上に元からある黄色にハイライトされた部分は以前に選択してハイライトした部分である．\n   Display Annotations 複数箇所をハイライトして注釈をつけたあとに，全ての注釈を一度にリストにしてみることができる．C-c C-a l もしくは，PDF Tools → Display Annotationsを選択すれば，下の画像のように，下に２つの新たなバッファが開く．真ん中のバッファに注釈のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動してブルーの枠で囲んで表示され，下のバッファに注釈の内容が表示される．qを押せば，2つのバッファは閉じる．\n   Isearch document (C-s) pdf-toolsはswiperとはconflictするために，C-sは本来のisearch-forwardに戻して設定しておく必要がある（前述の設定の通り）．これで，C-sとやると，minibufferに打ち込んだ語が反転して表示され，C-sとやるごとに先へ移動していく．下の画像では，\u0026ldquo;MK2\u0026quot;という単語を打った時の状態を示している．\n   Occur document PDF Tools → Occur documentを選択すれば，minibufferに List lines matching PCRE: と表示される．そこに例えばMK2と打てば，下の画像のように，下に新たなバッファが開き，MK2のあるページとそこにある文章のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動する．qを押せば，下のバッファは閉じる．\n   org-pdfview org-modeからpdf文書へのリンクを開くのをサポートするパッケージ．\n 参考１：org-pdfview 参考２：How to use pdf-tools (pdf-view-mode) in emacs? 参考３：Configure org-pdfview and pdf-tools to open at page  インストールと設定 例によって，use-packagを用いて以下のように，init.orgに書くだけ．\n#+begin_src emacs-lisp (use-package org-pdfview :ensure t) #+end_src 例えば，Emacsのpdf-toolsを用いて，hogehoge.pdfを開いて読んでいるとする．そこで，C-c lとすると， Stored: /Data/Hoge/Fuga/hogefuga.pdf と今読んでいるpdfへのリンクが保存される．そして，それを保存しておきたいorg文書の適当な場所で，C-c C-lとすれば，そのリンクが貼り付けられる．以前の記事（Org-modeでhtml exportの際のthemeについて）で書いたような文献のまとめを作成しているときに，元文献とリンクさせておく際などに便利である．貼り付けたリンクをクリックすれば，元文献がEmacsのpdf-toolsによって開かれるようになる（画面が分割され，下に新たなバッファが開いてそこにpdfが表示される）．割と便利である．\nPDF Toolsと他のアプリ（skim, Previewなど）との比較  注釈の一覧表示，C−s， occurなどの機能は便利である． skim, Previewなどでは，長方形ツールによりお好みの領域を選択してコピーすることができるし，このコピーした領域のみをpdfとして保存できるが，pdf-toolsではできない． skim, Preview, Adobe Acrobat Readerのように，全画面でプレゼンテーションするモードはない． Adobe Acrobat Readerのように，動画を動かすことは出来ない． 上記２つの理由から，auctexを使用する際のpdf viewerとしてEmacsを使用していない． 最近のpdfは，本文中に示された文献もしくはその番号をクリックすると，最後の文献リストの中の該当の論文のところに飛ぶようになっているものも多くなっているが，pdf-toolsはそれには対応していないようである．より正確にはリンク先が分からないようである．これは自力では解決できない．．． Outline構造にも対応しており，検出するのだが，リンク先が分からないようである．これも自力では解決できない．．．  以上のことより，学会発表用のスライドなどを作成している際は，skimなどの方がpdf viewerとして便利であるが，文献のまとめなどpdfを読み込む際には，pdf-toolsの方が向いているのではないかと考えている．\n","date":1563289200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563973043,"objectID":"f696de9a18ece44cbfc7f8551607ea7b","permalink":"/post/pdf-tools/","publishdate":"2019-07-17T00:00:00+09:00","relpermalink":"/post/pdf-tools/","section":"post","summary":"Emacsでpdf文書を読もうとするとdefaultではDocViewで読むことになるが，解像度がイマイチで動きもややモッサリとしていて使い勝手が悪かったため，サクッと止めて，skimを使っている．ただ，pdf-toolsというのがあって，こちらは割とスグレモノらしいとの噂は聞いていた．そこで，今回はこれを試してみることにした．\n","tags":["emacs","pdf","pdf-tools","org-mode"],"title":"Emacsでpdfを読む (pdf-tools) (2019.07.17追記)","type":"post"},{"authors":null,"categories":null,"content":"最初にmacosにライブ変換が登場した時に使用してみて，これは駄目だとすぐにGoogle inputmethodに戻してしまった．今年の5月にmojaveにupgradeしたのち，ある日，ふと思い立って，ライブ変換を試してみたところ，ほとんどストレスを感じることなくスラスラと入力ができた．ほとんど変換のためにスペースキーを叩く必要がないことに驚いた．予測の精度が登場時よりはるかに改良されているのであろう．エンドユーザーにはありがたいことである．早速乗り換えてしまった．\n Table of Contents  How to set up Shortcut    How to set up  まず画面トップの右端の方の日本語入力のライブ変換にチェックを入れてオンにする． ついで，Emacsのカーソルの色の設定をする．これは以前の記事（Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など）の設定をほんの少し変えるだけのことである．comment outしていた部分を外して，google inputmethodの方をcomment outする．具体的には，init.orgに以下のように書き込めば良い．  #+BEGIN_SRC emacs-lisp (when (fboundp \u0026#39;mac-input-source) (defun my-mac-selected-keyboard-input-source-chage-function () (let ((mac-input-source (mac-input-source))) (set-cursor-color (if (string-match \u0026#34;com.apple.inputmethod.Kotoeri.Roman\u0026#34; mac-input-source) ;; (if (string-match \u0026#34;com.google.inputmethod.Japanese.Roman\u0026#34; mac-input-source) \u0026#34;#91C3FF\u0026#34; \u0026#34;#FF9300\u0026#34;)))) (add-hook \u0026#39;mac-selected-keyboard-input-source-change-hook \u0026#39;my-mac-selected-keyboard-input-source-chage-function)) #+END_SRC これでEmacsでライブ変換を使用している際に，日本語入力の時は赤色のカーソル，英語入力の時は青色のカーソルになる．\nShortcut  参考：#Mac のライブ変換で入力をひらがなのままで確定させる ( Control + J ) 「Control」＋「J」 → ひらがなに変換 「Control」＋「K」 → カタカナに変換 「Control」＋「L」 → 全角英字に変換 「Control」＋「;（セミコロン）」 → 半角英字に変換  私のところでは何故か参考サイトと異なり，セミコロンで半角カタカナではなく半角英字に変換される．半角カタカナなんか使わないからいいけど．．．\nJ, K, L, ; はキーボード上の位置が一直線であり，かつ，左から順番になっているので，指に優しい．\nmojaveのライブ変換，とにかく一度使ってみることをお勧めする．\n","date":1562770800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562997027,"objectID":"7a3155cd8f80af2f68fa6f82a3f40806","permalink":"/post/live/","publishdate":"2019-07-11T00:00:00+09:00","relpermalink":"/post/live/","section":"post","summary":"最初にmacosにライブ変換が登場した時に使用してみて，これは駄目だとすぐにGoogle inputmethodに戻してしまった．今年の5月にmojaveにupgradeしたのち，ある日，ふと思い立って，ライブ変換を試してみたところ，ほとんどストレスを感じることなくスラスラと入力ができた．ほとんど変換のためにスペースキーを叩く必要がないことに驚いた．予測の精度が登場時よりはるかに改良されているのであろう．エンドユーザーにはありがたいことである．早速乗り換えてしまった．\n","tags":["macos","mojave","japanese","input","emacs","cursor","color"],"title":"mojaveのライブ変換で快適日本語入力（カーソルの色も日英で変わるように設定）","type":"post"},{"authors":null,"categories":null,"content":"今回は（も？），redditで拾ってきたネタ（How to highlight occurences at cursor point in Emacs）．カーソルの位置にあるシンボル（単語と思えば良い）をバッファ内ですべてハイライトしてくれるEmacsのパッケージを訊いているのだが，いくつか答えがあって，一番便利そうだったのが，今回紹介する symbol-overlay である．\n Table of Contents  References Install How to use    References  symbol-overlay （ご本家） Jump around Emacsの補完と検索を超強化する  Install 例によって，以下のようにinit.orgに書き込んでMELPAからsymbol-overlayをインストールする．\n#+begin_src emacs-lisp (use-package symbol-overlay ; Highlight symbols :ensure t :config (global-set-key (kbd \u0026#34;M-i\u0026#34;) \u0026#39;symbol-overlay-put) (global-set-key (kbd \u0026#34;\u0026lt;f7\u0026gt;\u0026#34;) \u0026#39;symbol-overlay-mode) (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt;\u0026#34;) \u0026#39;symbol-overlay-remove-all) ) #+end_src How to use 使用法はご本家に書いてあるが，まず，”M-i”を叩けば，カーソルが位置しているシンボル（単語と思えば良い）が色付きでハイライトされる．同時に，同一バッファ内での全ての同じ単語も同様にハイライトされる．カーソルを動かしてもハイライトされた状態はそのままである．続けて，別の単語にカーソルを持って行って，\u0026ldquo;M-i\u0026quot;とすれば，その単語が別の色でハイライトされる．勿論，バッファ内の同一の単語も全て同じ色でハイライトされる．しかも，最初にハイライトした単語は，カーソルが離れた後もハイライトされた状態を維持している．文章で書くとわかりにくいが，要するに下図のような状態になる．\n   さらに，各単語間は \u0026ldquo;n\u0026rdquo; で先に進み， \u0026ldquo;p\u0026rdquo; で逆戻りできる．別の色のハイライトの単語にカーソルを移動させれば，今度はその単語間で同様に移動できる．そのほかご本家サイトによれば，以下のようなキーバインドになっている．\n\u0026#34;n\u0026#34; -\u0026gt; symbol-overlay-jump-next \u0026#34;p\u0026#34; -\u0026gt; symbol-overlay-jump-prev \u0026#34;w\u0026#34; -\u0026gt; symbol-overlay-save-symbol \u0026#34;t\u0026#34; -\u0026gt; symbol-overlay-toggle-in-scope \u0026#34;e\u0026#34; -\u0026gt; symbol-overlay-echo-mark \u0026#34;d\u0026#34; -\u0026gt; symbol-overlay-jump-to-definition \u0026#34;s\u0026#34; -\u0026gt; symbol-overlay-isearch-literally \u0026#34;q\u0026#34; -\u0026gt; symbol-overlay-query-replace \u0026#34;r\u0026#34; -\u0026gt; symbol-overlay-rename なかでも特筆すべきは \u0026ldquo;r\u0026rdquo; のsymbol-overlay-renameで，ハイライトされた単語を一気に書き換えることができる．例えば下図のように \u0026ldquo;global-set-key\u0026rdquo; が赤くハイライトされている時，どれかの\u0026quot;global-set-key\u0026quot;にカーソルを置いて \u0026ldquo;r\u0026rdquo; を叩けば，minibufferにRenameが表示され，これを消去して新しい名前を書くと赤くハイライトされている単語は一気に新しい名前に変わる．この機能は場合によっては非常に便利である．\n   こういうパッケージを教えてくれるので，redditは有難い．\n","date":1562684400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562757874,"objectID":"bd922f146960ebc33a0c2e5cb5d7bd5a","permalink":"/post/symbol-overlay/","publishdate":"2019-07-10T00:00:00+09:00","relpermalink":"/post/symbol-overlay/","section":"post","summary":"今回は（も？），redditで拾ってきたネタ（How to highlight occurences at cursor point in Emacs）．カーソルの位置にあるシンボル（単語と思えば良い）をバッファ内ですべてハイライトしてくれるEmacsのパッケージを訊いているのだが，いくつか答えがあって，一番便利そうだったのが，今回紹介する symbol-overlay である．\n","tags":["emacs","highlight","symbol","replace"],"title":"Symbol Overlay (Highlight symbols at cursor point with keymap-enabled overlays in Emacs)","type":"post"},{"authors":null,"categories":null,"content":"またまたRネタである．グラフに注釈をつけたくなることがあるが，なかなか見映えのする注釈をつけるのは難しい．最近，それなりの方法を見つけたので，まとめておく．例として，代謝経路の変化を縦型の折れ線グラフで描きKEGG orthologyによって分類したグラフを作成してみる．うーむ，自分で書いていてなんだが，マニアックなネタである．．．(^^;;;\nま，備忘録として書いておこう．\n Table of Contents  References Data Preparation Plot vertical line graph Flip the plot so that horizontal becomes vertical with coord_flip Add annotation box by geom_rect  References Remove right margin with expand=c(0,0) customize tick marks with limits and breaks of scale_y_continuous Add KEGG orthology (KO)      References Kyoto Encyclopedia of Genes and Genomes (KEGG) に関しては以下のサイトを参照\n KEGG KEGG BRITE Hierarchy Files KEGG Metabolic pathways KO (KEGG ORTHOLOGY) Database  Data Preparation 例によって，まず，架空のデータを作成する．Drugを投与して1，5，12，24時間後の代謝物の血中濃度変化を対照，つまり偽薬を投与した群と比較するという実験の結果を適当に作成する．代謝経路はKEGGのデータベースから適当に名前を充てがっておく．\nset.seed(100) data.df1 \u0026lt;- data.frame( Pathwayname = c(\u0026#34;Cysteine and methionine metabolism\u0026#34;,\u0026#34;Histidine metabolism\u0026#34;,\u0026#34;Glucosinolate biosynthesis\u0026#34;,\u0026#34;Novobiocin biosynthesis\u0026#34;,\u0026#34;Phenylpropanoid biosynthesis\u0026#34;,\u0026#34;Pentose phosphate pathway\u0026#34;,\u0026#34;Cell cycle - yeast\u0026#34;,\u0026#34;Mineral absorption\u0026#34;,\u0026#34;Protein digestion and absorption\u0026#34;,\u0026#34;Type II diabetes mellitus\u0026#34;,\u0026#34;Insulin secretion\u0026#34;,\u0026#34;Carbon fixation in photosynthetic organisms\u0026#34;,\u0026#34;Photosynthesis\u0026#34;,\u0026#34;Peptidoglycan biosynthesis\u0026#34;,\u0026#34;Synthesis and degradation of ketone bodies\u0026#34;,\u0026#34;Cyanoamino acid metabolism\u0026#34;,\u0026#34;D-Glutamine and D-glutamate metabolism\u0026#34;,\u0026#34;Taurine and hypotaurine metabolism\u0026#34;,\u0026#34;GABAergic synapse\u0026#34;,\u0026#34;Retrograde endocannabinoid signaling\u0026#34;,\u0026#34;Synaptic vesicle cycle\u0026#34;,\u0026#34;Pyrimidine metabolism\u0026#34;,\u0026#34;HIF-1 signaling pathway\u0026#34;,\u0026#34;Morphine addiction\u0026#34;,\u0026#34;Nicotine addiction\u0026#34;,\u0026#34;Aminoacyl-tRNA biosynthesis\u0026#34;), C = rnorm(26, mean = 0, sd = 0.1), # C: control OneH = rnorm(26, mean = 2, sd = 2), FiveH = rnorm(26, mean = 2, sd = 5), TwH = rnorm(26, mean = 4, sd = 10), TFH = rnorm(26, mean = 5, sd = 20)) data.df1 levels(data.df1$Pathwayname) Pathwayname C OneH 1 Cysteine and methionine metabolism -0.050219235 0.5595569 2 Histidine metabolism 0.013153117 2.4618891 3 Glucosinolate biosynthesis -0.007891709 -0.3154589 4 Novobiocin biosynthesis 0.088678481 2.4941520 5 Phenylpropanoid biosynthesis 0.011697127 1.8177729 6 Pentose phosphate pathway 0.031863009 5.5147512 7 Cell cycle - yeast -0.058179068 1.7241408 8 Mineral absorption 0.071453271 1.7776130 9 Protein digestion and absorption -0.082525943 0.6199714 10 Type II diabetes mellitus -0.035986213 1.5564115 11 Insulin secretion 0.008988614 2.3658154 12 Carbon fixation in photosynthetic organisms 0.009627446 2.8346466 13 Photosynthesis -0.020163395 4.1308047 14 Peptidoglycan biosynthesis 0.073984050 3.9404040 15 Synthesis and degradation of ketone bodies 0.012337950 1.7967415 16 Cyanoamino acid metabolism -0.002931671 4.8064070 17 D-Glutamine and D-glutamate metabolism -0.038885425 -1.5535513 18 Taurine and hypotaurine metabolism 0.051085626 3.2457348 19 GABAergic synapse -0.091381419 0.9554333 20 Retrograde endocannabinoid signaling 0.231029682 4.6444619 21 Synaptic vesicle cycle -0.043808998 1.2731193 22 Pyrimidine metabolism 0.076406062 4.6381315 23 HIF-1 signaling pathway 0.026196129 2.0875581 24 Morphine addiction 0.077340460 -1.7573118 25 Nicotine addiction -0.081437912 1.1058756 26 Aminoacyl-tRNA biosynthesis -0.043845057 -1.4771959 FiveH TwH TFH 1 2.8943242 14.0845187 -24.1598745 2 11.4873285 -16.7440475 -3.0061184 3 -9.3596274 12.9682227 -10.5283457 4 6.9023207 3.5000423 -2.3859302 5 -4.9941281 -9.4534931 29.8020292 6 11.1243621 -15.3121153 2.8513238 7 8.9064936 11.0958158 8.4518701 8 -2.1942594 2.4209497 10.0920254 9 0.6900211 6.1636787 -7.2906766 10 1.6557799 12.1736208 -23.5843019 11 0.1055822 21.2717575 -1.6195087 12 14.9097946 2.9622971 7.5677213 13 2.6491707 -1.5712229 25.3623998 14 -1.5651249 18.2830143 -0.1114738 15 5.1899712 -4.9295740 -1.0508202 16 3.0084580 -7.5757124 37.3038137 17 1.6504153 -1.3029645 -10.4742671 18 1.5375506 28.4568276 13.4800480 19 4.2445164 -4.3249580 -6.6789396 20 -3.3217784 8.1351985 13.3007136 21 -3.8120966 -7.7868314 -25.9052331 22 10.2426087 -7.7403476 -5.3749901 23 -8.3104801 0.6707665 -0.5958311 24 2.0637486 17.6311371 25.1491476 25 -3.4376417 -0.6914734 -4.3913991 26 3.3526975 12.4287563 10.9579408 [1] \u0026#34;Aminoacyl-tRNA biosynthesis\u0026#34; [2] \u0026#34;Carbon fixation in photosynthetic organisms\u0026#34; [3] \u0026#34;Cell cycle - yeast\u0026#34; [4] \u0026#34;Cyanoamino acid metabolism\u0026#34; [5] \u0026#34;Cysteine and methionine metabolism\u0026#34; [6] \u0026#34;D-Glutamine and D-glutamate metabolism\u0026#34; [7] \u0026#34;GABAergic synapse\u0026#34; [8] \u0026#34;Glucosinolate biosynthesis\u0026#34; [9] \u0026#34;HIF-1 signaling pathway\u0026#34; [10] \u0026#34;Histidine metabolism\u0026#34; [11] \u0026#34;Insulin secretion\u0026#34; [12] \u0026#34;Mineral absorption\u0026#34; [13] \u0026#34;Morphine addiction\u0026#34; [14] \u0026#34;Nicotine addiction\u0026#34; [15] \u0026#34;Novobiocin biosynthesis\u0026#34; [16] \u0026#34;Pentose phosphate pathway\u0026#34; [17] \u0026#34;Peptidoglycan biosynthesis\u0026#34; [18] \u0026#34;Phenylpropanoid biosynthesis\u0026#34; [19] \u0026#34;Photosynthesis\u0026#34; [20] \u0026#34;Protein digestion and absorption\u0026#34; [21] \u0026#34;Pyrimidine metabolism\u0026#34; [22] \u0026#34;Retrograde endocannabinoid signaling\u0026#34; [23] \u0026#34;Synaptic vesicle cycle\u0026#34; [24] \u0026#34;Synthesis and degradation of ketone bodies\u0026#34; [25] \u0026#34;Taurine and hypotaurine metabolism\u0026#34; [26] \u0026#34;Type II diabetes mellitus\u0026#34; Pathwaynameのlevelsを変更する．KEGG orthologyに合わせた配置にするためである．\ndata.df1$Pathwayname \u0026lt;- factor(data.df1$Pathwayname, levels = c(\u0026#34;Aminoacyl-tRNA biosynthesis\u0026#34;, \u0026#34;Nicotine addiction\u0026#34;, \u0026#34;Morphine addiction\u0026#34;, \u0026#34;HIF-1 signaling pathway\u0026#34;, \u0026#34;Pyrimidine metabolism\u0026#34;, \u0026#34;Synaptic vesicle cycle\u0026#34;, \u0026#34;Retrograde endocannabinoid signaling\u0026#34;, \u0026#34;GABAergic synapse\u0026#34;, \u0026#34;Taurine and hypotaurine metabolism\u0026#34;, \u0026#34;D-Glutamine and D-glutamate metabolism\u0026#34;, \u0026#34;Cyanoamino acid metabolism\u0026#34;, \u0026#34;Synthesis and degradation of ketone bodies\u0026#34;, \u0026#34;Peptidoglycan biosynthesis\u0026#34;, \u0026#34;Photosynthesis\u0026#34;, \u0026#34;Carbon fixation in photosynthetic organisms\u0026#34;, \u0026#34;Insulin secretion\u0026#34;, \u0026#34;Type II diabetes mellitus\u0026#34;, \u0026#34;Protein digestion and absorption\u0026#34;, \u0026#34;Mineral absorption\u0026#34;, \u0026#34;Cell cycle - yeast\u0026#34;, \u0026#34;Pentose phosphate pathway\u0026#34;, \u0026#34;Phenylpropanoid biosynthesis\u0026#34;, \u0026#34;Novobiocin biosynthesis\u0026#34;, \u0026#34;Glucosinolate biosynthesis\u0026#34;, \u0026#34;Histidine metabolism\u0026#34;, \u0026#34;Cysteine and methionine metabolism\u0026#34;), labels = c(\u0026#34;Aminoacyl-tRNA biosynthesis\u0026#34;, \u0026#34;Nicotine addiction\u0026#34;, \u0026#34;Morphine addiction\u0026#34;, \u0026#34;HIF-1 signaling pathway\u0026#34;, \u0026#34;Pyrimidine metabolism\u0026#34;, \u0026#34;Synaptic vesicle cycle\u0026#34;, \u0026#34;Retrograde endocannabinoid signaling\u0026#34;, \u0026#34;GABAergic synapse\u0026#34;, \u0026#34;Taurine and hypotaurine metabolism\u0026#34;, \u0026#34;D-Glutamine and D-glutamate metabolism\u0026#34;, \u0026#34;Cyanoamino acid metabolism\u0026#34;, \u0026#34;Synthesis and degradation of ketone bodies\u0026#34;, \u0026#34;Peptidoglycan biosynthesis\u0026#34;, \u0026#34;Photosynthesis\u0026#34;, \u0026#34;Carbon fixation in photosynthetic organisms\u0026#34;, \u0026#34;Insulin secretion\u0026#34;, \u0026#34;Type II diabetes mellitus\u0026#34;, \u0026#34;Protein digestion and absorption\u0026#34;, \u0026#34;Mineral absorption\u0026#34;, \u0026#34;Cell cycle - yeast\u0026#34;, \u0026#34;Pentose phosphate pathway\u0026#34;, \u0026#34;Phenylpropanoid biosynthesis\u0026#34;, \u0026#34;Novobiocin biosynthesis\u0026#34;, \u0026#34;Glucosinolate biosynthesis\u0026#34;, \u0026#34;Histidine metabolism\u0026#34;, \u0026#34;Cysteine and methionine metabolism\u0026#34;)) levels(data.df1$Pathwayname) [1] \u0026#34;Aminoacyl-tRNA biosynthesis\u0026#34; [2] \u0026#34;Nicotine addiction\u0026#34; [3] \u0026#34;Morphine addiction\u0026#34; [4] \u0026#34;HIF-1 signaling pathway\u0026#34; [5] \u0026#34;Pyrimidine metabolism\u0026#34; [6] \u0026#34;Synaptic vesicle cycle\u0026#34; [7] \u0026#34;Retrograde endocannabinoid signaling\u0026#34; [8] \u0026#34;GABAergic synapse\u0026#34; [9] \u0026#34;Taurine and hypotaurine metabolism\u0026#34; [10] \u0026#34;D-Glutamine and D-glutamate metabolism\u0026#34; [11] \u0026#34;Cyanoamino acid metabolism\u0026#34; [12] \u0026#34;Synthesis and degradation of ketone bodies\u0026#34; [13] \u0026#34;Peptidoglycan biosynthesis\u0026#34; [14] \u0026#34;Photosynthesis\u0026#34; [15] \u0026#34;Carbon fixation in photosynthetic organisms\u0026#34; [16] \u0026#34;Insulin secretion\u0026#34; [17] \u0026#34;Type II diabetes mellitus\u0026#34; [18] \u0026#34;Protein digestion and absorption\u0026#34; [19] \u0026#34;Mineral absorption\u0026#34; [20] \u0026#34;Cell cycle - yeast\u0026#34; [21] \u0026#34;Pentose phosphate pathway\u0026#34; [22] \u0026#34;Phenylpropanoid biosynthesis\u0026#34; [23] \u0026#34;Novobiocin biosynthesis\u0026#34; [24] \u0026#34;Glucosinolate biosynthesis\u0026#34; [25] \u0026#34;Histidine metabolism\u0026#34; [26] \u0026#34;Cysteine and methionine metabolism\u0026#34; データの整形を行う．reshapeのmeltでlong formatのデータにする．\nlibrary(reshape) data_melt.df1 \u0026lt;- melt(data.df1) head(data_melt.df1) Using Pathwayname as id variables Pathwayname variable value 1 Cysteine and methionine metabolism C -0.050219235 2 Histidine metabolism C 0.013153117 3 Glucosinolate biosynthesis C -0.007891709 4 Novobiocin biosynthesis C 0.088678481 5 Phenylpropanoid biosynthesis C 0.011697127 6 Pentose phosphate pathway C 0.031863009 これで解析用のデータが出来上がった．\nPlot vertical line graph いきなり，Pathwaynameをy軸に設定すると全てのポイントが連結されたグラフになってしまうので，まず，Pathwaynameをｘ軸に設定して折れ線グラフを描く．\nlibrary(ggplot2) LinePlot_H \u0026lt;- ggplot(data_melt.df1, aes(x = Pathwayname, y = value, group = variable)) + theme_bw() LinePlot_H + geom_line(aes(colour = variable))     Flip the plot so that horizontal becomes vertical with coord_flip 勿論，これではダメなので，coord_flipでｘ軸とｙ軸をひっくり返す．また，色もかえる．さらに，x軸とy軸のタイトルを除き，凡例を中に入れて，そのタイトルを除く．\nLinePlot_V \u0026lt;- ggplot(data_melt.df1, aes(x = Pathwayname, y = value, group = variable)) + theme_bw() P1 \u0026lt;- LinePlot_V + geom_line(aes(colour = variable)) + scale_color_manual(values = c(\u0026#34;black\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;red\u0026#34;)) + xlab(\u0026#34;\u0026#34;) + ylab(\u0026#34;\u0026#34;) + coord_flip() P1 + theme(legend.position = c(0.9, 0.7)) + theme(legend.title = element_blank())     Add annotation box by geom_rect とりあえずは，それなりの縦向き折れ線グラフが出来上がった．このグラフに注釈ボックスをつけてみる．試行錯誤の結果，ggplot2の場合，geom_rectを使用すれば良いことがわかった．\nReferences  What is a good way to fit text inside a plotting area with ggplot2 using a pre-defined width for the text? ggplot2 Quick Reference: geom_rect Adding multiple shadows/rectangles to ggplot2 graph  まず，注釈ボックスとするrectangle用のデータを用意する．\nrect1 \u0026lt;- data.frame (xmin=24.55, xmax=26.75, ymin=40, ymax=90, text = data_melt.df1[1,1]) rect2 \u0026lt;- data.frame (xmin=21.55, xmax=24.45, ymin=40, ymax=90, text = data_melt.df1[2,1]) rect3 \u0026lt;- data.frame (xmin=20.55, xmax=21.45, ymin=40, ymax=90, text = data_melt.df1[3,1]) rect4 \u0026lt;- data.frame (xmin=19.55, xmax=20.45, ymin=40, ymax=90, text = data_melt.df1[4,1]) rect5 \u0026lt;- data.frame (xmin=17.55, xmax=19.45, ymin=40, ymax=90, text = data_melt.df1[5,1]) rect6 \u0026lt;- data.frame (xmin=16.55, xmax=17.45, ymin=40, ymax=90, text = data_melt.df1[6,1]) rect7 \u0026lt;- data.frame (xmin=15.55, xmax=16.45, ymin=40, ymax=90, text = data_melt.df1[7,1]) rect8 \u0026lt;- data.frame (xmin=13.55, xmax=15.45, ymin=40, ymax=90, text = data_melt.df1[8,1]) rect9 \u0026lt;- data.frame (xmin=12.55, xmax=13.45, ymin=40, ymax=90, text = data_melt.df1[9,1]) rect10 \u0026lt;- data.frame (xmin=11.55, xmax=12.45, ymin=40, ymax=90, text = data_melt.df1[10,1]) rect11 \u0026lt;- data.frame (xmin=8.55, xmax=11.45, ymin=40, ymax=90, text = data_melt.df1[11,1]) rect12 \u0026lt;- data.frame (xmin=5.55, xmax=8.45, ymin=40, ymax=90, text = data_melt.df1[12,1]) rect13 \u0026lt;- data.frame (xmin=4.55, xmax=5.45, ymin=40, ymax=90, text = data_melt.df1[13,1]) rect14 \u0026lt;- data.frame (xmin=3.55, xmax=4.45, ymin=40, ymax=90, text = data_melt.df1[14,1]) rect15 \u0026lt;- data.frame (xmin=1.55, xmax=3.45, ymin=40, ymax=90, text = data_melt.df1[15,1]) rect16 \u0026lt;- data.frame (xmin=0, xmax=1.45, ymin=40, ymax=90, text = data_melt.df1[16,1]) Remove right margin with expand=c(0,0) ボックスの右端を90にしたので，グラフがはみ出さないように，scale_y_continuousを用いて，expand=c(0,0)で余白を省き，limitsで軸の範囲を指定する．凡例の位置も変え，背景を透明にして，フォントサイズも小さくする．\nP2 \u0026lt;- P1 + theme(legend.position = c(0.0825, 0.43)) + theme(legend.title = element_blank(), legend.text = element_text(size = 6), legend.background = element_blank()) # legendの背景を透明にする P2 P3 \u0026lt;- P2 + geom_rect(data=rect1, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect2, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect3, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect4, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect5, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect6, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect7, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect8, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect9, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect10, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect11, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect12, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect13, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect14, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect15, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) + geom_rect(data=rect16, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=\u0026#34;grey90\u0026#34;, alpha=1, color=\u0026#34;black\u0026#34;, lwd = 0.25, inherit.aes = FALSE) P3 + scale_y_continuous(expand=c(0,0), limits = c(-30, 90))     customize tick marks with limits and breaks of scale_y_continuous ggplot2 axis ticks : A guide to customize tick marks and labels\nticksを指定する．範囲も指定する．scale_y_continuousのlimitsとbreaksは別々に書くとお互いを上書きするので，同じ () の中で書くようにすると両方ともが効くようになる．\nR ggplot2 scale_y_continuous : Combining breaks \u0026amp; limits\nP4 \u0026lt;- P3 + scale_y_continuous(expand=c(0,0), limits = c(-30, 90), breaks=c(-20, 0, 20, 40)) P4     これで空白の注釈用ボックスができた．\nAdd KEGG orthology (KO) ggplot2 Quick Reference: geom_rect\n上記サイトを参考にして，空白のボックスに該当するKOを記入する．\nP4 + geom_text(data = rect1, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Amino acid metabolism\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect2, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Biosynthesis of \\n other secondary metabolites\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect3, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Carbohydrate metabolism\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect4, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Cell growth and death\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect5, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Digestive system\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect6, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Endocrine and metabolic disease\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect7, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Endocrine system\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect8, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Energy metabolism\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect9, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Glycan biosynthesis and metabolism\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect10, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Lipid metabolism\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect11, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Metabolism of other amino acids\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect12, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Nervous system\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect13, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Nucleotide metabolism\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect14, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Signal transduction\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect15, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Substance dependence\u0026#34;), inherit.aes = FALSE, size = 2.4) + geom_text(data = rect16, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= \u0026#34;Translation\u0026#34;), inherit.aes = FALSE, size = 2.4)     ようやく完成である．この方法は他のタイプのグラフにも使えると思う．もっと簡単な方法があれば良いのだが．．．\n","date":1561820400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562241537,"objectID":"637a1374a24ab2c123d2002fd6532d0a","permalink":"/post/annotation/","publishdate":"2019-06-30T00:00:00+09:00","relpermalink":"/post/annotation/","section":"post","summary":"またまたRネタである．グラフに注釈をつけたくなることがあるが，なかなか見映えのする注釈をつけるのは難しい．最近，それなりの方法を見つけたので，まとめておく．例として，代謝経路の変化を縦型の折れ線グラフで描きKEGG orthologyによって分類したグラフを作成してみる．うーむ，自分で書いていてなんだが，マニアックなネタである．．．(^^;;;\n","tags":["R","ggplot2","annotation","box","vertical","line","plot"],"title":"How to add annotation (ex. KEGG orthology) box to a plot in ggplot2","type":"post"},{"authors":null,"categories":null,"content":"前回久しぶりに記事を投稿したが，しばらく更新していない間に，いくつか細かな環境修正が必要であったので，落ち穂拾いとしてまとめておく．\n Table of Contents  display-line-numbers Whitespace-mode iTerm2の権限の変更（mojaveで必要） iTerm2のColor Schemeが効かない    display-line-numbers emacs 26から入った行番号を表示させる機能．\n Ref 1: emacs 26で入ったdisplay-line-numbersを利用する Ref 2: LineNumbers Ref 3: Emacs26のdisplay-line-numbers-modeがlinum-modeよりちょっと速くて快適になりそう Ref 4: Emacsの行番号表示にモヤモヤした話  設定は，いつものように，init.orgに下記のとおりに書き込めばよい．\n#+begin_src emacs-lisp (global-display-line-numbers-mode) #+end_src これでもう行番号を表示していても重くならない．表示領域を確保するための設定も不要である．実際の表示状況は下の画像のとおりである．nlinum-modeの設定は削除した．\n   行番号に必要な表示領域は自動的に確保される．3桁，4桁の番号になるに連れて表示領域が広くなるのが上の画像からわかるであろう．また，adaptive-wrapによって折り畳まれている行は行番号が空白になって1行であることがわかるようになっている（383行目）．\nWhitespace-mode かなり前から，Emacsの長い行の途中でフォントの色が赤くなってしまうようになった．つまり，下の画像のようになってしまう．短い行でもフォントが赤くなってるな．．．\n   何が原因かよくわからなかったのだが，redditのHow do I stop Emacs from coloring text beyond 80 columns differentlyを読んで，もしかしたら，whitespace-modeのせいかもしれないと思ってやってみたらドンピシャであった．M-x customizeとして，Whitespace Styleをサーチして，(Face) Lines, only overlong partのチェックを外せばよい．下の画像の矢印で示した部分である．\n   下に，設定変更後の上の画像と同じところを示すが，行の途中でフォントの色が変わらなくなっている．これで目がおかしくなりそうな画面からようやく離れることができた．😀\n   iTerm2の権限の変更（mojaveで必要） 以前の記事（Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする）の中で，directoryの内容が変更されると，自動でhtmlを再読込するwatch_safari.rbというスクリプトを紹介した．しかし，mojaveにupgradeしたあとは\n85:141: execution error: System Eventsでエラーが起きました: osascriptにはキー操作の送信は許可されません。 (1002) というエラーを吐いて，自動更新しなくなってしまった．調べてみると，mojaveでユーザーのデータや個人情報を保護するための機能が強化された結果であった．\n Ref 1: macOS Mojaveでのアプリケーションの権限、アクセシビリティとフルディスクアクセスの違いは何か？ Ref 2: macOS MojaveでiTerm2を利用する場合にフルディスクアクセスを許可する方法 Ref 3: MacのターミナルやiTermでOperation not permittedが出る場合の対処法 Ref 4: Why Full Disk Access is Useful for iTerm2  AccessibilityとFull Disk Accessのいずれか，あるいは，両方を変更すればよい．試してみた結果，iTerm2にFull Disk Accessを許可しても自動更新しないが，Accessiblityで「アプリケーションにコンピュータの制御を許可」すれば自動更新することがわかった．「システム環境設定」\u0026gt;「セキュリティ＆プライバシー」の「プライバシー」タブに行き，下の画像にあるように，iTerm2にcheckを入れればよい．\n   crontabが働き，~/Library/Safari folderへのアクセスができるように，iTerm2にFull Disk Accessも与えておいた．方法は，上記とほぼ同じで，「プライバシー」タブに行き，フルディスクアクセスを選択し，iTerm2にcheckを入れればよい．\niTerm2のColor Schemeが効かない いつのまにかiTerm2のcolor schemeを変えても反映されなくなってしまった．ネットを探ると，同じようなことで悩んでいる人が結構いるようで，すぐに解決法が見つかった．\n Ref: Profile colors won't change  上記のサイトによれば，terminal windowがprofileと連絡を失ってしまったことが原因とのことで，iTerm2の Session \u0026gt; Edit Sessionで下の画像のようにdialogue boxがpop upするので，そこで，好きなcolor scheme (下の画像ではJapanesque) を選択し，右下のUse Selected Profileをクリックすればよい．\n   これでリンクが再確立される．\n","date":1559401200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560003385,"objectID":"2dc2ba7e9ceb6e7aba19b28aff082be1","permalink":"/post/gleanings/","publishdate":"2019-06-02T00:00:00+09:00","relpermalink":"/post/gleanings/","section":"post","summary":"前回久しぶりに記事を投稿したが，しばらく更新していない間に，いくつか細かな環境修正が必要であったので，落ち穂拾いとしてまとめておく．\n","tags":["line-number","whitespace","thunderbird","emacs","iTerm2","accessibility"],"title":"Gleanings (display-line-numbers, whitespace-mode, accessibility of iTerm2, etc)","type":"post"},{"authors":null,"categories":null,"content":"次世代grepで最速と言われるripgrepをバックエンドとするEmacs用検索ツールであるdeadgrepをインストールしてみた．\n Table of Contents  Ref Install How to use  2019年6月2日追記      Ref  deadgrep: use ripgrep from Emacs ご本家 複雑になった時使うツール とても勉強になるサイト，こちらを読めば本サイトは読まなくても良いような．．．  Install まず，バックエンドのripgrepをインストールする．brewを使えば簡単である．\n$ brew install ripgrep ついで，以下のようにinit.orgに書き込んでMRLPAからdeadgrep.elをインストールする．f5にキーバインドしておく．\n#+begin_src emacs-lisp (use-package deadgrep :ensure t :config (global-set-key (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;) #\u0026#39;deadgrep) ) #+end_src How to use 使用方法の詳細はご本家に書いてあるが，f5を叩いて，検索キーワードを入れるだけである．下の画像は，このブログのあるdirectoryで，「検索」をキーワードとしてdeadgrepを走らせたところである．defaultでdirectory内を再帰的に検索する．キーワードは青くハイライトされており，左端の数字はその文書での行番号である． o を叩くと下のバッファに該当箇所にカーソルがある状態でその文書が開く． C-c C-k で検索を止めることができる．また，swiperとの併用も可能である．\n   一番上のSearch termの行のchangeにカーソルを持っていってReturnすると，Minibufferで検索語を変更できる．その下にあるSearch type, Case, Context, Directory, Filesも同様に条件を変更できる．とくに，Directoryは適切なものを選ばないと巨大なデータを検索することになってしまうので注意が必要である．\n個人的には，swiperでほぼ事足りているのだが，大きなプロジェクト内の複数のファイルを一気に検索する必要がある人には非常に有益なツールだと思う．\n2019年6月2日追記 上記のように自分にはあまり役に立たないようなことを書いたが，早速，deadgrepが役に立ったので追記しておく．hyperestraierで全文検索をしようとして，H@estfxpdftohtml というコマンドを使おうとしたのだが，うまくいかず，その原因を探るために，/usr/local/で，H@estfxpdftohtmlをSearch termとして，deadgrepを下の画像のように走らせてみたところ，下側のバッファにあるように，一発で原因が判明してしまった．要するに，xpdfが必要ということであった．なるほど，こういう風に使うのかと納得した．\n   なお，全文検索については，いずれ別の機会にまとめてみたい．\n","date":1559314800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559462885,"objectID":"4e6ebe21b4b88e3e37745c7076c339fa","permalink":"/post/deadgrep/","publishdate":"2019-06-01T00:00:00+09:00","relpermalink":"/post/deadgrep/","section":"post","summary":"次世代grepで最速と言われるripgrepをバックエンドとするEmacs用検索ツールであるdeadgrepをインストールしてみた．\n Table of Contents  Ref Install How to use  2019年6月2日追記      Ref  deadgrep: use ripgrep from Emacs ご本家 複雑になった時使うツール とても勉強になるサイト，こちらを読めば本サイトは読まなくても良いような．．．  Install まず，バックエンドのripgrepをインストールする．brewを使えば簡単である．\n$ brew install ripgrep ついで，以下のようにinit.orgに書き込んでMRLPAからdeadgrep.elをインストールする．f5にキーバインドしておく．\n#+begin_src emacs-lisp (use-package deadgrep :ensure t :config (global-set-key (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;) #\u0026#39;deadgrep) ) #+end_src How to use 使用方法の詳細はご本家に書いてあるが，f5を叩いて，検索キーワードを入れるだけである．下の画像は，このブログのあるdirectoryで，「検索」をキーワードとしてdeadgrepを走らせたところである．defaultでdirectory内を再帰的に検索する．キーワードは青くハイライトされており，左端の数字はその文書での行番号である． o を叩くと下のバッファに該当箇所にカーソルがある状態でその文書が開く． C-c C-k で検索を止めることができる．また，swiperとの併用も可能である．\n   一番上のSearch termの行のchangeにカーソルを持っていってReturnすると，Minibufferで検索語を変更できる．その下にあるSearch type, Case, Context, Directory, Filesも同様に条件を変更できる．とくに，Directoryは適切なものを選ばないと巨大なデータを検索することになってしまうので注意が必要である．\n個人的には，swiperでほぼ事足りているのだが，大きなプロジェクト内の複数のファイルを一気に検索する必要がある人には非常に有益なツールだと思う．\n2019年6月2日追記 上記のように自分にはあまり役に立たないようなことを書いたが，早速，deadgrepが役に立ったので追記しておく．hyperestraierで全文検索をしようとして，H@estfxpdftohtml というコマンドを使おうとしたのだが，うまくいかず，その原因を探るために，/usr/local/で，H@estfxpdftohtmlをSearch termとして，deadgrepを下の画像のように走らせてみたところ，下側のバッファにあるように，一発で原因が判明してしまった．要するに，xpdfが必要ということであった．なるほど，こういう風に使うのかと納得した．","tags":["deadgrep","ripgrep","search","emacs"],"title":"Deadgrep","type":"post"},{"authors":null,"categories":null,"content":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"いやー，めでたい．ついに，TexLive 2019がreleaseされた．それにしても，TeXってこんなに人気があったのだ．世の中がみんなお祝いしてる，凄いぞ，TeX．．．．と思ったら，全然違った．．．これでまた年齢計算が複雑になる．システム担当者は大変である．まぁ，西暦を使用すればいいだけの話ではあるが．．．．．というわけで，今回はTeXの話，ではなくて，ブログのCodeBlockの長い行がwrapされるのは２行と間違うことがあるので，scrollbarをつけましょうという話である．\n Table of Contents  Wrap or scroll? How to add horizontal scrollbar  Ref academic theme version cssの変更      Wrap or scroll? 以前の記事でも触れたように（How to automatically embed R plot in blog created by Hugo via ox-hugo），このサイトは，ox-hugoというorg-modeのパッケージで書いて，Hugoという静的サイトジェネレーター（themeはacademic）で作っているのだが，code blockの長い行がwrapされて，つまり，折り畳まれて表示されるようになっていた．Rのcodeで示してみると，こんな感じである．\n   これは３行のcodeであるが，はっきり言って見にくい．．．．．　行番号を入れるという方法もあるが，それよりもscrollbarをつけて横にスライドさせる方が分かりやすい．つまり，こうである．\nboxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = \u0026#34;\u0026#34;, main = \u0026#34;Drug1\u0026#34;, xaxt=\u0026#34;n\u0026#34;, cex.axis=1.5, ylab=\u0026#34;Relative value\u0026#34;, cex.lab = 1.5, pch=16, cex = 1.5) axis(1,at=c(1,2,3),formatC(c(\u0026#34;Control\u0026#34;, \u0026#34;Day1\u0026#34;, \u0026#34;Day7\u0026#34;)), cex.axis=1.5) beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c(\u0026#34;black\u0026#34;, \u0026#34;green\u0026#34;,\u0026#34;blue\u0026#34;)) これなら，確実に１行を把握できる．\nここ（Fix How Your Blog’s Code is Displayed on Mobile）を見るともっと分かりやすく書いてある．\nHow to add horizontal scrollbar Ref  Fix How Your Blog’s Code is Displayed on Mobile Prevent wrapping in code blocks #467 added horizontal scrolling for code #1  上記のサイトを参考に以下のようにscrollbarをセットアップすることにした．\nacademic theme version まず，Hugoのthemeであるacademic のversionを以下のように調べてみると，\nless themes/academic/data/academic.toml # Academic version = \u0026#34;2.4.0\u0026#34; ふ，古い．latest versionは，4.2である．2018年8月に導入してから8ヶ月ほどで2.4から4.2までreleaseされており，開発スピードが並ではない．それは喜ぶべきことなのだが，問題は，私が全くそれについて行けてないことである．（ToT)\n最新版ではdirectory構造もかなり変わっている．horizontal scrollbarをつけるのを機会に全部をupgradeしようとしてみたが，なかなかうまくいかない．Customize style (CSS) に書いてあるとおりにしようとしても，古いversionでは相当するdirectoryそのものが存在しない．\ncssの変更 というわけで，academic themeのupgradeはサクッと諦めて姑息策を取ることにした． Prevent wrapping in code blocks #467 を参考にして，\n/Data/hogeblog/fugablog/themes/academic/layouts/partials/css/academic.css を /Data/hogeblog/fugablog/static/css/academic_scrollbar.css として保存した．変更箇所は以下の通り\n--- /Data/hogeblog/fugablog/themes/academic/layouts/partials/css/academic.css\t2018-08-16 00:55:10.000000000 +0900 +++ /Data/hogeblog/fugablog/static/css/academic_scrollbar.css\t2019-05-02 00:05:10.000000000 +0900 @@ -178,9 +178,16 @@ border-color: rgb(248, 248, 248); } +/* pre code { */ +/* white-space: pre; /\\* Override Bootstrap to preserve line breaks in code. *\\/ */ +/* overflow-x: auto; */ +/* } */ + +/* See http://seankross.com/notes/css-for-code/ */ pre code { - white-space: pre; /* Override Bootstrap to preserve line breaks in code. */ - overflow-x: auto; + overflow: auto; + word-wrap: normal; + white-space: pre; } hr { これで，ox-hugoでの\n   は，以下のように表示されるようになる．\nboxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = \u0026#34;\u0026#34;, main = \u0026#34;Drug1\u0026#34;, xaxt=\u0026#34;n\u0026#34;, cex.axis=1.5, ylab=\u0026#34;Relative value\u0026#34;, cex.lab = 1.5, pch=16, cex = 1.5) axis(1,at=c(1,2,3),formatC(c(\u0026#34;Control\u0026#34;, \u0026#34;Day1\u0026#34;, \u0026#34;Day7\u0026#34;)), cex.axis=1.5) beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c(\u0026#34;black\u0026#34;, \u0026#34;green\u0026#34;,\u0026#34;blue\u0026#34;)) -nをつけて行番号をつけると\n   こうなる．\n1 2 3  boxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = \u0026#34;\u0026#34;, main = \u0026#34;Drug1\u0026#34;, xaxt=\u0026#34;n\u0026#34;, cex.axis=1.5, ylab=\u0026#34;Relative value\u0026#34;, cex.lab = 1.5, pch=16, cex = 1.5) axis(1,at=c(1,2,3),formatC(c(\u0026#34;Control\u0026#34;, \u0026#34;Day1\u0026#34;, \u0026#34;Day7\u0026#34;)), cex.axis=1.5) beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c(\u0026#34;black\u0026#34;, \u0026#34;green\u0026#34;,\u0026#34;blue\u0026#34;))   \nなんとか，これで，code blockにhorizontal scrollbarをつけることができた．次に時間ができたときにacademic themeをupgradeして追いつこう．．．いつになることやら．．．(^^;;;;;;\n","date":1556722800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556969306,"objectID":"1c43e3b057f8dacc03596b73cf559922","permalink":"/post/horizontal_scrollbar/","publishdate":"2019-05-02T00:00:00+09:00","relpermalink":"/post/horizontal_scrollbar/","section":"post","summary":"いやー，めでたい．ついに，TexLive 2019がreleaseされた．それにしても，TeXってこんなに人気があったのだ．世の中がみんなお祝いしてる，凄いぞ，TeX．．．．と思ったら，全然違った．．．これでまた年齢計算が複雑になる．システム担当者は大変である．まぁ，西暦を使用すればいいだけの話ではあるが．．．．．というわけで，今回はTeXの話，ではなくて，ブログのCodeBlockの長い行がwrapされるのは２行と間違うことがあるので，scrollbarをつけましょうという話である．\n Table of Contents  Wrap or scroll? How to add horizontal scrollbar  Ref academic theme version cssの変更      Wrap or scroll? 以前の記事でも触れたように（How to automatically embed R plot in blog created by Hugo via ox-hugo），このサイトは，ox-hugoというorg-modeのパッケージで書いて，Hugoという静的サイトジェネレーター（themeはacademic）で作っているのだが，code blockの長い行がwrapされて，つまり，折り畳まれて表示されるようになっていた．Rのcodeで示してみると，こんな感じである．\n   これは３行のcodeであるが，はっきり言って見にくい．．．．．　行番号を入れるという方法もあるが，それよりもscrollbarをつけて横にスライドさせる方が分かりやすい．つまり，こうである．\nboxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = \u0026#34;\u0026#34;, main = \u0026#34;Drug1\u0026#34;, xaxt=\u0026#34;n\u0026#34;, cex.axis=1.5, ylab=\u0026#34;Relative value\u0026#34;, cex.lab = 1.5, pch=16, cex = 1.5) axis(1,at=c(1,2,3),formatC(c(\u0026#34;Control\u0026#34;, \u0026#34;Day1\u0026#34;, \u0026#34;Day7\u0026#34;)), cex.","tags":["hugo","blog","codeblock","horizontal","scrollbar","academic","theme"],"title":"How to add horizontal scrollbar for codeblock in academic theme of hugo","type":"post"},{"authors":null,"categories":null,"content":"世はゴールデンウィークまっただ中である．完全な10連休ではないが，それなりに長い休みとなるので，この機会に，ようやく Sierraから Mojave にupgradeすることにした．ついでにEmacsも26.1から 26.2にupgradeした．今回は，このupgradeの際に遭遇したトラブルについてまとめる．\n Table of Contents  Upgrade to Mojave from Sierra Upgrade to Xcode 10.2.1 Upgrade to Emacs 26.2 from 26.1 LaTeX  pdfにフォントが埋め込まれているかどうかを確認する方法   感想    Upgrade to Mojave from Sierra Ref: macOS Mojave にアップグレードする方法\n結論から言うと，拍子抜けするぐらい簡単であった．AppStoreで適当にクリックするとすぐにMojaveがダウンロードされて，インストーラーが起動した．これをクリックしてインストールを始めると，此処から先は完全自動状態で，ひたすら待った．というか，違うことをしていた．何回も再起動していたようだが，実際には1時間ぐらいで終了したような気がする．手間いらずであった．R, Rstudio, ImageJ, Emacs, LaTeXが動いて画像編集，動画編集ができれば，とりあえず文句はないので，まずそのあたりをチェックしてみると，R, Rstudio, ImageJ, 画像編集，動画編集は問題なく動いた．EmacsとLaTeXについては以下に述べる．\nUpgrade to Xcode 10.2.1 早速brewでemacsをupgradeしようとしたのだが，xcodeが古いと叱られたので，まず，xcodeをApp Storeからupgradeした．そして brew install すると以下のようなエラーが出る．\n$ brew install hogehoge ......... xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun これは，「macOS を Mojave にあげた後に Homebrew を使うとエラーが出る問題」にあるようにcommand line developer toolsを再インストールすれば直る．同サイトに詳細が記載されている．\nxcode-select --install さぁ，これでようやくと思って，再度 brew install すると，またもエラーである\u0026hellip;..(ToT)\n$ brew install hogehoge .......... Error: parent directory is world writable but not sticky Please report this bug: https://docs.brew.sh/Troubleshooting 調べてみるとpermissionの問題で，tmp directoryの状態を調べれば良いことがわかった．\nRef 1: brew で `Error: parent directory is world writable but not sticky` Ref 2: Error: parent directory is world writable but not sticky 上記サイトの記載に従って，ls -ld /tmpを行うと以下のようになる．\n$ ls -ld /tmp lrwxr-xr-x@ 1 root wheel 11 4 27 18:45 /tmp@ -\u0026gt; private/tmp これは，tmp directoryはprivate/tmpを使用しているということであり，以下のようにしてpermissionを付与する．\n$ sudo chmod +t /private/tmp 私の場合はこれでbrewが働くようになった．これらの操作は，今後のmajor upgradeの際にはまた必要になりそうなので，ここにまとめておく．\nUpgrade to Emacs 26.2 from 26.1 ようやくEmacsのupgradeである．mojaveにupgradeした直後にemacs26.1を起動してみるとキーが効かなかったような気がするが，26.2にupgradeするので，気にせず先に進んだ\u0026hellip;..(^^;;;　以前の記事（Emacsのインストール）に書いたようにhomebrewでemacs-macを入れればよいのだが，念の為に単なるupgradeは避けて，Emacs 26.1をuninstallし，~/.emac.dも退避させてから，インストールし直すことにした．Emacs Mac Portの最終更新はわずか2週間前でありいろいろな問題が解決されていると期待してのupgradeである．\n$ cd $ mv .emacs.d .emac.d.old # change name of old .emacs.d $ brew tap railwaycat/emacsmacport $ brew uninstall emacs-mac # uninstall old emacs-mac $ brew install emacs-mac --with-modern-icon --with-imagemagick # install new emacs-mac $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications これで，\n/usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1 (4,009 files, 114.6MB) から /usr/local/Cellar/emacs-mac/emacs-26.2-z-mac-7.6 (4,010 files, 114.8MB) へのupgradeが終了した．\nあとは，以前に書いた以下の記事に従ってセットアップした．\nEmacsの設定（その1）Preludeの導入（2018年10月9日修正） Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など\nLaTeX これについては，以前の記事「LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）」で書いたとおり MacTeX 2018 のままである．正確に言うと，mojaveにupgradeする直前に以下のようにして最新版にアップデートしておいた．\n$ sudo tlmgr update --self --all 400個ぐらいのパッケージのアップデートに30-40分を要した．\nヒラギノフォントの埋め込み についても上述の記事に書いたように，既に，bibunsho7-patchを適応済みなので，問題ないと考えた．\nmojaveにupgradeしてから，latexmkによるcompileやorg-modeからのlatex exportなどを試してみたが，pdfの生成に特に問題なく，また，pdfへのヒラギノフォントの埋め込みも問題なくできていた．\npdfにフォントが埋め込まれているかどうかを確認する方法   Ref:PDFのフォント埋め込み\n  以下のようにhomebrewでpopplerをインストールすれば，その中の pdffonts というコマンドを使って確認することができる．このpopplerは以前の記事（Emacsでpdfを読む (pdf-tools)）で既にインストールしているが，もう一度書いておく．\n$ brew install poppler   たとえば，latexで生成したhogehoge.pdfのフォントの埋め込みを調べるためには，pdffontsを以下のように使う． emb の項目で埋め込みの有無がわかる．\n$ pdffonts hogehoge.pdf name type encoding emb sub ------------------------------------ ----------------- ---------------- --- --- KQKHHV+LMSans10-Bold Type 1C Custom yes yes JQHYHW+LMRoman17-Regular Type 1C Custom yes yes FENZQQ+HiraMinProN-W3-Identity-H CID Type 0C Identity-H yes yes ZHPQAJ+LMRoman12-Regular Type 1C Custom yes yes BMLTDB+HiraKakuProN-W6-Identity-H CID Type 0C Identity-H yes yes NOWECW+LMRoman12-Regular Type 1C Custom yes yes SIHLPZ+LMRoman8-Regular Type 1C Custom yes yes   確かに，すべてのフォントは emb = yes になっており，埋め込まれているのが確認できた．\n  感想 ネットでは，いろいろ問題ありとの情報が多く様子見をしていたのだが，待ってる間に色々と解決した部分も多いのか，ほとんど大きなトラブルもなくアップグレードできた．なお， Time Machine によるバックアップも問題なくできている．「案ずるより産むが易し」であった．\n","date":1556463600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556635119,"objectID":"c8c5cf44a26c2df365c6bf14e901aefb","permalink":"/post/mojave/","publishdate":"2019-04-29T00:00:00+09:00","relpermalink":"/post/mojave/","section":"post","summary":"世はゴールデンウィークまっただ中である．完全な10連休ではないが，それなりに長い休みとなるので，この機会に，ようやく Sierraから Mojave にupgradeすることにした．ついでにEmacsも26.1から 26.2にupgradeした．今回は，このupgradeの際に遭遇したトラブルについてまとめる．\n Table of Contents  Upgrade to Mojave from Sierra Upgrade to Xcode 10.2.1 Upgrade to Emacs 26.2 from 26.1 LaTeX  pdfにフォントが埋め込まれているかどうかを確認する方法   感想    Upgrade to Mojave from Sierra Ref: macOS Mojave にアップグレードする方法\n結論から言うと，拍子抜けするぐらい簡単であった．AppStoreで適当にクリックするとすぐにMojaveがダウンロードされて，インストーラーが起動した．これをクリックしてインストールを始めると，此処から先は完全自動状態で，ひたすら待った．というか，違うことをしていた．何回も再起動していたようだが，実際には1時間ぐらいで終了したような気がする．手間いらずであった．R, Rstudio, ImageJ, Emacs, LaTeXが動いて画像編集，動画編集ができれば，とりあえず文句はないので，まずそのあたりをチェックしてみると，R, Rstudio, ImageJ, 画像編集，動画編集は問題なく動いた．EmacsとLaTeXについては以下に述べる．\nUpgrade to Xcode 10.2.1 早速brewでemacsをupgradeしようとしたのだが，xcodeが古いと叱られたので，まず，xcodeをApp Storeからupgradeした．そして brew install すると以下のようなエラーが出る．\n$ brew install hogehoge ......... xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun これは，「macOS を Mojave にあげた後に Homebrew を使うとエラーが出る問題」にあるようにcommand line developer toolsを再インストールすれば直る．同サイトに詳細が記載されている．","tags":["Mojave","upgrade","emacs","26-2","homebrew"],"title":"Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew","type":"post"},{"authors":null,"categories":null,"content":"最近Rネタばかり書いていたが，今回は久しぶりのEmacsネタである．org-modeで文書を書いているときに画像を貼り付けたいことがある．そのためには画像ファイルの名前とパスが必要となる．要するに毎回画像ファイルのパスを調べて/hoge/fuga/hogefuga/hugo.jpgというようなことをタイプしなければならず面倒である．そこで，peep-diredの出番である．peep-diredとは，diredでファイルにカーソルを持っていくと中身が見える，すなわち，画像ファイルなら画像が見え，テキストファイルならテキストが読めるというminor modeである．これが画像リンクの貼り付けに便利なのでまとめておく．\n Table of Contents  References peep-diredのインストールと設定 peep-diredの使い方 bjm/ivy-dired-recent-dirs - 最近開けたdirectoryを一覧表示する方法（おまけ）    References  peep-dired QUICKLY PREVIEW IMAGES AND OTHER FILES WITH PEEP-DIRED  peep-diredのインストールと設定 例によって，use-packagを用いて以下のように，init.orgに書けばよい．\n#+begin_src emacs-lisp (use-package peep-dired :ensure t :defer t ; don\u0026#39;t access `dired-mode-map\u0026#39; until `peep-dired\u0026#39; is loaded :bind (:map dired-mode-map (\u0026#34;P\u0026#34; . peep-dired))) #+end_src 設定は上記参照サイトのパクリで，diredで\u0026quot;P\u0026quot;を打つとpeep-dired modeとなってdiredのリストの画像ファイルが見られるようになり，もう一度\u0026quot;P\u0026quot;と打つとpeep-dired modeは終了する．　peep-diredの使い方 File viewerとしてだけなら，どうということはないのだが，org-modeと組み合わせて使うと便利さが増す．たとえば，下図のように画像をおいているdirectoryをdiredで開いて\u0026quot;P\u0026quot;を打ってpeep-dired modeに入り，画像を確かめながら文書に挿入する画像を決める．上段のdiredのバッファにおいてIMG_1996.jpgにカーソルがあり，下段のバッファにその画像が表示されている．画像が決まったらその画像ファイルにカーソルが合っていることを確認した上で，C-c lを打つ．これで，画像へのリンクがフルパスも含めてコピーされる．\n   ついで，org-mode文書内の画像を挿入したいところにカーソルを持って行き，そこで，C-c C-lとすると，下部に新たなorg-insert-linkのウィンドウが開いて下図のように先程コピーしたリンクが一番上にフルパスでハイライトされて表示される．ここでリターンすればフルパスのリンクがorg-mode文書内に挿入される．\n   文章で説明すると複雑だが，実際にやってみると実に簡単で有用である．このやり方に気がつくまでは，いちいちフルパスを手入力したり，コピペしたりしていたが，その必要がなくなり非常に楽になった．\nbjm/ivy-dired-recent-dirs - 最近開けたdirectoryを一覧表示する方法（おまけ） diredでdirectoryを開けるときにその名前を入力する必要があるが，これが結構面倒である．特に深いところにあるファイルはフルパスを書くのが大変である．どうせ，同じファイルに何回も行くことが多いので，「最近訪れたdirectoryの履歴」みたいなのが一覧表示されると嬉しい．まさに，こんなのぞみにピッタリのものが，bjm/ivy-dired-recent-dirsである．これについては，以前に書いたのでそちらを参考にしていただきたい．というか，以前に書いた事自体を忘れていたので，自分への戒めとして記録しておく．．．(^^;;;\nRef: 最近開いたディレクトリを開く\n","date":1555599600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555734825,"objectID":"49265fc483c48b6fb238d894ee024c1a","permalink":"/post/peep/","publishdate":"2019-04-19T00:00:00+09:00","relpermalink":"/post/peep/","section":"post","summary":"最近Rネタばかり書いていたが，今回は久しぶりのEmacsネタである．org-modeで文書を書いているときに画像を貼り付けたいことがある．そのためには画像ファイルの名前とパスが必要となる．要するに毎回画像ファイルのパスを調べて/hoge/fuga/hogefuga/hugo.jpgというようなことをタイプしなければならず面倒である．そこで，peep-diredの出番である．peep-diredとは，diredでファイルにカーソルを持っていくと中身が見える，すなわち，画像ファイルなら画像が見え，テキストファイルならテキストが読めるというminor modeである．これが画像リンクの貼り付けに便利なのでまとめておく．\n Table of Contents  References peep-diredのインストールと設定 peep-diredの使い方 bjm/ivy-dired-recent-dirs - 最近開けたdirectoryを一覧表示する方法（おまけ）    References  peep-dired QUICKLY PREVIEW IMAGES AND OTHER FILES WITH PEEP-DIRED  peep-diredのインストールと設定 例によって，use-packagを用いて以下のように，init.orgに書けばよい．\n#+begin_src emacs-lisp (use-package peep-dired :ensure t :defer t ; don\u0026#39;t access `dired-mode-map\u0026#39; until `peep-dired\u0026#39; is loaded :bind (:map dired-mode-map (\u0026#34;P\u0026#34; . peep-dired))) #+end_src 設定は上記参照サイトのパクリで，diredで\u0026quot;P\u0026quot;を打つとpeep-dired modeとなってdiredのリストの画像ファイルが見られるようになり，もう一度\u0026quot;P\u0026quot;と打つとpeep-dired modeは終了する．　peep-diredの使い方 File viewerとしてだけなら，どうということはないのだが，org-modeと組み合わせて使うと便利さが増す．たとえば，下図のように画像をおいているdirectoryをdiredで開いて\u0026quot;P\u0026quot;を打ってpeep-dired modeに入り，画像を確かめながら文書に挿入する画像を決める．上段のdiredのバッファにおいてIMG_1996.jpgにカーソルがあり，下段のバッファにその画像が表示されている．画像が決まったらその画像ファイルにカーソルが合っていることを確認した上で，C-c lを打つ．これで，画像へのリンクがフルパスも含めてコピーされる．\n   ついで，org-mode文書内の画像を挿入したいところにカーソルを持って行き，そこで，C-c C-lとすると，下部に新たなorg-insert-linkのウィンドウが開いて下図のように先程コピーしたリンクが一番上にフルパスでハイライトされて表示される．ここでリターンすればフルパスのリンクがorg-mode文書内に挿入される．\n   文章で説明すると複雑だが，実際にやってみると実に簡単で有用である．このやり方に気がつくまでは，いちいちフルパスを手入力したり，コピペしたりしていたが，その必要がなくなり非常に楽になった．","tags":["emacs","dired","peep-dired","org-mode","image","link"],"title":"peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法）","type":"post"},{"authors":null,"categories":null,"content":"今回もRネタである．論文の図を作成していて，ggplot2のfacetを使用して作成した図の中のfacet毎に異なる有意差を示す群を線分で結んで，その上にasteriskを色を変えてつけようとしたところ，結構苦労したので忘れないうちにまとめておく．annotate()というのもあるが，これだとすべてのfacetに同じ内容が入ってしまう．今回の目的であるfacetによって異なる内容の注釈を入れるためには，geom_segmentやgeom_textを使う．\n Table of Contents  References Data Preparation Tukey multiple comparison  TukeyHSD テューキーの方法による多重比較   Boxplot by ggplot2  Calculate mean and SE geom_jitter geom_point Add mean bar   Add segment and asterisk to Drug2 facet of boxplot  Dataframe for annotation Add segment with geom_segment and asterisk with geom_text (black) Add segment with geom_segment and asterisk with geom_text (color)   Barplot by ggplot2  Barplot   Add segment and asterisk to Drug2 facet of barplot  Dataframe for annotation Add segment with geom_segment and asterisk with geom_text (color)   Combine boxplot and barplot into the same graphic    References  ggplot2を使って、注釈を入れる-2 Adding different annotation to each facet in ggplot Add a segment only to one facet using ggplot2  Data Preparation まず，架空のデータを作成する．Drug1とDrug2を投与して１日後と７日後の物質Xの血中濃度変化を対照，つまり投与前と比較するという実験において，Drug1では差がなく，Drug2では差があるという結果にする．\nset.seed(100) data.df1 \u0026lt;- data.frame(Control = rnorm(20, mean = 5, sd = 1), Day1 = rnorm(20, mean = 5, sd = 1.5), Day7 = rnorm(20, mean = 5, sd = 2)) library(reshape) data_melt.df1 \u0026lt;- melt(data.df1) data.df2 \u0026lt;- data.frame(Control = rnorm(20, mean = 5, sd = 1.8), Day1 = rnorm(20, mean = 10, sd = 5), Day7 = rnorm(20, mean = 20, sd = 7)) data_melt.df2 \u0026lt;- melt(data.df2) data_melt.df \u0026lt;- cbind.data.frame(data_melt.df1, data_melt.df2$value) colnames(data_melt.df) \u0026lt;- c(\u0026#34;Day\u0026#34;,\u0026#34;Drug1\u0026#34;,\u0026#34;Drug2\u0026#34;) # chage column name of dataframe head(data_melt.df) Using as id variables Using as id variables Day Drug1 Drug2 1 Control 4.497808 4.528408 2 Control 5.131531 4.876081 3 Control 4.921083 4.318010 4 Control 5.886785 9.647526 5 Control 5.116971 5.233701 6 Control 5.318630 3.716555 これで解析用のデータが出来上がった．一応，差を確認してみる．\nTukey multiple comparison Tukeyの多重比較試験を行う．２つの方法で確認しておく．\nTukeyHSD TukeyHSD(aov(data_melt.df$Drug1~data_melt.df$Day)) Tukey multiple comparisons of means 95% family-wise confidence level Fit: aov(formula = data_melt.df$Drug1 ~ data_melt.df$Day) $`data_melt.df$Day` diff lwr upr p adj Day1-Control 0.03086351 -1.274284 1.336011 0.9982163 Day7-Control -0.14426065 -1.449408 1.160887 0.9617765 Day7-Day1 -0.17512416 -1.480272 1.130023 0.9442066 TukeyHSD(aov(data_melt.df$Drug2~data_melt.df$Day)) Tukey multiple comparisons of means 95% family-wise confidence level Fit: aov(formula = data_melt.df$Drug2 ~ data_melt.df$Day) $`data_melt.df$Day` diff lwr upr p adj Day1-Control 4.874433 1.128239 8.620628 0.0076229 Day7-Control 15.114597 11.368403 18.860791 0.0000000 Day7-Day1 10.240164 6.493970 13.986358 0.0000000 テューキーの方法による多重比較 source(\u0026#34;http://aoki2.si.gunma-u.ac.jp/R/src/tukey.R\u0026#34;, encoding=\u0026#34;euc-jp\u0026#34;) tukey(data_melt.df$Drug1, data_melt.df$Day) $result1 n Mean Variance Group1 20 5.107867 0.516335 Group2 20 5.138731 1.188671 Group3 20 4.963606 7.119660 $Tukey t p 1:2 0.05690583 0.9982163 1:3 0.26598637 0.9617765 2:3 0.32289220 0.9442066 $phi [1] 57 $v [1] 2.941555 tukey(data_melt.df$Drug2, data_melt.df$Day) $result1 n Mean Variance Group1 20 4.811422 4.07251 Group2 20 9.685855 32.74563 Group3 20 19.926019 35.88609 $Tukey t p 1:2 3.131158 7.622857e-03 1:3 9.709065 1.156397e-11 2:3 6.577907 4.783876e-08 $phi [1] 57 $v [1] 24.23474 以上で，Drug1では物質Xの濃度はコントロールと差がないこと，Drug2ではコントロール，Day1，Day7の間に有意差が認められることが確認された．そのようにデータを作ったので当たり前である．．．(^^;;;;;\nBoxplot by ggplot2 ようやくここから上記のデータを使って，ggplot2でboxplotを描いてみる．まずはmeltを用いてwide formatからlong formatへのデータの整形を行う．\nDataM \u0026lt;- melt(data_melt.df, id = \u0026#34;Day\u0026#34;) head(DataM) Day variable value 1 Control Drug1 4.497808 2 Control Drug1 5.131531 3 Control Drug1 4.921083 4 Control Drug1 5.886785 5 Control Drug1 5.116971 6 Control Drug1 5.318630 Calculate mean and SE 平均とSEも求めておく．\nlibrary(plyr) DataM_summary \u0026lt;- ddply(DataM, .(variable, Day), summarise, N = length(value), mean = mean(value), sd = sd(value), se = sd(value)/sqrt(length(value))) DataM_summary variable Day N mean sd se 1 Drug1 Control 20 5.107867 0.7185645 0.1606759 2 Drug1 Day1 20 5.138731 1.0902617 0.2437899 3 Drug1 Day7 20 4.963606 2.6682692 0.5966431 4 Drug2 Control 20 4.811422 2.0180460 0.4512488 5 Drug2 Day1 20 9.685855 5.7223794 1.2795629 6 Drug2 Day7 20 19.926019 5.9904997 1.3395165 ついで，ggplot2のggplotでboxplotを描く．個々のデータをgeom_jitter，あるいは，geom_pointを用いて重ねてプロットしておく．どちらの方法でも下記のように同じ図になる．\ngeom_jitter library(ggplot2) TestBoxPlot \u0026lt;- ggplot(DataM, aes(x = Day, y = value, colour = Day, fill = Day)) + geom_boxplot(alpha = 0.40) + facet_wrap(~variable, ncol = 3, scales=\u0026#34;fixed\u0026#34;) + coord_cartesian(ylim = c(0,38)) + theme_bw() + theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) + theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) + xlab(\u0026#34;\u0026#34;) + ylab(\u0026#34;Relative value to control\u0026#34;) + theme(legend.position = \u0026#34;none\u0026#34;) + # delete legend geom_jitter(shape=16, size=2, position=position_jitter(0.1)) # plot individual point with jittering TestBoxPlot     geom_point TestBoxPlot2 \u0026lt;- ggplot(DataM, aes(x = Day, y = value, colour = Day, fill = Day)) + geom_boxplot(alpha = 0.40) + facet_wrap(~variable, ncol = 3, scales=\u0026#34;fixed\u0026#34;) + coord_cartesian(ylim = c(0,38)) + theme_bw() + theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) + theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) + xlab(\u0026#34;\u0026#34;) + ylab(\u0026#34;Relative value to control\u0026#34;) + theme(legend.position = \u0026#34;none\u0026#34;) + # delete legend geom_point(aes(fill = Day), size = 2, shape = 16, position = position_jitterdodge()) # plot individual point with jittering TestBoxPlot2     Add mean bar Ref: combine ggplot facet_wrap with geom_segment to draw mean line in scatterplot 平均値のバーを書き込む．これはgeom_segmentを使うが，すべてのfacetに書き込むので，単純である．\nTestBoxPlot3 \u0026lt;- TestBoxPlot + geom_segment(data = DataM_summary, aes(x=as.numeric(as.factor(Day)) - 0.5, xend=as.numeric(as.factor(Day)) + 0.5, yend=mean, y=mean, colour=Day, alpha=0.7), size = 1.5, linetype = 1) TestBoxPlot3     Add segment and asterisk to Drug2 facet of boxplot Dataframe for annotation ここからが本番である．上記で作成したグラフを見ながら，どこからどこに線を引けばよいのか，どこにasteriskを置けばよいのか大体の見当をつけたうえで，注釈用のデータフレームを別途作成する．これは手作業でやらざるを得ない．できたグラフを見て微調整をしていく．\nanno \u0026lt;- data.frame( x=c(0.9, 0.9, 3.1, 1.1, 1.1, 1.9, 2.1, 2.1, 2.9), y=c(10.5, 37, 37, 10.5, 26, 26, 23.5, 34, 34), xend=c(0.9, 3.1, 3.1, 1.1, 1.9, 1.9, 2.1, 2.9, 2.9), yend=c(37, 37, 32.5, 26, 26, 23.5, 34, 34, 32.5), variable=\u0026#34;Drug2\u0026#34;, xstar = c(1.5, 2, 2.5, NA, NA, NA, NA, NA, NA), ystar = c(27, 38, 35, NA, NA, NA, NA, NA, NA), lab = c(\u0026#34;**\u0026#34;, \u0026#34;***\u0026#34;, \u0026#34;***\u0026#34;, NA, NA, NA, NA, NA, NA), ast.color = c(\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;, NA, NA, NA, NA, NA, NA)) anno x y xend yend variable xstar ystar lab ast.color 1 0.9 10.5 0.9 37.0 Drug2 1.5 27 ** red 2 0.9 37.0 3.1 37.0 Drug2 2.0 38 *** blue 3 3.1 37.0 3.1 32.5 Drug2 2.5 35 *** green 4 1.1 10.5 1.1 26.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 5 1.1 26.0 1.9 26.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 6 1.9 26.0 1.9 23.5 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 7 2.1 23.5 2.1 34.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 8 2.1 34.0 2.9 34.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 9 2.9 34.0 2.9 32.5 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; x, y, xend, yendは各線分の始点と終点で，xstar, ystarは注釈，今回はasteriskの位置を示す．labはasteriskそのものを指示し，colorはasteriskの色を指定している．\nAdd segment with geom_segment and asterisk with geom_text (black) geom_segmentで線を引いて，geom_textでasteriskをつける．まずは黒色でやってみる． inherit.aes=FALSE をgeom_text()とgeom_segment()の内部に追加してggplot()内のfill=Dayを無視させる．\nTestBoxPlot3 + geom_text(data = anno, aes(x = xstar, y = ystar, label = lab, colour = NULL), size = 7, family = \u0026#34;Times New Roman\u0026#34;, inherit.aes = FALSE) + geom_segment(data = anno, aes(x = x, y = y, xend=xend, yend=yend), inherit.aes = FALSE)     Add segment with geom_segment and asterisk with geom_text (color) asteriskに色をつける．データフレーム annoに書き込んだ色データを明示的に指示して利用する．\nTestBoxPlot3 + geom_text(data = anno, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = \u0026#34;Times New Roman\u0026#34;, inherit.aes = FALSE) + geom_segment(data = anno, aes(x = x, y = y, xend=xend, yend=yend), inherit.aes = FALSE)     問題はここである．どうしても， colour = anno$ast.color とデータフレームと変数を明示的に指示しないと色がおかしくなるか，エラーになってしまう．もっとうまくggplotにデータを読ませる方法をどなたかご教示いただければ幸甚である．\nBarplot by ggplot2 次にbarplotを描いて同じことをやってみる．エラーバーは慣例通りSEにする．\nBarplot TestBarPlot \u0026lt;- ggplot(DataM_summary, aes(x = Day, y = mean, colour = Day, fill=Day)) + geom_errorbar(aes(ymin = mean, ymax = mean + se), width = 0.2) + geom_bar(position=position_dodge(), stat=\u0026#34;identity\u0026#34;, alpha=1/2, width=0.5) + facet_wrap(~variable, scales = \u0026#34;fixed\u0026#34;, ncol=3) + coord_cartesian(ylim = c(0,30)) + theme_bw() + theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) + theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) + xlab(\u0026#34;\u0026#34;) + ylab(\u0026#34;Relative value to control\u0026#34;) + theme(legend.position = \u0026#34;none\u0026#34;) # delete legend TestBarPlot     Add segment and asterisk to Drug2 facet of barplot Dataframe for annotation anno2 \u0026lt;- data.frame( x=c(0.9, 0.9, 3.1, 1.1, 1.1, 1.9, 2.1, 2.1, 2.9), y=c(6.5, 29, 29, 6.5, 17, 17, 12.5, 25, 25), xend=c(0.9, 3.1, 3.1, 1.1, 1.9, 1.9, 2.1, 2.9, 2.9), yend=c(29, 29, 22.5, 17, 17, 12.5, 25, 25, 22.5), variable=\u0026#34;Drug2\u0026#34;, xstar = c(1.5, 2, 2.5, NA, NA, NA, NA, NA, NA), ystar = c(17.5, 29.5, 25.5, NA, NA, NA, NA, NA, NA), lab = c(\u0026#34;**\u0026#34;, \u0026#34;***\u0026#34;, \u0026#34;***\u0026#34;, NA, NA, NA, NA, NA, NA), ast.color = c(\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;, NA, NA, NA, NA, NA, NA)) anno2 x y xend yend variable xstar ystar lab ast.color 1 0.9 6.5 0.9 29.0 Drug2 1.5 17.5 ** red 2 0.9 29.0 3.1 29.0 Drug2 2.0 29.5 *** blue 3 3.1 29.0 3.1 22.5 Drug2 2.5 25.5 *** green 4 1.1 6.5 1.1 17.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 5 1.1 17.0 1.9 17.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 6 1.9 17.0 1.9 12.5 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 7 2.1 12.5 2.1 25.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 8 2.1 25.0 2.9 25.0 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 9 2.9 25.0 2.9 22.5 Drug2 NA NA \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; Add segment with geom_segment and asterisk with geom_text (color) TestBarPlot + geom_text(data = anno2, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = \u0026#34;Times New Roman\u0026#34;, inherit.aes = FALSE) + geom_segment(data = anno2, aes(x = x, y = y, xend=xend, yend=yend), inherit.aes = FALSE)     barplotでも全く同様のグラフを作成することができた．\nなお，通常のグラフをpdfで出力して，それをOmniGraffleなどのお絵かきソフトに持っていき，手作業で線やasteriskを描いて，再びpdfで出力する，という荒業も使えないことはない．しかし，ggplotの中で完結できるので，余分で面倒な手作業が不要になった．まぁ，上記の作業も面倒ではあるが，再現性があり，他の人にも渡せるというところが重要であると思う．\nCombine boxplot and barplot into the same graphic Ref1: patchwork Ref2: patchworkを使って複数のggplotを組み合わせる\npatchworkを使えば，上記の２種のグラフを簡単に一つの図にできる．比較しやすいようにbarplotのy軸のスケールをboxplotと同じに修正しておく．\n# Boxplot P1 \u0026lt;- TestBoxPlot3 + geom_text(data = anno, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = \u0026#34;Times New Roman\u0026#34;, inherit.aes = FALSE) + geom_segment(data = anno, aes(x = x, y = y, xend=xend, yend=yend), inherit.aes = FALSE) # Barplot TestBarPlot2 \u0026lt;- ggplot(DataM_summary, aes(x = Day, y = mean, colour = Day, fill=Day)) + geom_errorbar(aes(ymin = mean, ymax = mean + se), width = 0.2) + geom_bar(position=position_dodge(), stat=\u0026#34;identity\u0026#34;, alpha=1/2, width=0.5) + facet_wrap(~variable, scales = \u0026#34;fixed\u0026#34;, ncol=3) + coord_cartesian(ylim = c(0,38)) + theme_bw() + theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) + theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) + xlab(\u0026#34;\u0026#34;) + ylab(\u0026#34;Relative value to control\u0026#34;) + theme(legend.position = \u0026#34;none\u0026#34;) # delete legend P2 \u0026lt;- TestBarPlot2 + geom_text(data = anno2, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = \u0026#34;Times New Roman\u0026#34;, inherit.aes = FALSE) + geom_segment(data = anno2, aes(x = x, y = y, xend=xend, yend=yend), inherit.aes = FALSE) library(patchwork) P1 + P2     このpatchworkは足し算だけで２つの図の合体ができてしまうすぐれもの．ちゃんと位置合わせなども自動的にしてくれる．素晴らしい．\nしかし，こうして並べて比べてみると，barplotが如何に情報量の少ないグラフであるかが一目瞭然である．\n","date":1554476400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554622249,"objectID":"a0d7c572b4e94a3d80fe9d15f5b2d649","permalink":"/post/different-segment-to-each-facet-in-ggplot/","publishdate":"2019-04-06T00:00:00+09:00","relpermalink":"/post/different-segment-to-each-facet-in-ggplot/","section":"post","summary":"今回もRネタである．論文の図を作成していて，ggplot2のfacetを使用して作成した図の中のfacet毎に異なる有意差を示す群を線分で結んで，その上にasteriskを色を変えてつけようとしたところ，結構苦労したので忘れないうちにまとめておく．annotate()というのもあるが，これだとすべてのfacetに同じ内容が入ってしまう．今回の目的であるfacetによって異なる内容の注釈を入れるためには，geom_segmentやgeom_textを使う．\n Table of Contents  References Data Preparation Tukey multiple comparison  TukeyHSD テューキーの方法による多重比較   Boxplot by ggplot2  Calculate mean and SE geom_jitter geom_point Add mean bar   Add segment and asterisk to Drug2 facet of boxplot  Dataframe for annotation Add segment with geom_segment and asterisk with geom_text (black) Add segment with geom_segment and asterisk with geom_text (color)   Barplot by ggplot2  Barplot   Add segment and asterisk to Drug2 facet of barplot  Dataframe for annotation Add segment with geom_segment and asterisk with geom_text (color)   Combine boxplot and barplot into the same graphic    References  ggplot2を使って、注釈を入れる-2 Adding different annotation to each facet in ggplot Add a segment only to one facet using ggplot2  Data Preparation まず，架空のデータを作成する．Drug1とDrug2を投与して１日後と７日後の物質Xの血中濃度変化を対照，つまり投与前と比較するという実験において，Drug1では差がなく，Drug2では差があるという結果にする．","tags":["R","ggplot2","facet","segment","annotation","colour","patchwork"],"title":"How to add different segment, annotation and color to each facet in ggplot","type":"post"},{"authors":null,"categories":null,"content":"（承前）前回（How to automatically embed R plot into html exported by org-mode with org-babel）はorg-babelを設定して，Rで描いたグラフを自動でhtmlやpdfに挿入するところまでまとめた．繰り返しになるが，本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成している．前々回の記事（How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)）を書いている際に，Rでplotしたgraphをブログ記事の中に自動ではめ込むよう設定するのに苦労した．前回でorg-babelの設定は終わっているので，今回は，Hugoやox-hugoの設定に関してまとめ，ブログ記事へのR plotの自動挿入ができるようにする．\n Table of Contents  References Configuration of Hugo section Setup of HUGO_SECTION \u0026amp; HUGO_BASE_DIR in ox-hugo References to files outside the static directory    References   HUGO Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. Hugoのsetupについてはネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;\n  ox-hugo ox-hugo is an Org exporter backend that exports Org to Hugo-compatible Markdown (Blackfriday) and also generates the front-matter (in TOML or YAML format).\n要するに，Markdownを直接書くのではなく，org-modeで書いてしまおうというもので，私のようなorg-mode maniacにピッタリのパッケージである．ox-hugoのsetupについてもネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;\n  Configuration of Hugo section Ref: Org-mode で記事を書いて Hugo 向け markdown を ox-hugo で自動生成する話\nそもそも，まず，Hugoのディレクトリ・ファイルの構成を把握する必要があった．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.org に書き込んでおり，directory/file構成は以下の通りである．上記参考サイトと同じく，/hogehoge/hogeblog/hogefugablog/，つまり，Hugo の content/ と同じ階層に hogefugablog.org ファイルを置いている．なお，themeは academic を使用している．また，ox-hugoのdirectoryは今回の作業により新たに作成されたものであり，当初はなかった．\n$ tree -L 2 . ├── config.toml ├── content │ ├── home │ ├── post │ └── privacy.md ├── data │ └── 6F ├── hogefugablog.org ├── layouts │ ├── js │ ├── partials │ └── search ├── static │ ├── css │ ├── files │ ├── img │ └── ox-hugo └── themes └── academic Setup of HUGO_SECTION \u0026amp; HUGO_BASE_DIR in ox-hugo Ref: Before you export\n本サイトでは，HUGO_SECTIONは特に設定しておらず，C-h v org-hugo-default-section-directoryの値は default valueであるpostsになっている．\nまた，hogefugablog.orgの文頭に以下のように記述して，HUGO_BASE_DIRを設定している．\n#+HUGO_BASE_DIR: ./ ここまでで，ox-hugoからのexportの準備が整った．\nReferences to files outside the static directory Ref: References to files outside the static directory\nHugoのstatic directory以外の場所にあるファイルへのreferenceを作成し，かつ，そのファイルが org-hugo-external-file-extensions-allowed-for-copying のリストに挙げられている拡張子を有している場合は，そのファイルはox-hugoによりstatic directoryにコピーされる．ちなみに，C-h v org-hugo-external-file-extensions-allowed-for-copyingとすると，以下のような値を得る．\norg-hugo-external-file-extensions-allowed-for-copying is a variable defined in ‘ox-hugo.el’. Its value is (\u0026#34;jpg\u0026#34; \u0026#34;jpeg\u0026#34; \u0026#34;tiff\u0026#34; \u0026#34;png\u0026#34; \u0026#34;svg\u0026#34; \u0026#34;gif\u0026#34; \u0026#34;pdf\u0026#34; \u0026#34;odt\u0026#34; \u0026#34;doc\u0026#34; \u0026#34;ppt\u0026#34; \u0026#34;xls\u0026#34; \u0026#34;docx\u0026#34; \u0026#34;pptx\u0026#34; \u0026#34;xlsx\u0026#34;) Source path does not contain /static/ このサイトの Table 2: Where files get copied to if their path does not contain static/ が本サイトに当てはまる．これが分かるまでに時間を要した．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.orgに書き込んでいる．この環境で，postの中にorg-babelを使ってRのcode blockを評価すると，Rにより作成されるplot（foo.png）は，\n/hogehoge/hogeblog/hogefugablog/foo.png に作成される．そして，このファイルは，最終的に，\n/hogehoge/hogeblog/hogefugablog/static/ox-hugo/foo.png にコピーされ，ブログ記事に挿入されるということになる．なお，ox-hugo directoryはこの時に自動的に作成される．\nつまり，前回の記事（How to automatically embed R plot into html exported by org-mode with org-babel）のように，R plotのcode blockを含むorg ファイルを作成し，それをexportして，R plotが自動で組み込まれるようなら，そのorg-babelのcode blockをそのままox-hugoで書いたブログ記事のorg ファイルにコピペすれば，あとはox-hugoが良きにはからってくれるはずである．\n実は，できたグラフの画像を自分でいろいろな場所にコピーしては失敗していた．Hugoのroot directory，つまり，/hogehoge/hogeblog/hogefugablog/でRを動かして，できたグラフ画像に対して何もせずに放置しておけば，ox-hugoが全て面倒を見てくれるということに気がつかず，余計なことをしていたわけである．\nまとめとして，前回記事のcode blockをこの記事に挿入して試してみる．\n#+begin_src R :session *R* :results output graphics :file test1.png :exports both boxplot(islands) #+end_src     #+begin_src R :session *R* :results output graphics :file test2.png :exports both library(\u0026#34;ggplot2\u0026#34;) ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) + geom_point() #+END_SRC     ちゃんとグラフが自動的に挿入されている．\norg-babelとRの組み合わせは強力で，ox-hugoも便利と改めて痛感．\n","date":1553439600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553950480,"objectID":"b0ad8f295aaba682de1bacce7251f1fd","permalink":"/post/embedrplotinblog/","publishdate":"2019-03-25T00:00:00+09:00","relpermalink":"/post/embedrplotinblog/","section":"post","summary":"（承前）前回（How to automatically embed R plot into html exported by org-mode with org-babel）はorg-babelを設定して，Rで描いたグラフを自動でhtmlやpdfに挿入するところまでまとめた．繰り返しになるが，本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成している．前々回の記事（How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)）を書いている際に，Rでplotしたgraphをブログ記事の中に自動ではめ込むよう設定するのに苦労した．前回でorg-babelの設定は終わっているので，今回は，Hugoやox-hugoの設定に関してまとめ，ブログ記事へのR plotの自動挿入ができるようにする．\n Table of Contents  References Configuration of Hugo section Setup of HUGO_SECTION \u0026amp; HUGO_BASE_DIR in ox-hugo References to files outside the static directory    References   HUGO Hugo is one of the most popular open-source static site generators.","tags":["R","plot","embed","Hugo","ox","hugo","blog","emacs","org-mode"],"title":"How to automatically embed R plot in blog created by Hugo via ox-hugo","type":"post"},{"authors":null,"categories":null,"content":"本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成しているが，前回の記事（How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)）を書いている際に，Rでplotしたgraphを記事の中に自動ではめ込むよう設定するのに苦労したので，これも忘れないうちにまとめておく．まず，今回はorg-babelの設定について書き，次回にHugoでの設定をまとめる．\n Table of Contents  Org-babel setup How to use org-babel Org-babel evaluation of R code block    Org-babel setup org-babelとは，う～～～ん，なにもの？　ものすごく端折って言うと，Code blockを評価して結果を表示するorg-modeの拡張，といったところだろうか．．．実例を見たほうが早いと思う．今回，org-babelによる R code の評価について書こうとして，ふと，ブログを見直してみると，なんとorg-babelの設定をまとめた記事を投稿してない \u0026hellip;..(^^;;;\nということで，org-babelの設定を改めて記しておく．例によって，init.orgに以下のように書き込んでおけばよい．\nRef: Org-babel Setup　ここからコピペ (^^;;;\n#+begin_src emacs-lisp (org-babel-do-load-languages (quote org-babel-load-languages) (quote ((emacs-lisp . t) (dot . t) (ditaa . t) (R . t) (python . t) (ruby . t) (gnuplot . t) (clojure . t) (shell . t) (ledger . t) (org . t) (plantuml . t) (latex . t)))) #+end_src How to use org-babel 以下のサイトを参考にした．\nRef 1: Official manual 14 Working with Source Code\nRef 2: org-modeのコードブロック(Babel)の使い方 このサイトが分かりやすい．特に， ヘッダー引数 と 言語毎の書き方 の R の項は必読．\nOrg-babel evaluation of R code block R and Emacs with org mode org-babelによるR codeの評価とhtmlへのgraph plotの自動埋め込みは，このサイトが分かりやすい．ここに有る”Using org mode with R”というサンプルを参考に，以下のようなorgファイルを/Data/hogehoge/hogefugaに作成する．\n#+TITLE: R-test #+AUTHOR: taipapa * Test #+begin_src R :session *R* :results output graphics :file test1.png :exports both boxplot(islands) #+end_src #+begin_src R :session *R* :results output graphics :file test2.png :exports both library(\u0026#34;ggplot2\u0026#34;) ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) + geom_point() #+END_SRC C-c C-e h oとしてhtmlにexportすると，以下のように簡単にグラフがプロットされたhtmlが作成される．いちいちできたグラフ画像を挿入する必要はなく，自動で挿入される．便利である．\n   　注意点としては，C-c C-e hoとしたときに， R starting project directory？ と尋ねられるはずで，defaultの値として　/Data/hogehoge/hogefuga/ が既に表示されているはずである．これをそのままリターンすれば同じdirectoryにグラフが作成されて良きにはからってくれる．この際に異なるdirectoryを選んだりするとうまくいかないので注意．\nまた，C-c C-e loとすると，自動でR plotの挿入されたpdfが作成されオープンする．\nこれで準備が整った．次回はHugoで作成したブログにR plotを自動で差し込む方法をまとめる予定である．\n","date":1553439600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553914861,"objectID":"c76f12069b9b3174426aad027a4fc1df","permalink":"/post/exportrplot/","publishdate":"2019-03-25T00:00:00+09:00","relpermalink":"/post/exportrplot/","section":"post","summary":"本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成しているが，前回の記事（How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)）を書いている際に，Rでplotしたgraphを記事の中に自動ではめ込むよう設定するのに苦労したので，これも忘れないうちにまとめておく．まず，今回はorg-babelの設定について書き，次回にHugoでの設定をまとめる．\n Table of Contents  Org-babel setup How to use org-babel Org-babel evaluation of R code block    Org-babel setup org-babelとは，う～～～ん，なにもの？　ものすごく端折って言うと，Code blockを評価して結果を表示するorg-modeの拡張，といったところだろうか．．．実例を見たほうが早いと思う．今回，org-babelによる R code の評価について書こうとして，ふと，ブログを見直してみると，なんとorg-babelの設定をまとめた記事を投稿してない \u0026hellip;..(^^;;;\nということで，org-babelの設定を改めて記しておく．例によって，init.orgに以下のように書き込んでおけばよい．\nRef: Org-babel Setup　ここからコピペ (^^;;;\n#+begin_src emacs-lisp (org-babel-do-load-languages (quote org-babel-load-languages) (quote ((emacs-lisp . t) (dot . t) (ditaa . t) (R .","tags":["org-babel","emacs","export","R","plot","graph","org-mode"],"title":"How to automatically embed R plot into html exported by org-mode with org-babel","type":"post"},{"authors":null,"categories":null,"content":"Rを用いて生存分析を行う際に， Kaplan-Meier curve に打ち切りのマークを入れたり，number at risk (at risk table)を併記する方法はすぐに見つかるが（Drawing survival curves in R, ggkm, Survival plots have never been so informative），competing riskのplotの場合はあまり情報がない．prodlimを使えば簡単なので，まとめておく．\nなお， competing risk については以下を参照．\n Competing risk analysis using R: an easy guide for clinicians Regression modeling of competing risk using R: an in depth guide for clinicians Competing risk analysisのデモ A not so short review on survival analysis in R   Table of Contents  Prepare dataset \u0026ldquo;Melanoma\u0026rdquo; from \u0026ldquo;riskRegression\u0026rdquo; package Competing risk analysis with cuminc of \u0026ldquo;cmprsk\u0026rdquo; package Competing risk analysis with prodlim  Days Years   Plot survival curve of competing risk analysis with prodlim (default) Plot survival curve of competing risk analysis with prodlim (modified)    Prepare dataset \u0026ldquo;Melanoma\u0026rdquo; from \u0026ldquo;riskRegression\u0026rdquo; package library(riskRegression) data(Melanoma) head(Melanoma) summary(Melanoma) time status event invasion ici epicel ulcer 1 10 2 death.other.causes level.1 2 present present 2 30 2 death.other.causes level.0 0 not present not present 3 35 0 censored level.1 2 not present not present 4 99 2 death.other.causes level.0 2 not present not present 5 185 1 death.malignant.melanoma level.2 2 present present 6 204 1 death.malignant.melanoma level.2 2 not present present thick sex age logthick 1 6.76 Male 76 1.9110229 2 0.65 Male 56 -0.4307829 3 1.34 Male 41 0.2926696 4 2.90 Female 71 1.0647107 5 12.08 Male 52 2.4915512 6 4.84 Male 28 1.5769147 time status event invasion Min. : 10 Min. :0.0000 censored :134 level.0:99 1st Qu.:1525 1st Qu.:0.0000 death.malignant.melanoma: 57 level.1:77 Median :2005 Median :0.0000 death.other.causes : 14 level.2:29 Mean :2153 Mean :0.4146 3rd Qu.:3042 3rd Qu.:1.0000 Max. :5565 Max. :2.0000 ici epicel ulcer thick sex 0: 17 not present:116 not present:115 Min. : 0.10 Female:126 1: 59 present : 89 present : 90 1st Qu.: 0.97 Male : 79 2:107 Median : 1.94 3: 22 Mean : 2.92 3rd Qu.: 3.56 Max. :17.42 age logthick Min. : 4.00 Min. :-2.30259 1st Qu.:42.00 1st Qu.:-0.03046 Median :54.00 Median : 0.66269 Mean :52.46 Mean : 0.61817 3rd Qu.:65.00 3rd Qu.: 1.26976 Max. :95.00 Max. : 2.85762 Competing risk analysis with cuminc of \u0026ldquo;cmprsk\u0026rdquo; package  cuminc is used to investigate whether a statistically significant difference is present between the groups (see \u0026ldquo;Tests:\u0026rdquo; below).  library(cmprsk) Results_cmprsk \u0026lt;- with(Melanoma, cuminc(time, event, group = sex, cencode = \u0026#34;censored\u0026#34;)) Results_cmprsk Tests: stat pv df death.malignant.melanoma 5.8140209 0.0158989 1 death.other.causes 0.8543656 0.3553203 1 Estimates and Variances: $est 1000 2000 3000 4000 Female death.malignant.melanoma 0.08730159 0.18077594 0.23565169 0.28424490 Male death.malignant.melanoma 0.19237175 0.31009828 0.42453587 0.42453587 Female death.other.causes 0.03174603 0.03983516 0.05220642 0.08538385 Male death.other.causes 0.03814124 0.06693942 0.06693942 0.13474271 5000 Female death.malignant.melanoma 0.28424490 Male death.malignant.melanoma NA Female death.other.causes 0.08538385 Male death.other.causes NA $var 1000 2000 3000 Female death.malignant.melanoma 0.0006378135 0.0012450462 0.0018102025 Male death.malignant.melanoma 0.0020223293 0.0028196248 0.0042695603 Female death.other.causes 0.0002459647 0.0003073878 0.0004529114 Male death.other.causes 0.0004727379 0.0008614343 0.0008614343 4000 5000 Female death.malignant.melanoma 0.002755577 0.002755577 Male death.malignant.melanoma 0.004269560 NA Female death.other.causes 0.001528480 0.001528480 Male death.other.causes 0.002950698 NA Competing risk analysis with prodlim Days CompRskAnalysis \u0026lt;- prodlim(Hist(time, status, cens.code=0) ~ sex, data = Melanoma) summary(CompRskAnalysis) ----------\u0026gt; Cause: 1 sex=Female : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 10 126 0 0 0.000 0.0000 0.0000 0.000 2 1513 104 0 0 0.127 0.0297 0.0688 0.185 3 2006 67 0 0 0.181 0.0351 0.1120 0.250 4 3042 34 0 0 0.236 0.0423 0.1528 0.318 5 5565 1 0 1 0.284 0.0519 0.1826 0.386 sex=Male : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 10 79 0 0 0.000 0.0000 0.000 0.000 2 1513 51 0 0 0.270 0.0503 0.171 0.368 3 2006 35 0 0 0.310 0.0527 0.207 0.413 4 3042 18 0 0 0.425 0.0644 0.298 0.551 5 5565 0 0 0 NA NA NA NA ----------\u0026gt; Cause: 2 sex=Female : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 10 126 0 0 0.0000 0.0000 0.00000 0.0000 2 1513 104 0 0 0.0317 0.0156 0.00113 0.0624 3 2006 67 0 0 0.0398 0.0175 0.00562 0.0741 4 3042 34 0 0 0.0522 0.0212 0.01073 0.0937 5 5565 1 0 1 0.0854 0.0383 0.01027 0.1605 sex=Male : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 10 79 1 0 0.0127 0.0126 0.00000 0.0373 2 1513 51 0 0 0.0510 0.0248 0.00230 0.0996 3 2006 35 0 0 0.0669 0.0291 0.00992 0.1240 4 3042 18 0 0 0.0669 0.0291 0.00992 0.1240 5 5565 0 0 0 NA NA NA NA Years CompRskAnalysis2 \u0026lt;- prodlim(Hist(time/365.25, event, cens.code=\u0026#34;censored\u0026#34;) ~ sex, data = Melanoma) summary(CompRskAnalysis2) ----------\u0026gt; Cause: death.malignant.melanoma sex=Female : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 0.0274 126 0 0 0.000 0.0000 0.0000 0.000 2 4.1424 104 0 0 0.127 0.0297 0.0688 0.185 3 5.4921 67 0 0 0.181 0.0351 0.1120 0.250 4 8.3272 34 0 0 0.236 0.0423 0.1528 0.318 5 15.2361 1 0 1 0.284 0.0519 0.1826 0.386 sex=Male : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 0.0274 79 0 0 0.000 0.0000 0.000 0.000 2 4.1424 51 0 0 0.270 0.0503 0.171 0.368 3 5.4921 35 0 0 0.310 0.0527 0.207 0.413 4 8.3272 18 0 0 0.425 0.0644 0.298 0.551 5 15.2361 0 0 0 NA NA NA NA ----------\u0026gt; Cause: death.other.causes sex=Female : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 0.0274 126 0 0 0.0000 0.0000 0.00000 0.0000 2 4.1424 104 0 0 0.0317 0.0156 0.00113 0.0624 3 5.4921 67 0 0 0.0398 0.0175 0.00562 0.0741 4 8.3272 34 0 0 0.0522 0.0212 0.01073 0.0937 5 15.2361 1 0 1 0.0854 0.0383 0.01027 0.1605 sex=Male : time n.risk n.event n.lost cuminc se.cuminc lower upper 1 0.0274 79 1 0 0.0127 0.0126 0.00000 0.0373 2 4.1424 51 0 0 0.0510 0.0248 0.00230 0.0996 3 5.4921 35 0 0 0.0669 0.0291 0.00992 0.1240 4 8.3272 18 0 0 0.0669 0.0291 0.00992 0.1240 5 15.2361 0 0 0 NA NA NA NA Plot survival curve of competing risk analysis with prodlim (default) # Default plot plot(CompRskAnalysis2)     Plot survival curve of competing risk analysis with prodlim (modified)  adjust legend add tick-mark at right censoring times rotate labels of y-axis add statistical significance from results of cuminc described above etc  # Plot with modification plot(CompRskAnalysis2, cause = \u0026#34;death.malignant.melanoma\u0026#34;, xlim=c(0, 15), legend.x=\u0026#34;topleft\u0026#34;, # position of legend legend.cex=1.5, # font size of legend marktime = TRUE, # the curves are tick-marked at right censoring times by invoking the function markTime. legend.title=\u0026#34;\u0026#34;, atrisk.title=\u0026#34;\u0026#34;, axis2.at=seq(0,1,0.2), background.horizontal=seq(0,1,0.2), axis2.las=2, # rotate labels of y-axis percent = FALSE, confint = FALSE, atrisk.col=\u0026#34;black\u0026#34;, xlab=\u0026#34;Time to primary outcome (years)\u0026#34; ) text(6.5,0.85,adj=0,paste(\u0026#34;Gray\u0026#39;s test: p-value=\u0026#34;, round(Results_cmprsk$Tests[1,2],3)), cex = 1.2)     今回は，学会発表用のグラフ作成に必要であった．忘れないうちにまとめておく．以前は，at risk tableを別途作成してグラフに合体させるという荒業を行っていたが，これで非常に楽になった．\n","date":1553007600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553432298,"objectID":"c11a5a934a5ae403d6288ed3e0fb709c","permalink":"/post/prodlim/","publishdate":"2019-03-20T00:00:00+09:00","relpermalink":"/post/prodlim/","section":"post","summary":"Rを用いて生存分析を行う際に， Kaplan-Meier curve に打ち切りのマークを入れたり，number at risk (at risk table)を併記する方法はすぐに見つかるが（Drawing survival curves in R, ggkm, Survival plots have never been so informative），competing riskのplotの場合はあまり情報がない．prodlimを使えば簡単なので，まとめておく．\nなお， competing risk については以下を参照．\n Competing risk analysis using R: an easy guide for clinicians Regression modeling of competing risk using R: an in depth guide for clinicians Competing risk analysisのデモ A not so short review on survival analysis in R   Table of Contents  Prepare dataset \u0026ldquo;Melanoma\u0026rdquo; from \u0026ldquo;riskRegression\u0026rdquo; package Competing risk analysis with cuminc of \u0026ldquo;cmprsk\u0026rdquo; package Competing risk analysis with prodlim  Days Years   Plot survival curve of competing risk analysis with prodlim (default) Plot survival curve of competing risk analysis with prodlim (modified)    Prepare dataset \u0026ldquo;Melanoma\u0026rdquo; from \u0026ldquo;riskRegression\u0026rdquo; package library(riskRegression) data(Melanoma) head(Melanoma) summary(Melanoma) time status event invasion ici epicel ulcer 1 10 2 death.","tags":["R","competing","survival","curve","prodlim","censored","number","at","risk"],"title":"How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)","type":"post"},{"authors":null,"categories":null,"content":"Emacsで長い行を書いていると，デフォルトの状態ではどんどん横に伸びていく．後で読み返そうと思うと横にスクロールしないといけなくて，非常に不便である．M-qでauro-fillをやればよいと言われそうだが，そうすると改行されてしまい，これまた不便である．そこで，なんとかならないかと探してみると，ちゃんとそういうモノがあったので，まとめておく．\n Table of Contents  adaptive-wrap  インストールと設定 実際の使用例      adaptive-wrap  参照1：adaptive-wrap　ご本家 参照2：Correct indentation for wrapped lines 参照3：Emacsの折り返しの挙動 参照4：.emacs settings loading issue　  長い行をワープロのようにword-wrapしてくれるパッケージである．Emacsのバッファ上では折り返されているように見えるが，実際は長い横1行のままである．\nインストールと設定 例によって，use-packagを用いて以下のように，init.orgに書けばよい．\n#+begin_src emacs-lisp (use-package adaptive-wrap :ensure t :config (setq-default adaptive-wrap-extra-indent 1) (add-hook \u0026#39;visual-line-mode-hook #\u0026#39;adaptive-wrap-prefix-mode) (global-visual-line-mode +1) (add-hook \u0026#39;org-mode-hook \u0026#39;visual-line-mode) ;; For org macros ) #+end_src なお，最後の行を入れておかないと，org-mode fileに\n#+setupfile: /Sources/org-mode-folder/org-macros-master/org-macros.setup を追加してマクロのパッケージを使用する場合（Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）を参照のこと）に，adaptive-wrapが効かなくなる．\n実際の使用例 adaptive-wrapをインストールしていない場合が上図，インストールして設定すれば下図のように見える．あくまで，Emacsの画面上でword-wrapしているように見えるだけで，実際のファイルではなが～い横１行のままの状態が維持されている．\n      これも一度使い始めると，無くてはならないモノとなるパッケージである．\n","date":1548514800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548950793,"objectID":"62ae0ae02503e531985b459b0f70a230","permalink":"/post/adaptive-wrap/","publishdate":"2019-01-27T00:00:00+09:00","relpermalink":"/post/adaptive-wrap/","section":"post","summary":"Emacsで長い行を書いていると，デフォルトの状態ではどんどん横に伸びていく．後で読み返そうと思うと横にスクロールしないといけなくて，非常に不便である．M-qでauro-fillをやればよいと言われそうだが，そうすると改行されてしまい，これまた不便である．そこで，なんとかならないかと探してみると，ちゃんとそういうモノがあったので，まとめておく．\n Table of Contents  adaptive-wrap  インストールと設定 実際の使用例      adaptive-wrap  参照1：adaptive-wrap　ご本家 参照2：Correct indentation for wrapped lines 参照3：Emacsの折り返しの挙動 参照4：.emacs settings loading issue　  長い行をワープロのようにword-wrapしてくれるパッケージである．Emacsのバッファ上では折り返されているように見えるが，実際は長い横1行のままである．\nインストールと設定 例によって，use-packagを用いて以下のように，init.orgに書けばよい．\n#+begin_src emacs-lisp (use-package adaptive-wrap :ensure t :config (setq-default adaptive-wrap-extra-indent 1) (add-hook \u0026#39;visual-line-mode-hook #\u0026#39;adaptive-wrap-prefix-mode) (global-visual-line-mode +1) (add-hook \u0026#39;org-mode-hook \u0026#39;visual-line-mode) ;; For org macros ) #+end_src なお，最後の行を入れておかないと，org-mode fileに\n#+setupfile: /Sources/org-mode-folder/org-macros-master/org-macros.setup を追加してマクロのパッケージを使用する場合（Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）を参照のこと）に，adaptive-wrapが効かなくなる．\n実際の使用例 adaptive-wrapをインストールしていない場合が上図，インストールして設定すれば下図のように見える．あくまで，Emacsの画面上でword-wrapしているように見えるだけで，実際のファイルではなが～い横１行のままの状態が維持されている．\n      これも一度使い始めると，無くてはならないモノとなるパッケージである．","tags":["emacs","org-mode","adaptive","wrap","indentation"],"title":"Emacsの長い行を折り返して見やすくするが実際の行は変えない．adaptive-wrap —Correct indentation for wrapped lines","type":"post"},{"authors":null,"categories":null,"content":"org-modeで文書を書いていてhtmlにexportする際は，C-e h oとするわけだが，段々とこれが面倒になってくることがある．そこで，ネットを探ってみると，やはり，なんでも載ってるredditにhtml exportを自動化する関数の記事があった．\n Table of Contents  toggle-org-html-export-on-save directoryの内容が変更されると，自動でhtmlを再読込する． 使用方法    toggle-org-html-export-on-save  情報元：How to auto export html when saving in org-mode?  例によって，下記のようにinit.orgに書き込めばよい．\n#+begin_src emacs-lisp (defun toggle-org-html-export-on-save () (interactive) (if (memq \u0026#39;org-html-export-to-html after-save-hook) (progn (remove-hook \u0026#39;after-save-hook \u0026#39;org-html-export-to-html t) (message \u0026#34;Disabled org html export on save for current buffer...\u0026#34;)) (add-hook \u0026#39;after-save-hook \u0026#39;org-html-export-to-html nil t) (message \u0026#34;Enabled org html export on save for current buffer...\u0026#34;))) #+end_src これで，toggle-org-html-export-on-saveで，htmlを自動で出力するかどうかを切り替え可能となる．しかし，これだけでは，org文書を保存するたびにブラウザーを手動でreloadしないといけなくなり，面倒である．自動でreloadしてくれるコマンドがあれば便利である．探してみると，これもネットに転がっていた．\ndirectoryの内容が変更されると，自動でhtmlを再読込する．  情報元：Watch for file changes and refresh your browser automatically 上記サイトに有るrubyのスクリプトが使えそうなので，頂いた． rubyのインストールについては，以下のようなサイトを参考  MacにHomeBrew,rbenv,bundlerをインストールする Ruby入門 01.導入（Macに最新版のRubyを入れる） Ruby初学者のRuby On Rails 環境構築【Mac】   しかし，上記サイトのスクリプトをそのまま使用するとと，reloadの際にページの先頭まで戻ってしまい不便！ 結局，上記サイトのFirefox用のスクリプトを参考に少し書き換えた下記のSafari用のスクリプトを使用すると，reloadの際に先頭まで戻らないので，こちらを使用することとした．  #!/usr/bin/env ruby # watch.rb by Brett Terpstra, 2011 \u0026lt;http://brettterpstra.com\u0026gt; # with credit to Carlo Zottmann \u0026lt;https://github.com/carlo/haml-sass-file-watcher\u0026gt; trap(\u0026#34;SIGINT\u0026#34;) { exit } if ARGV.length \u0026lt; 2 puts \u0026#34;Usage: #{$0} watch_folder keyword\u0026#34; puts \u0026#34;Example: #{$0} . mywebproject\u0026#34; exit end dev_extension = \u0026#39;dev\u0026#39; filetypes = [\u0026#39;css\u0026#39;,\u0026#39;html\u0026#39;,\u0026#39;htm\u0026#39;,\u0026#39;php\u0026#39;,\u0026#39;rb\u0026#39;,\u0026#39;erb\u0026#39;,\u0026#39;less\u0026#39;,\u0026#39;js\u0026#39;] watch_folder = ARGV[0] keyword = ARGV[1] puts \u0026#34;Watching #{watch_folder} and subfolders for changes in project files...\u0026#34; while true do files = [] filetypes.each {|type| files += Dir.glob( File.join( watch_folder, \u0026#34;**\u0026#34;, \u0026#34;*.#{type}\u0026#34; ) ) } new_hash = files.collect {|f| [ f, File.stat(f).mtime.to_i ] } hash ||= new_hash diff_hash = new_hash - hash unless diff_hash.empty? hash = new_hash diff_hash.each do |df| puts \u0026#34;Detected change in #{df[0]}, refreshing\u0026#34; %x{osascript\u0026lt;\u0026lt;ENDGAME tell app \u0026#34;Safari\u0026#34; to activate tell app \u0026#34;System Events\u0026#34; keystroke \u0026#34;r\u0026#34; using command down end tell ENDGAME } end end sleep 1 end  このスクリプトにwatch_safari.rbという名前をつけてパスが通っている/usr/local/binに保存し，chomod a+x watch_safari.rbとして実行権限を付けた． Usage: /usr/local/bin/watch_safari.rb watch_folder keyword パスを通しておけば，watch_safari.rb watch_folder keyword で大丈夫  使用方法  /Data/Hoge/Fuga/hogefuga.orgを書いているとすると以下のようにそのディレクトリをみはらせておく．  $ cd /Data/Hoge $ watch_safari.rb Hoge hogefuga.html  org-modeでhogefuga.orgを書きはじめるときに，M-x toggle-org-html-export-on-save として保存するたびに自動的に新たなhtmlがexportされるようにする． 最初だけは，C-e h oでhtmlをexportして，safariでhogefuga.htmlを開いておく． 以降は，hogefuga.org文書を保存するたびに，現在見ている場所に戻った状態で最新のhtmlに更新されるようになる．便利である．  以上はOSX上のSafariを使用している場合であるが，他のブラウザーでも少し変更するだけで同じことができるはずである．\n","date":1546700400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548950793,"objectID":"a500c880ca73585cf9b412f685cc4093","permalink":"/post/auto_html_export/","publishdate":"2019-01-06T00:00:00+09:00","relpermalink":"/post/auto_html_export/","section":"post","summary":"org-modeで文書を書いていてhtmlにexportする際は，C-e h oとするわけだが，段々とこれが面倒になってくることがある．そこで，ネットを探ってみると，やはり，なんでも載ってるredditにhtml exportを自動化する関数の記事があった．\n Table of Contents  toggle-org-html-export-on-save directoryの内容が変更されると，自動でhtmlを再読込する． 使用方法    toggle-org-html-export-on-save  情報元：How to auto export html when saving in org-mode?  例によって，下記のようにinit.orgに書き込めばよい．\n#+begin_src emacs-lisp (defun toggle-org-html-export-on-save () (interactive) (if (memq \u0026#39;org-html-export-to-html after-save-hook) (progn (remove-hook \u0026#39;after-save-hook \u0026#39;org-html-export-to-html t) (message \u0026#34;Disabled org html export on save for current buffer...\u0026#34;)) (add-hook \u0026#39;after-save-hook \u0026#39;org-html-export-to-html nil t) (message \u0026#34;Enabled org html export on save for current buffer...\u0026#34;))) #+end_src これで，toggle-org-html-export-on-saveで，htmlを自動で出力するかどうかを切り替え可能となる．しかし，これだけでは，org文書を保存するたびにブラウザーを手動でreloadしないといけなくなり，面倒である．自動でreloadしてくれるコマンドがあれば便利である．探してみると，これもネットに転がっていた．","tags":["emacs","org-mode","autoexport","html","autorefresh","browser"],"title":"Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする","type":"post"},{"authors":null,"categories":null,"content":"org-modeで文章を書いているときに，他のsubtreeが邪魔で消したくなることがある．そして必要になれば，また，もとに戻すことができれば便利である．これを実現してくれるパッケージがrecursive-narrowである．\nインストールと設定 インストールは例によって，init.orgに以下のように書き込むだけである．\n#+begin_src emacs-lisp (use-package recursive-narrow :ensure t) #+end_src これでインストールと設定は終了である．\n使用法 使い方も実に簡単であり，\u0026ldquo;C-x n n\u0026quot;で現在カーソルがあるsubtree以下のみが表示されるようになり，\u0026ldquo;C-x n w\u0026quot;で元の表示に戻る．これではよくわからないので，実際の画像を示す．まず，最初の画像では全体の画面が表示されており，1951行目の「Org-modeで再帰的に」の行にカーソルがある．\n   ここで，\u0026ldquo;C-x n n\u0026quot;とやると，次の画面のようになる．つまり，1951行目以降のsubtreeのみが表示される．\n   次にカーソルを1962行目の「インストールと設定」に移動する（画像ではすでに移動済み）．そして，再度\u0026quot;C-x n n\u0026quot;とやると，以下の画像のようになる．\n   つまり，「インストールと設定」のsubtreeのみの表示となるわけである．集中したい領域だけが表示されて，効率よく入力できる．\n広い領域の表示が必要となれば，\u0026ldquo;C-x n w\u0026quot;とやると，1つ前の画像の状態に戻る．そして，もう一度\u0026quot;C-x n w\u0026quot;とやると，最初の状態に戻る．なんということはないのであるが，便利である．\n","date":1545577200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545655133,"objectID":"96b009d063642c0db1e70ea945dfa066","permalink":"/post/org-mode_recursive-narrow/","publishdate":"2018-12-24T00:00:00+09:00","relpermalink":"/post/org-mode_recursive-narrow/","section":"post","summary":"org-modeで文章を書いているときに，他のsubtreeが邪魔で消したくなることがある．そして必要になれば，また，もとに戻すことができれば便利である．これを実現してくれるパッケージがrecursive-narrowである．\nインストールと設定 インストールは例によって，init.orgに以下のように書き込むだけである．\n#+begin_src emacs-lisp (use-package recursive-narrow :ensure t) #+end_src これでインストールと設定は終了である．\n使用法 使い方も実に簡単であり，\u0026ldquo;C-x n n\u0026quot;で現在カーソルがあるsubtree以下のみが表示されるようになり，\u0026ldquo;C-x n w\u0026quot;で元の表示に戻る．これではよくわからないので，実際の画像を示す．まず，最初の画像では全体の画面が表示されており，1951行目の「Org-modeで再帰的に」の行にカーソルがある．\n   ここで，\u0026ldquo;C-x n n\u0026quot;とやると，次の画面のようになる．つまり，1951行目以降のsubtreeのみが表示される．\n   次にカーソルを1962行目の「インストールと設定」に移動する（画像ではすでに移動済み）．そして，再度\u0026quot;C-x n n\u0026quot;とやると，以下の画像のようになる．\n   つまり，「インストールと設定」のsubtreeのみの表示となるわけである．集中したい領域だけが表示されて，効率よく入力できる．\n広い領域の表示が必要となれば，\u0026ldquo;C-x n w\u0026quot;とやると，1つ前の画像の状態に戻る．そして，もう一度\u0026quot;C-x n w\u0026quot;とやると，最初の状態に戻る．なんということはないのであるが，便利である．","tags":["orgmode","emacs","recursive","narrow"],"title":"Org-modeで再帰的にsubtreeを絞ったり広げたりする（recursive-narrow）","type":"post"},{"authors":null,"categories":null,"content":"org-modeで文書を書いてhtmlにexportすると，素のままでは，なんの愛想もない．特にいくつかの項目をまとめた要約などを並べていくときは，side columnなどがあって，すぐに行きたいところに飛べるようになっていると嬉しい．ということで，今回はorg-modeをhtmlにexportするときのthemeがテーマである．．．．．\nとにかく，たくさんのthemesが存在する．まずは以下のサイトをチェック，というか以下を読めばこのブログは読まなくても良いような．．．(^^;;;\n org-modeのHTMLテーマ org-modeのHTMLテーマ第2弾 How to export Org mode files into awesome HTML in 2 minutes org-spec  私のお気に入りは，ReadTheOrg（上記の1, 3にある）とorg-spec（上記の4）である．\nTable of Contents ReadTheOrg これはRead the Docsで使われているthemeのcloneである．一番簡単な使い方は，3にあるようにsetup fileをorg fileのpreambleに書いておくことである．\n#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup あるいは，3からOrg-HTML themes projectをダウンロードしてきて解凍しローカルの\u0026quot;setup file\u0026quot;へのパスを書き込めば，ネットの接続に依存せずにexportできるようになる．たとえば，/Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setupに設定ファイルがあるとすると以下のようにすれば良い．\n#+SETUPFILE: /Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setup 以下に研究会で発表するスライド原稿を作る下準備として，実際に10個の論文をまとめたorg fileの一部を掲示しておく．左に論文のタイトルが並び，見ている論文の小見出しが自動的に展開される．subheadの色も設定されており，読みやすい．デザインもプロっぽい印象である．書いた内容にかかわらず，なんとなく賢くなったような気分になれる（笑）．\n   org-spec An Org-mode template for technical specification documents and HTML publishing. とのことで，技術よりのthemeである．特徴としては，Ditaa, Graphviz \u0026amp; PlantUMLなどによりテキストベースで図が書ける．表に対応，自動的にアップデートするフィールド，PDF生成にも対応，コードブロックの基本的なsyntax highlightingなどがある．実際の例としてhttps://demo.thi.ng/org-spec/がある．\nこちらの使い方は少しだけ面倒である．リンク先からorg-specをダウンロードして解凍する．ここで，style.cssが/Hoge/Fuga/org-spec-master/css/style.cssに保存されたとする．ダウンロードして来たファイルに含まれているindex.orgに全て書いてあるので，それを真似てorg fileのpreambleに次のように書いておく．\n#+HTML_HEAD: \u0026lt;link href=\u0026#34;http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; #+HTML_HEAD: \u0026lt;link href=\u0026#34;/Hoge/Fuga/org-spec-master/css/style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; #+AUTHOR: taipapa #+EMAIL: your@mail.address #+HTML: \u0026lt;div class=\u0026#34;outline-2\u0026#34; id=\u0026#34;meta\u0026#34;\u0026gt; | *Author* | {{{author}}} ({{{email}}}) | | *Date* | {{{time(%Y-%m-%d %H:%M:%S)}}} | #+HTML: \u0026lt;/div\u0026gt; #+TOC: headlines 2 以下に前述の論文のまとめをこのcssでexportしたものを掲示しておく．印象がかなり変わると思う．subheadなどは最初から展開されている．ReadTheOrgよりもビジネスライクな感じであるが，よりスマートな気もする．その日の気分によって，この2つを使い分けている．\n   以上あげた2つ以外にも無数のthemeが存在する．また，自分でthemeを作ってしまう剛の者もいらっしゃるので，あちこちを探してみるのも一興．．．(^o^)\n","date":1544886000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545448399,"objectID":"8b060d1d96ea26536cf8b6ab092f8db6","permalink":"/post/org-html-export-theme/","publishdate":"2018-12-16T00:00:00+09:00","relpermalink":"/post/org-html-export-theme/","section":"post","summary":"org-modeで文書を書いてhtmlにexportすると，素のままでは，なんの愛想もない．特にいくつかの項目をまとめた要約などを並べていくときは，side columnなどがあって，すぐに行きたいところに飛べるようになっていると嬉しい．ということで，今回はorg-modeをhtmlにexportするときのthemeがテーマである．．．．．\nとにかく，たくさんのthemesが存在する．まずは以下のサイトをチェック，というか以下を読めばこのブログは読まなくても良いような．．．(^^;;;\n org-modeのHTMLテーマ org-modeのHTMLテーマ第2弾 How to export Org mode files into awesome HTML in 2 minutes org-spec  私のお気に入りは，ReadTheOrg（上記の1, 3にある）とorg-spec（上記の4）である．\nTable of Contents ReadTheOrg これはRead the Docsで使われているthemeのcloneである．一番簡単な使い方は，3にあるようにsetup fileをorg fileのpreambleに書いておくことである．\n#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup あるいは，3からOrg-HTML themes projectをダウンロードしてきて解凍しローカルの\u0026quot;setup file\u0026quot;へのパスを書き込めば，ネットの接続に依存せずにexportできるようになる．たとえば，/Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setupに設定ファイルがあるとすると以下のようにすれば良い．\n#+SETUPFILE: /Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setup 以下に研究会で発表するスライド原稿を作る下準備として，実際に10個の論文をまとめたorg fileの一部を掲示しておく．左に論文のタイトルが並び，見ている論文の小見出しが自動的に展開される．subheadの色も設定されており，読みやすい．デザインもプロっぽい印象である．書いた内容にかかわらず，なんとなく賢くなったような気分になれる（笑）．\n   org-spec An Org-mode template for technical specification documents and HTML publishing. とのことで，技術よりのthemeである．特徴としては，Ditaa, Graphviz \u0026amp; PlantUMLなどによりテキストベースで図が書ける．表に対応，自動的にアップデートするフィールド，PDF生成にも対応，コードブロックの基本的なsyntax highlightingなどがある．実際の例としてhttps://demo.thi.ng/org-spec/がある．\nこちらの使い方は少しだけ面倒である．リンク先からorg-specをダウンロードして解凍する．ここで，style.cssが/Hoge/Fuga/org-spec-master/css/style.cssに保存されたとする．ダウンロードして来たファイルに含まれているindex.orgに全て書いてあるので，それを真似てorg fileのpreambleに次のように書いておく．\n#+HTML_HEAD: \u0026lt;link href=\u0026#34;http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; #+HTML_HEAD: \u0026lt;link href=\u0026#34;/Hoge/Fuga/org-spec-master/css/style.","tags":["emacs","orgmode","html","export","css","theme"],"title":"Org-modeでhtml exportの際のthemeについて","type":"post"},{"authors":null,"categories":null,"content":"学会発表や論文作成にあたっては，当然のことながら，その分野の他の研究者の論文を読んでまとめるなどの作業を行う．そこで，論文の要旨などをorg-modeにざっとまとめておくと，pdfにもhtmlにもtextにもexport出来て便利である．pdfは印刷に向いているが，htmlは多くの論文をいっぺんに見るのに向いており，また，compileの時間もpdfより圧倒的に速い．また，色を変えたり，ハイライトしたりするのもhtmlなら容易である．そこで，今回は，org-modeからhtmlへexportする際の有用な小技について書いてみたい．\nOrg Macros フォントの色を変更する方法はいろいろあるが，ハイライトや背景の色の変更までできるこの Org Macrosが一番便利である．内容は，org-modeの便利なマクロ集である．リンク先からダウンロードして，適当なところに保存し，解凍しておく．ここでは，/Users/taipapa/hoge/fuga/org-macros.setupに置くことにする．使い方は簡単で上記のwebsiteに書いてあるとおり，各org fileの先頭に以下のように記述してorg-macros.setupの場所を教えてやれば良い．\n#+INCLUDE: /Users/taipapa/hoge/fuga/org-macros.setup これだけである．\n 注意事項としては，このブログはox-hugoで書いているが，ox-hugoの場合は文書の先頭に上記を書いても効かない．各ポストのpropertyのあとに書いておけば効く．各ポストごとに設定するようになっているらしい．．．．．（全国15人？ぐらいの人にしか意味のない注意書きである）  上記に関しては，ox-hugoの作者であるKaushal Modi氏から以下のような指摘を頂いた．（12月19日追記）  Can you try using #+setupfile instead of #+include? As an example, here is my blog Org source that I export using ox-hugo ( https://gitlab.com/kaushalm\u0026hellip; ), and here is the setup file tha t I \u0026ldquo;include\u0026rdquo; using the more appropriate #+setupfile ( https://gitlab.com/kaushalm\u0026hellip; ).\nAs you see, I use a lot of Org macros, and they all work in my \u0026ldquo;one post per subtree\u0026rdquo; flow.\n ということで，ox-hugoの場合は，以下のように文書の先頭に書いておけば，one-post per subtreeの投稿全てにorg-macroが効くことを確認した．\n#+setupfile: /Users/taipapa/hoge/fuga/org-macros.setup こんなブログにまで目を通してコメントしてくれるのには驚いた．親切な方である．日本語が読める人なのかとも思ったが，どうやらGoogleの翻訳を利用されているようだ．このページだと，A Perfect Autumn Dayに行くと翻訳版を見ることができる．その翻訳レベルにも今更ながら感心した．．．\n 残念ながら，LaTeXへのexportでは，この方法による色の変更などは（現在のところ）効かない．  いくつか使い方の例をあげておく\n{{{color(red, 赤くなるかな？)}}} *{{{color(blue, ボールドで赤くなるかな？)}}}* {{{highlight(yellow, 黄色にハイライトされるかな？)}}} *{{{highlight(yellow, 黄色にハイライトされて文字はボールドになるかな？)}}}* {{{bgcolor(cyan, 背景がシアンになるかな？)}}} *{{{bgcolor(cyan, 背景がシアンになって文字はボールドになるかな？)}}}* これが以下のように表示される．\n 赤くなるかな？ ボールドで赤くなるかな？ 黄色にハイライトされるかな？ 黄色にハイライトされて文字はボールドになるかな？  背景がシアンになるかな？  背景がシアンになって文字はボールドになるかな？  上記以外にも多くのマクロが含まれており，そちらも人によっては有用かもしれない．少しだけ例をあげておく．以下はパネルの例．\n{{{begin_panel}}} Panel example This is a formatted block of text… {{{end_panel}}} これが，\n Panel example This is a formatted block of text…  となる．マニュアルでは以下の使い方を薦めている． #+begin_panel *Panel example* \\\\ This is a formatted block of text... #+end_panel  Panel example This is a formatted block of text\u0026hellip;\n なお，org-modeのマクロ自体に関しては，org-modeのマニュアルの 12.5 Macro replacement を参考にしていただきたい．\n 2020年1月12日　Hugoを使用している人のための追記   2019年の年末にMacBook Pro 16 inch (Catalina)に買い替えた時，Hugoもv.０.61にupgradeした．その際に，HugoのMarkdown用のdefault libraryがGoldmarkに変更になっていることに気がついていなかった．そのためにこのページのフォントの色の変更が働かなくなっていた．数日前に気がついたので，修正した．詳細は以下のサイトを参考．\n参考サイト1：Goldmark – CommonMark compliant, GitHub flavored, fast and flexible – is the new default library for Markdown in Hugo.\n参考サイト2：Just wonder if the migration to Goldmark is going to be smooth ?\n上記のサイトには，「マークダウンファイルにinline HTMLがたくさんあるのなら，unsafe modeを有効にしないといけないかもね」とあるので，config/default/config.tomlの最後に，\n[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true を追加した．これで，Markdownがうまく働くようになり，再びフォントの色も変更されるようになった．\nExporting org-mode to HTML: In-place coloring フォントの色を変える別の方法である．リンク先にある通り，\nこの文章は， *@@html:\u0026lt;font color = \u0026#34;blue\u0026#34;\u0026gt;@@青のボールド@@html:\u0026lt;/font\u0026gt;@@*になって欲しい！ これが以下のように表示される．\nこの文章は， 赤のボールド になって欲しい！\n  org-modeのマニュアルの 12.9.5 Quoting HTML tags も参考のこと\nこちらは設定を必要としないが，やはり，最初に説明したマクロの方がいろいろ出来て便利である．\n次回は，htmlをexportする際のCSSについてまとめてみたい．\n  ","date":1544367600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587910479,"objectID":"a911b15228d0680ada75ce5b36c6a20c","permalink":"/post/html_export/","publishdate":"2018-12-10T00:00:00+09:00","relpermalink":"/post/html_export/","section":"post","summary":"学会発表や論文作成にあたっては，当然のことながら，その分野の他の研究者の論文を読んでまとめるなどの作業を行う．そこで，論文の要旨などをorg-modeにざっとまとめておくと，pdfにもhtmlにもtextにもexport出来て便利である．pdfは印刷に向いているが，htmlは多くの論文をいっぺんに見るのに向いており，また，compileの時間もpdfより圧倒的に速い．また，色を変えたり，ハイライトしたりするのもhtmlなら容易である．そこで，今回は，org-modeからhtmlへexportする際の有用な小技について書いてみたい．\nOrg Macros フォントの色を変更する方法はいろいろあるが，ハイライトや背景の色の変更までできるこの Org Macrosが一番便利である．内容は，org-modeの便利なマクロ集である．リンク先からダウンロードして，適当なところに保存し，解凍しておく．ここでは，/Users/taipapa/hoge/fuga/org-macros.setupに置くことにする．使い方は簡単で上記のwebsiteに書いてあるとおり，各org fileの先頭に以下のように記述してorg-macros.setupの場所を教えてやれば良い．\n#+INCLUDE: /Users/taipapa/hoge/fuga/org-macros.setup これだけである．\n 注意事項としては，このブログはox-hugoで書いているが，ox-hugoの場合は文書の先頭に上記を書いても効かない．各ポストのpropertyのあとに書いておけば効く．各ポストごとに設定するようになっているらしい．．．．．（全国15人？ぐらいの人にしか意味のない注意書きである）  上記に関しては，ox-hugoの作者であるKaushal Modi氏から以下のような指摘を頂いた．（12月19日追記）  Can you try using #+setupfile instead of #+include? As an example, here is my blog Org source that I export using ox-hugo ( https://gitlab.com/kaushalm\u0026hellip; ), and here is the setup file tha t I \u0026ldquo;include\u0026rdquo; using the more appropriate #+setupfile ( https://gitlab.com/kaushalm\u0026hellip; ).\nAs you see, I use a lot of Org macros, and they all work in my \u0026ldquo;one post per subtree\u0026rdquo; flow.","tags":["emacs","orgmode","html","export","css","color"],"title":"Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（2018年12月19日追記）（2020年1月12日追記）","type":"post"},{"authors":null,"categories":null,"content":"以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））にも書いたが，Tufte−LaTeXなるものを愛用している．今回はこれについてもう少し詳しく書いてみたい．\nTable of Contents Tufte-LaTeX  Edward R. Tufteによって作られたページレイアウトのためのlatex packageである．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである． さて，このスタイルが何の役に立つかというと，報告書の作成の際に図を入れたりするときに，latexのfloatを使うと案外思うところに挿入されないことがある．このスタイルだと，図は少し小さくなるが，きちんと横に納まってくれるのがよい． Tufte-LaTeXのサイトには，\u0026ldquo;the style of Edward R. Tufte and Richard Feynman\u0026quot;と書かれている．ん，と思って調べてみると，やはり，あの物理学者のファインマンのことであった．興味のある方は，The Feynman-Tufte Principleでググってみると面白いかもしれない． 以前の記事（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記））に書いたようにtexliveをインストールしてあれば，tufte-latexは一緒にインストールされているので，新たにインストールする必要はない．  tufte-org-mode  tufte-org-modeは，上述のlatexのtufte classをorg-modeから使えるようにした有り難いパッケージである．このおかげでlatexの記法を意識することなく，org-modeで普通に文章を書いていき，最後に後述する如く，オマジナイを唱えればTufte styleのpdfができあがる．  設定  下記の2つの設定で使えるようになる．init.orgでの設定の順番はどちらが先でも動く．  tufte-org-modeのインストールと設定   以下のようにinit.orgに書き込んで設定する．\n  ox-tufte-latex.elは上記の tufte-org-modeからダウンロードしてローカルに置いてインストールしている．パスは各自の環境に合わせて変更していただきたい．\n#+begin_src emacs-lisp (quelpa \u0026#39;(ox-tufte-latex :fetcher file :path \u0026#34;/path/to/ox-tufte-latex.el\u0026#34;) ) (use-package ox-tufte-latex) #+end_src   quelpaは，use-packageでうまくインストール出来ないときに重宝する．\n  quelpaについては以下を参照\n Quelpa quelpa.el : 【本邦初公開】MELPAを改善した新しいパッケージ管理システム CaskからQuelpaに移行する    org-modeでtufte-latexの設定   ox-latexの設定などは以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））に書いたようにinit.orgに記述しておく．\n  以下のようにinit.orgに書き込んで設定する．これは以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））と重複するが，念のためにここにも書いておく．\n#+begin_src emacs-lisp ;; tufte-handout class for writing classy handouts and papers (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;tufte-handout\u0026#34; \u0026#34;\\\\documentclass[twoside,nobib]{tufte-handout} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;))) ;; tufte-book class (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;tufte-book\u0026#34; \u0026#34;\\\\documentclass[twoside,nobib]{tufte-book} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026#34; (\u0026#34;\\\\part{%s}\u0026#34; . \u0026#34;\\\\part*{%s}\u0026#34;) (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;))) #+end_src   ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．\n     ここで，l oと打つと普通（Tufte styleではない）のpdfがオープンされてしまう．\n  Tufte styleのpdfを得るためには，T pと打って，Export to Tufte LaTeX の中からAs PDF file and openを選択しなければならない．これで，原稿が得られ，skimでオープンされる．\n  tufteの使用の実例   それでは実例を示してみる．以下のような書類を作成し，Tufte_test.orgとして保存する．hoge_fuga.jpgなどの画像は全てTufte_test.orgファイルと同じdirectoryにあるものとする．\n 前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略\u0026hellip;..(^^;;; :offset -8inによって，図の位置を上にずらしてバランスをとるようにしているのにご注意いただきたい．  #+LaTeX_CLASS: tufte-handout #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=0.6in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+LINK_UP: #+LINK_HOME: #+OPTIONS: author:nil date:nil #+begin_fullwidth \\centering #+LATEX: \\huge{\\textbf{hoge/fugaによる相補的な治療における高難度症例の治療と成績}} \\vspace{0.5cm}\\\\ #+LATEX: \\normalsize{taipapa, 織田信長, 豊臣秀吉, 徳川家康}\\\\ \\vspace{0.5cm}\\\\ #+LATEX: \\normalsize{hogefuga大学大学院 hogefuga研究科 hogefuga分野} #+end_fullwidth * *背景と目的* hogeとfugaを比較し，治療成績を比較する． ​* *結果* まず，hogefugaの軽症例の画像を呈示する (*Fig. [[hoge_fuga2]]*)． \\vspace{0.25cm} そのころわたくしは、モリーオ市の博物局に勤めて居りました。 十八等官でしたから役所のなかでも、ずうっと下の方でしたし俸給もほんのわずかでしたが、受持ちが標本の採集や整理で生れ付き好きなことでしたから、わたくしは毎日ずいぶん愉快にはたらきました。殊にそのころ、モリーオ市では競馬場を植物園に拵え直すというので、その景色のいいまわりにアカシヤを植え込んだ広い地面が、切符売場や信号所の建物のついたまま、わたくしどもの役所の方へまわって来たものですから、わたくしはすぐ宿直という名前で月賦で買った小さな蓄音器と二十枚ばかりのレコードをもって、その番小屋にひとり住むことになりました。わたくしはそこの馬を置く場所に板で小さなしきいをつけて一疋の山羊を飼いました。毎朝その乳をしぼってつめたいパンをひたしてたべ、それから黒い革のかばんへすこしの書類や雑誌を入れ、靴もきれいにみがき、並木のポプラの影法師を大股にわたって市の役所へ出て行くのでした。 あのイーハトーヴォのすきとおった風、夏でも底に冷たさをもつ青いそら、うつくしい森で飾られたモリーオ市、郊外のぎらぎらひかる草の波。 またそのなかでいっしょになったたくさんのひとたち、ファゼーロとロザーロ、羊飼のミーロや、顔の赤いこどもたち、地主のテーモ、山猫博士のボーガント・デストゥパーゴなど、いまこの暗い巨きな石の建物のなかで考えていると、みんなむかし風のなつかしい青い幻燈のように思われます。では、わたくしはいつかの小さなみだしをつけながら、しずかにあの年のイーハトーヴォの五月から十月までを書きつけましょう。 \\vspace{0.25cm} ついで，hogefugaの重症例の画像を呈示する (*Fig. [[hoge_fuga]]*)． #+NAME: hoge_fuga2 #+caption: hoge-fuga（軽症例である） #+attr_latex: :float margin :width 2.8in :offset -8in #+attr_latex: :vertical-alignment t [[./hoge_fuga2.jpg]] #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float margin :width 2.8in :offset -2in #+attr_latex: :vertical-alignment t [[./hoge_fuga.jpg]] * *結論* hogefugaによる治療は有効である．   ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e T pと打てば，以下のようなpdfがskimで開かれる．\n     上述のように，:offset の部分で図の位置を調整している．これなしだと，かなり下の方に位置してしまう．\n  なかなか良い感じになっている．(^o^)\n  今回は，Tufte styleの紹介であった．実は，このスタイルを手術所見を書くのに使用している．\n    ","date":1542121200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542373995,"objectID":"8f73b6a3c8fabe735d886db1f1723522","permalink":"/post/tufte/","publishdate":"2018-11-14T00:00:00+09:00","relpermalink":"/post/tufte/","section":"post","summary":"以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））にも書いたが，Tufte−LaTeXなるものを愛用している．今回はこれについてもう少し詳しく書いてみたい．\nTable of Contents Tufte-LaTeX  Edward R. Tufteによって作られたページレイアウトのためのlatex packageである．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである． さて，このスタイルが何の役に立つかというと，報告書の作成の際に図を入れたりするときに，latexのfloatを使うと案外思うところに挿入されないことがある．このスタイルだと，図は少し小さくなるが，きちんと横に納まってくれるのがよい． Tufte-LaTeXのサイトには，\u0026ldquo;the style of Edward R. Tufte and Richard Feynman\u0026quot;と書かれている．ん，と思って調べてみると，やはり，あの物理学者のファインマンのことであった．興味のある方は，The Feynman-Tufte Principleでググってみると面白いかもしれない． 以前の記事（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記））に書いたようにtexliveをインストールしてあれば，tufte-latexは一緒にインストールされているので，新たにインストールする必要はない．  tufte-org-mode  tufte-org-modeは，上述のlatexのtufte classをorg-modeから使えるようにした有り難いパッケージである．このおかげでlatexの記法を意識することなく，org-modeで普通に文章を書いていき，最後に後述する如く，オマジナイを唱えればTufte styleのpdfができあがる．  設定  下記の2つの設定で使えるようになる．init.orgでの設定の順番はどちらが先でも動く．  tufte-org-modeのインストールと設定   以下のようにinit.orgに書き込んで設定する．\n  ox-tufte-latex.elは上記の tufte-org-modeからダウンロードしてローカルに置いてインストールしている．パスは各自の環境に合わせて変更していただきたい．\n#+begin_src emacs-lisp (quelpa \u0026#39;(ox-tufte-latex :fetcher file :path \u0026#34;/path/to/ox-tufte-latex.el\u0026#34;) ) (use-package ox-tufte-latex) #+end_src   quelpaは，use-packageでうまくインストール出来ないときに重宝する．\n  quelpaについては以下を参照\n Quelpa quelpa.el : 【本邦初公開】MELPAを改善した新しいパッケージ管理システム CaskからQuelpaに移行する    org-modeでtufte-latexの設定   ox-latexの設定などは以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））に書いたようにinit.","tags":["tufte","latex","org","mode"],"title":"Tufte-LaTeXとtufte-org-modeについて","type":"post"},{"authors":null,"categories":null,"content":"Rとは，オープンソース・フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である（Wikipediaより）．org-modeと同じくらい必要不可欠なRではあるが，定期的にupdateする必要がある．いや，まぁ，したほうが良い，というか，しないと新しいパッケージが試せなかったりするので，しないではいられない．しかし，updateすると，たいていどこかでハマる．そこで，今回は，ハマったときの対処法を自分のためにまとめておくことにする．ハマるのはbioconductorの方が多いような気がする．ちなみに当方の環境は，MacBook Pro (15-inch, Late 2016) macOS Sierra 10.12.6である．先日もRを3.5.1にupdateしてハマったばかりである\u0026hellip;..(^^;;;\ngccのリンク絡みのトラブル   大体は以下で直ることが多い（r has dependency on gcc@6, but only lists gcc (which has updated to 7) #5587）\n$ brew link --overwrite gcc   XMLが入らない   XMLを入れるのが目的ではなく，なにか別のパッケージをインストールしようとして，それがXMLに依存しており，XMLを入れようとしてハマることが多いと思う．エラーメッセージは，configure: error: “libxml not found”である．しかし，homebrewで，brew listしてみると，libxml2はインストールされている．このあたりは，Installing R package XML on MacOS 10.13.6と同じである．対処法は，同サイトや引用元のCannot install XML package in rにある通り，以下のようにコンパイラーに正しいxml2-configの場所を教えてやれば良い．\nSys.setenv(XML_CONFIG = \u0026#34;/usr/local/Cellar/libxml2/2.9.7/bin/xml2-config\u0026#34;) なお，上記を入力するのはRのコンソールである．通常のterminalにexportで入力しても効かないので注意すること！（これでどれだけ時間を無駄にしたことか．．．(ToT)）\n  Cairoなどのインストール時に，#include \u0026lt;X11/Xlib.h\u0026gt; でハマる．   \u0026lsquo;X11/Xlib.h\u0026rsquo; file not found, #include \u0026lt;X11/Xlib.h\u0026gt; のようなエラーが出てコンパイルできないことがある（例えば，\u0026ldquo;Cairo\u0026rdquo; packageなど）．要するにXlib.hの在り処が分からんということである．mdfind（Mac版のlocate）で探してみると，以下のような結果が得られる．\n$ mdfind -name Xlib.h | grep X11 /opt/X11/include/cairo/cairo-xlib.h /opt/X11/include/X11/Xlib.h /System/Library/Frameworks/Tk.framework/Versions/8.4/Headers/X11/Xlib.h /System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h そこで，目的のXlib.hは，/opt/X11/include/X11/Xlib.hと分かるので，include directoryにこれを含めるように指示すれば良い．これも，前項と同じく，Rのコンソールに入力すること！（これでどれだけ．．．以下同文）\nSys.setenv(C_INCLUDE_PATH = \u0026#34;/opt/X11/include\u0026#34;) これで，コンパイルできるようになるはずである．\n  どこにX11/Xlib.hが入っているかは，インストールの仕方により色々であろうから，場所を確認してから上記の操作を行うようにする．\n  なお，ネットのあちこちに，Xquartzをdowngradeすればコンパイルできる，みたいなことが書いてあったが，あれはなんなのだろうか．．．？\n  rsvgのインストール時に，xcb-shm.pcがないと怒られる．   こんな感じである．\n\u0026gt; biocLite(\u0026#34;rsvg\u0026#34;) ................................... Package xcb-shm was not found in the pkg-config search path. Perhaps you should add the directory containing `xcb-shm.pc\u0026#39; to the PKG_CONFIG_PATH environment variable Package \u0026#39;xcb-shm\u0026#39;, required by \u0026#39;cairo\u0026#39;, not found Found INCLUDE_DIR and/or LIB_DIR! Using PKG_CFLAGS=-I/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig/librsvg-2.0.pc Using PKG_LIBS=-L/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig -lrsvg ------------------------- ANTICONF ERROR --------------------------- Configuration failed because librsvg-2.0 was not found. Try installing: ​* deb: librsvg2-dev (Debian, Ubuntu, etc) ​* rpm: librsvg2-devel (Fedora, EPEL) ​* csw: librsvg_dev, sunx11_devel (Solaris) ​* brew: librsvg (OSX) If librsvg-2.0 is already installed, check that \u0026#39;pkg-config\u0026#39; is in your PATH and PKG_CONFIG_PATH contains a librsvg-2.0.pc file. If pkg-config is unavailable you can set INCLUDE_DIR and LIB_DIR manually via: R CMD INSTALL --configure-vars=\u0026#39;INCLUDE_DIR=... LIB_DIR=...\u0026#39; -------------------------------------------------------------------- ERROR: configuration failed for package ‘rsvg’ ​* removing ‘/usr/local/Cellar/r/3.5.1/lib/R/library/rsvg’ The downloaded source packages are in ‘/private/var/folders/rq/hj_634613dbfzs41djqt52y80000gn/T/RtmpzsGqp0/downloaded_packages’ Updating HTML index of packages in \u0026#39;.Library\u0026#39; Making \u0026#39;packages.html\u0026#39; ... done 警告メッセージ: install.packages(pkgs = doing, lib = lib, ...) で: installation of package ‘rsvg’ had non-zero exit status   要するに，xcb-shm.pcのあるディレクトリをPKG＿CONFIG＿DIRに追加しろと言ってるので，xcb-shm.pcがどこにあるかをmdfindで探してから，言われるとおり追加する．\n$ mdfind -name xcb-shm.pc /opt/X11/lib/pkgconfig/cairo-xcb-shm.pc /opt/X11/lib/pkgconfig/xcb-shm.pc /usr/local/Cellar/cairo/1.14.8/lib/pkgconfig/cairo-xcb-shm.pc /usr/local/Cellar/cairo/1.14.10/lib/pkgconfig/cairo-xcb-shm.pc /usr/local/Cellar/cairo/1.14.12/lib/pkgconfig/cairo-xcb-shm.pc   上記のように，/opt/X11/lib/pkgconfig/xcb-shm.pcとなっているので，これを追加する．このときも上述のごとく，RのコンソールでSys.setenvを使う．\n\u0026gt; Sys.setenv(PKG_CONFIG_PATH = \u0026#34;/opt/X11/lib/pkgconfig\u0026#34;)   これで，rsvgはうまくコンパイルされる．\n  今回はいきなりのRネタになってしまった．\n","date":1540566000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542287390,"objectID":"33c4b7ba3c9254a4b822a56099cd438e","permalink":"/post/r_homebrew_update_error/","publishdate":"2018-10-27T00:00:00+09:00","relpermalink":"/post/r_homebrew_update_error/","section":"post","summary":"Rとは，オープンソース・フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である（Wikipediaより）．org-modeと同じくらい必要不可欠なRではあるが，定期的にupdateする必要がある．いや，まぁ，したほうが良い，というか，しないと新しいパッケージが試せなかったりするので，しないではいられない．しかし，updateすると，たいていどこかでハマる．そこで，今回は，ハマったときの対処法を自分のためにまとめておくことにする．ハマるのはbioconductorの方が多いような気がする．ちなみに当方の環境は，MacBook Pro (15-inch, Late 2016) macOS Sierra 10.12.6である．先日もRを3.5.1にupdateしてハマったばかりである\u0026hellip;..(^^;;;\ngccのリンク絡みのトラブル   大体は以下で直ることが多い（r has dependency on gcc@6, but only lists gcc (which has updated to 7) #5587）\n$ brew link --overwrite gcc   XMLが入らない   XMLを入れるのが目的ではなく，なにか別のパッケージをインストールしようとして，それがXMLに依存しており，XMLを入れようとしてハマることが多いと思う．エラーメッセージは，configure: error: “libxml not found”である．しかし，homebrewで，brew listしてみると，libxml2はインストールされている．このあたりは，Installing R package XML on MacOS 10.13.6と同じである．対処法は，同サイトや引用元のCannot install XML package in rにある通り，以下のようにコンパイラーに正しいxml2-configの場所を教えてやれば良い．\nSys.setenv(XML_CONFIG = \u0026#34;/usr/local/Cellar/libxml2/2.9.7/bin/xml2-config\u0026#34;) なお，上記を入力するのはRのコンソールである．通常のterminalにexportで入力しても効かないので注意すること！（これでどれだけ時間を無駄にしたことか．．．(ToT)）\n  Cairoなどのインストール時に，#include \u0026lt;X11/Xlib.h\u0026gt; でハマる．   \u0026lsquo;X11/Xlib.h\u0026rsquo; file not found, #include \u0026lt;X11/Xlib.h\u0026gt; のようなエラーが出てコンパイルできないことがある（例えば，\u0026ldquo;Cairo\u0026rdquo; packageなど）．要するにXlib.","tags":["R","Rstudio","bioconductor","homebrew","install","update","error"],"title":"RをMac OSX (Sierra)にbrewでinstallしていて，upgradeしてハマったときの対処法","type":"post"},{"authors":null,"categories":null,"content":"文章を書いている際に，ある単語を検索したくなるようなことがよくある．Emacsでのデフォルトはisearchであるが，今回は，これを強化するpackageを紹介する．また，最近開いたディレクトリ directory をまた開きたいこともよくあることである．これについてもivyによる検索が便利であるので紹介する．例によってネタ元を見たほうが早いかもしれない．．．(^^;;;\nTable of Contents swiper.el  参照1：swiper ご本家 参照2：swiper.el: 一覧付き正規表現isearch！C-sを置き換えろ 参照3：Emacsの補完\u0026amp;検索を超強化する Emacsでは，C-sに割り当てられたisearchによる正規表現検索がデフォルトで存在する．これをivyを用いて一覧を付加するようにした強化版である．  Install \u0026amp; setup  以下を，int.orgに書き込む．  #+begin_src emacs-lisp (use-package swiper :ensure t :config (defun isearch-forward-or-swiper (use-swiper) (interactive \u0026#34;p\u0026#34;) ;; (interactive \u0026#34;P\u0026#34;) ;; 大文字のPだと，C-u C-sでないと効かない (let (current-prefix-arg) (call-interactively (if use-swiper \u0026#39;swiper \u0026#39;isearch-forward)))) (global-set-key (kbd \u0026#34;C-s\u0026#34;) \u0026#39;isearch-forward-or-swiper) ) (use-package ivy :ensure t ;; :config ;; (fset \u0026#39;ivy--regex \u0026#39;identity) ) #+end_src  ivyのコメントアウトしている部分については後述する．  使い方   現在開いているEmacsのバッファで，C-sとするだけでよい．\n  下図は，ivyを検索しているところだが，下に\u0026quot;Swiper\u0026quot;と表示されるバッファが表示され，そこに”ivy”と打つと，上の本文の中のivyは黄色でハイライトされる．同時に下のバッファでは，現在見ているivyのある行に下線が引かれ，行数が横に示される．上下のArrow Keyでivyのある行から次の行に飛べる．リターンすれば本文のその行に行ける．非常に便利である．\n     migemo  参照1：Migemo: ローマ字のまま日本語をインクリメンタル検索 参照2：【Emacs/macOS】migemoを有効にし、ローマ字のまま日本語検索する migemoとは，「ローマ字のまま日本語をインクリメンタル検索するため のツールです。かな漢字変換をすることなく日本語のインクリメン タル検索を快適に行うことができます。」 一度使い始めるとやみつきになるので，オススメ！  cmigemoのinstall  まず，C言語で再実装されたcmigemoをインストールする．homebrewで簡単にインストールできる．\u0026ndash;HEADのオプションが必要との記載もあるが，なくても同じであった．  $ brew install cmigemo migemo.elのInstall \u0026amp; setup  以下を，int.orgに書き込む．  #+BEGIN_SRC emacs-lisp (use-package migemo :ensure t :config ;; C/Migemo を使う場合は次のような設定を .emacs に加えます． (setq migemo-command \u0026#34;cmigemo\u0026#34;) (setq migemo-options \u0026#39;(\u0026#34;-q\u0026#34; \u0026#34;--emacs\u0026#34; \u0026#34;-i\u0026#34; \u0026#34;\\a\u0026#34;)) (setq migemo-dictionary \u0026#34;/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict\u0026#34;) ;; 各自の辞書の在り処を指示 (setq migemo-user-dictionary nil) (setq migemo-regex-dictionary nil) ;; charset encoding (setq migemo-coding-system \u0026#39;utf-8-unix)) #+END_SRC avy-migemo（swiperのmigemo対応）   参照１：avy-migemo\n  参照２：avy と migemo を組み合わせたパッケージ avy-migemo.el のご紹介\n  参照３：avyのmigemo対応およびswiperのmigemo対応\n  上記のswiperだけでも十分に便利であるが，swiperをmigemoに対応させることで，更に便利になる．\n  前述したswiper.elでのコメントアウトした設定部分，つまり，\n;; (fset \u0026#39;ivy--regex \u0026#39;identity) は，コメントアウトしておかないと，migemo化を無効にしてしまうので注意。\n  Install \u0026amp; setup  以下を，int.orgに書き込む．  #+begin_src emacs-lisp (use-package avy-migemo :ensure t :config (avy-migemo-mode 1) (setq avy-timeout-seconds nil) (require \u0026#39;avy-migemo-e.g.swiper) (global-set-key (kbd \u0026#34;C-M-;\u0026#34;) \u0026#39;avy-migemo-goto-char-timer) ;; (global-set-key (kbd \u0026#34;M-g m m\u0026#34;) \u0026#39;avy-migemo-mode) ) #+end_src 使い方   現在開いているEmacsのバッファで，C-sとするだけでよい．\n  下図は，\u0026ldquo;taiou\u0026rdquo;，つまり，「対応」を検索しているところである．migemo化する前と同じようにローマ字で日本語が検索できる．\n  当たり前だが，漢字を入力しても検索できる．\n     最近開いたディレクトリを開く   参照：OPEN A RECENT DIRECTORY IN DIRED: REVISITED　ネタ元\n  ivyを使って最近開いたディレクトリを動的に探索する方法をコード化してくれているので紹介する．\n  以下のコードをinit.orgに書き込めば良い．\n#+begin_src emacs-lisp (defun bjm/ivy-dired-recent-dirs () \u0026#34;Present a list of recently used directories and open the selected one in dired\u0026#34; (interactive) (let ((recent-dirs (delete-dups (mapcar (lambda (file) (if (file-directory-p file) file (file-name-directory file))) recentf-list)))) (let ((dir (ivy-read \u0026#34;Directory: \u0026#34; recent-dirs :re-builder #\u0026#39;ivy--regex :sort nil :initial-input nil))) (dired dir)))) (global-set-key (kbd \u0026#34;C-x C-d\u0026#34;) \u0026#39;bjm/ivy-dired-recent-dirs) #+end_src      C-x C-dすれば，下図のように，最近開いたディレクトリが表示され，その中から行きたいディレクトリを選んで，リターンすれば良い．\n     以上，今回は小ネタだが非常に有用なものばかりを紹介した．\n","date":1539442800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539505702,"objectID":"69bf698e37d949251cafee576cef09cf","permalink":"/post/swiper_migemo/","publishdate":"2018-10-14T00:00:00+09:00","relpermalink":"/post/swiper_migemo/","section":"post","summary":"文章を書いている際に，ある単語を検索したくなるようなことがよくある．Emacsでのデフォルトはisearchであるが，今回は，これを強化するpackageを紹介する．また，最近開いたディレクトリ directory をまた開きたいこともよくあることである．これについてもivyによる検索が便利であるので紹介する．例によってネタ元を見たほうが早いかもしれない．．．(^^;;;\nTable of Contents swiper.el  参照1：swiper ご本家 参照2：swiper.el: 一覧付き正規表現isearch！C-sを置き換えろ 参照3：Emacsの補完\u0026amp;検索を超強化する Emacsでは，C-sに割り当てられたisearchによる正規表現検索がデフォルトで存在する．これをivyを用いて一覧を付加するようにした強化版である．  Install \u0026amp; setup  以下を，int.orgに書き込む．  #+begin_src emacs-lisp (use-package swiper :ensure t :config (defun isearch-forward-or-swiper (use-swiper) (interactive \u0026#34;p\u0026#34;) ;; (interactive \u0026#34;P\u0026#34;) ;; 大文字のPだと，C-u C-sでないと効かない (let (current-prefix-arg) (call-interactively (if use-swiper \u0026#39;swiper \u0026#39;isearch-forward)))) (global-set-key (kbd \u0026#34;C-s\u0026#34;) \u0026#39;isearch-forward-or-swiper) ) (use-package ivy :ensure t ;; :config ;; (fset \u0026#39;ivy--regex \u0026#39;identity) ) #+end_src  ivyのコメントアウトしている部分については後述する．  使い方   現在開いているEmacsのバッファで，C-sとするだけでよい．","tags":["emacs","swiper","ivy","migemo","search","avy"],"title":"Swiper, ivy, avy, migemoによるEmacsの検索強化","type":"post"},{"authors":null,"categories":null,"content":"以前の記事（beamerでスライド原稿用pdfを作成する（その１））で，Emacsでbeamerを用いてlatexのソースを書いてコンパイルし，スライド原稿としてpdfを出力する方法をまとめた．この際に，pdfの特定の箇所がlatexのソースでどこに当たるのかがわかったり，逆に，latexのソースの特定の箇所がpdf上のどこに当たるのかがわかったりすると便利である．今回はそれについてまとめる．なお，auctexの全般的な設定については，TeXWikiのmacOS での設定例 を参照していただきたい．\nTable of Contents  参照：Mac OS X El Capitan の AUCTeX の設定 参照：skimとの連携 参照：AUCTeX の設定と便利な機能 参照：TeX_and_PDF_Synchronization  backward search   こちらのほうが便利なので最初に説明する．\n  skimで表示されたpdf上の特定の箇所に該当するLaTeX文書の箇所を探して示してくれる．\n  この機能を可能にするには，skimの環境設定を開いて「同期する」の初期値を「カスタム」とし，コマンドのところに以下のように打ち込む．\n$ /usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1/bin/emacsclient   defaultでは初期値に「Emacs」となっており，本来ならこれで動くはずだが，homebrewで最新のEmacsをinstallしたために，もともと入っているemacsとはversionが異なる．つまり，サーバーとして起動しているEmacsと、使用するEmacsClientのバージョンが異なることになり，このままでは動かない．そこで，homebrewでインストールした方をfull pathで明示的に指示する必要がある．\n  引数のところには，以下のように打ち込む．\n$ --no-wait +%line \u0026#34;%file\u0026#34;   つまりこうなる．\n     一方，Emacsのinit.orgには以下のように記述して，Emacs serverを立ち上げておく．\n#+begin_src emacs-lisp ;; Starts the Emacs server (server-start) #+end_src   これで，pdf上の任意の箇所で，Shift-Command-Clickすると，該当するlatex documentの箇所に飛ぶ．もし，Emacsが立ち上がっていなければ，Emacsを立ち上げるところからやってくれる．素晴らしい！ これは確かめてみると勘違いであった．Emacsは立ち上げておかないといけない．\n  この機能は知ってしまうと，無くてはならないほど便利に感じる機能である．pdfで間違いを見つけたときに，それがlatexソースのどこに相当するかを同定するのは結構面倒であるが，この機能により一発で同定することができる．\n  該当箇所が少しずれることがあるのが欠点であるが，それでも十分に役に立つ．\n  forward search   こちらも，backward searchほどではないが，役に立つ．\n  Emacs上のlatex document上の特定の箇所に該当するpdfの箇所を探して示してくれる．\n  この機能を可能にするには，init.orgに以下のように記述する．\n#+begin_src emacs-lisp (add-hook \u0026#39;LaTeX-mode-hook (function (lambda () (add-to-list \u0026#39;TeX-command-list \u0026#39;(\u0026#34;displayline\u0026#34; \u0026#34;/Applications/Skim.app/Contents/SharedSupport/displayline %n %s.pdf \\\u0026#34;%b\\\u0026#34;\u0026#34; TeX-run-discard-or-function t t :help \u0026#34;Forward search with Skim\u0026#34;)) ))) #+end_src   これで，C-c C-c displayline により，Emacsのlatex document上の特定の箇所に該当するpdfの箇所に飛んでくれる．pdfの該当するところが赤丸で示される（数秒で消える）．\n  ただし，該当する箇所が結構ずれてしまうことが多い．最近は，beamerでしか使わないので，もしかすると，通常のlatex 文書だと狂いなく示すのかもしれない．まぁ，backward searchと違って， なくても困らない機能である．\n  ","date":1538838000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538986908,"objectID":"4e70f972ceddf824137568549df6a4e3","permalink":"/post/synchronization/","publishdate":"2018-10-07T00:00:00+09:00","relpermalink":"/post/synchronization/","section":"post","summary":"以前の記事（beamerでスライド原稿用pdfを作成する（その１））で，Emacsでbeamerを用いてlatexのソースを書いてコンパイルし，スライド原稿としてpdfを出力する方法をまとめた．この際に，pdfの特定の箇所がlatexのソースでどこに当たるのかがわかったり，逆に，latexのソースの特定の箇所がpdf上のどこに当たるのかがわかったりすると便利である．今回はそれについてまとめる．なお，auctexの全般的な設定については，TeXWikiのmacOS での設定例 を参照していただきたい．\nTable of Contents  参照：Mac OS X El Capitan の AUCTeX の設定 参照：skimとの連携 参照：AUCTeX の設定と便利な機能 参照：TeX_and_PDF_Synchronization  backward search   こちらのほうが便利なので最初に説明する．\n  skimで表示されたpdf上の特定の箇所に該当するLaTeX文書の箇所を探して示してくれる．\n  この機能を可能にするには，skimの環境設定を開いて「同期する」の初期値を「カスタム」とし，コマンドのところに以下のように打ち込む．\n$ /usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1/bin/emacsclient   defaultでは初期値に「Emacs」となっており，本来ならこれで動くはずだが，homebrewで最新のEmacsをinstallしたために，もともと入っているemacsとはversionが異なる．つまり，サーバーとして起動しているEmacsと、使用するEmacsClientのバージョンが異なることになり，このままでは動かない．そこで，homebrewでインストールした方をfull pathで明示的に指示する必要がある．\n  引数のところには，以下のように打ち込む．\n$ --no-wait +%line \u0026#34;%file\u0026#34;   つまりこうなる．\n     一方，Emacsのinit.orgには以下のように記述して，Emacs serverを立ち上げておく．\n#+begin_src emacs-lisp ;; Starts the Emacs server (server-start) #+end_src   これで，pdf上の任意の箇所で，Shift-Command-Clickすると，該当するlatex documentの箇所に飛ぶ．もし，Emacsが立ち上がっていなければ，Emacsを立ち上げるところからやってくれる．素晴らしい！ これは確かめてみると勘違いであった．Emacsは立ち上げておかないといけない．\n  この機能は知ってしまうと，無くてはならないほど便利に感じる機能である．pdfで間違いを見つけたときに，それがlatexソースのどこに相当するかを同定するのは結構面倒であるが，この機能により一発で同定することができる．","tags":["latex","pdf","synchronization","tex","emacs","emacsclient"],"title":"Emacsとskimで，latexのソースとpdfの間を行ったり来たり","type":"post"},{"authors":null,"categories":null,"content":"医学系の多くのジャーナルでは，論文投稿の際のフォーマットを Microsoft Word と指定しているところが多い．．．．．\nいま，一瞬，憤りのあまり意識を失いかけたが，気を取り直して続ける．実際のところ，仕事でもしばしばword文書を要求される．イチからwordで文書を書くのはやりたくないわけで，ふと，org-modeからexportできないかと調べてみた．やはり，同じようなことを考える人はいるもので，エライ人はそれを実現させるべく色々な方法を開発していた．それらの中から，自分で試してみてうまく行った方法をまとめておく．使用するのは， pandoc とそれをorg−modeから利用するための ox-pandoc である．\nTable of Contents ox-pandoc   参照サイト1：本家　ox-pandoc\n  参照サイト2：ox-pandoc - org-mode + org-ref to docx with bibliographies\n  参照サイト3：もっと本家　Pandoc a universal document converter\n  pandoc自体の説明は略．ご存知，フォーマット変換のスイスアーミーナイフ．\n  ox-pandocは，pandocを介してorg-mode fileを様々なフォーマットに変換する新しいexporterであり，40種ものフォーマットに変換できる．\n  pandoc 2.0 (or later version)と，bibliography featureを使うならpandoc-citeproc 0.3 (or later)が必要なので，homebrewでインストールする．\n$ brew install pandoc $ brew install pandoc-citeproc   init.orgには以下のように書き込んで，ox-pandocをインストールし，設定する．use-packageを使うと両方がいっぺんにできて便利である．\n#+begin_src emacs-lisp (use-package ox-pandoc :ensure t :config ;; default options for all output formats (setq org-pandoc-options \u0026#39;((standalone . t))) ;; cancel above settings only for \u0026#39;docx\u0026#39; format (setq org-pandoc-options-for-docx \u0026#39;((standalone . nil))) ;; special settings for beamer-pdf and latex-pdf exporters (setq org-pandoc-options-for-beamer-pdf \u0026#39;((pdf-engine . \u0026#34;xelatex\u0026#34;))) (setq org-pandoc-options-for-latex-pdf \u0026#39;((pdf-engine . \u0026#34;xelatex\u0026#34;))) ) #+end_src   latex engineにxelatex以外を使っている場合は，上記の設定をそちらに変更する．\n  以上でorg-mode自体の基本的な設定は終了である．\n  文書の中で実際に引用された論文のみからなる文献リストを生成する方法  このリスト（bib ファイル）を作成しておかないと，Wordをexportする際にうまくいかない． reftex-create-bibtex-fileとbibexportの２つの方法がある．  reftex-create-bibtex-file  参照サイト：reftex-create-bibtex-file Emacsの中に最初から入っているコマンドである． 前回の記事（Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化）の際に作成したhogefuga.orgからpdfをexportした際に同じdirectory内にhogefuga.texも保存されているはずである．これをEmacsでオープンし, M-x reftex-create-bibtex-file と打つ．すると，実際に引用された論文のみからなる文献リストを生成してくれる．この際に名前をどうするかを聞かれるので，適当につける．今回は，extract.bibとした． しかし，たまに，reftex-create-bibtex-fileで引用された論文の一部が欠けてしまうことがある．そのようなときは，第２の方法であるbibexportが役に立つ．  bibexport   参考サイト1：bibexport – Extract a BibTEX file based on a .aux file\n  参考サイト2：Creating .bib file containing only the cited references of a bigger .bib file\n  texliveに含まれているshell script\n  文書の中の \\cite で引用された文献のみを抽出する．上記のreftex-create-bibtex-fileはtex ファイルが有れば抽出できたが，こちらはaux ファイルを必要とする．したがって，まず，org-modeからpdfをexportし，tex ファイルを作成し，次いで，tex ファイルをlatex でコンパイルしてaux ファイルを作成し，そのaux ファイルに対してbibexportを用いるというややこしいことをする必要がある．\n  しかし，reftex-create-bibtex-fileでうまく抽出できないときも，bibexportならうまくいくことが多いので，知っておいて損はない．\n  使い方は以下を参考\nbibexport --help bibexport: a tool to extract BibTeX entries out of .bib files. usage: bibexport [-h|v|n|c|a|d|s|t] [-b|e|es|ec|o|r file] file... Basic options: -------------- -a, --all export the entire .bib files -o bib, --output-file bib write output to file [default: bibexport.bib] -t, --terse operate silently -h, --help print this message and exit -v, --version print version number and exit Advanced options: ----------------- -b bst, --bst bst specifies the .bst style file [default: export.bst] -c, --crossref preserve crossref field [default: no] -n, --no-crossref remove crossref\u0026#39;d entries [default: no] -e bib, --extra bib extra .bib file to be used (crossrefs and strings) -es bib, --extras bib extra .bib file to be used (for strings) -ec bib, --extrac bib extra .bib file to be used (for crossrefs) -p, --preamble write a preamble at beginning of output -r bib, --replace bib replace .bib file(s) in the .aux file -d, --debug create intermediate files but don\u0026#39;t run BibTeX   例えばこんなふうにshellで打つ\n$ bibexport -o extract2.bib hogefuga_English.aux   pandocのための設定  word fileとして出力しても，スタイルが気に入らない可能性は高い．そこで，予めスタイルファイルを自分好みにしておく． 参考サイト1：Defining custom DOCX styles in LibreOffice (and Word) 参考サイト2：Customize styles in Word for Mac 参考サイト3：ドキュメント変換ツールPandoc：ユーザーズガイドを熟読して分かったマニアックな使い方 上記のサイトを参考にスタイルファイルを作成し，~/.pandocにword用に reference.docx として置く．このテンプレートのフォーマットに従ってword fileが出力される． しかし，実は，これが結構面倒くさいのである．念のため自作のものをここに置いておく．  Citation Style Language (CSL)の設定  参考サイト1：Citation Style Language ご本家 参考サイト2：citation-style-language/styles スタイルの在り処 参考サイト3：citation-style-language/styles/stroke.csl 今回使用するスタイル CSLは学術出版の引用と文献スタイルの書式自動化を促進することを目的としたオープンソースプロジェクト．ありがたく使わせていただく． 上記の参考サイト3からstroke.cslをダウンロードする． stroke.cslをexportの対象のorg fileと同じdirectoryに置いておく． これで，Stroke という雑誌の引用書式に従ったスタイルになってword fileがexportされる．  英語論文の場合のorg fileの設定   ここからは，個々のorg-mode file側の設定である．\n  英語の場合は殆どなんの問題もなくexportされる．\n  早速実例を見てみる．まず下のorg fileをhogefuga_English.orgとして保存する．\n#+LaTeX_CLASS: koma-article #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{times} #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:3 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil #+LINK_UP: #+LINK_HOME: #+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease #+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa \\vspace*{-1.5cm} \\hspace{2.5cm} Department of Hogefuga, Hogefuga University ,* Introduction Stroke is estimated to be ranked as the second leading cause of death and the third most common cause of permanent disability around the world.\\cite{Donnan:2008ax} The proportion of ischemic stroke is more than 90% in all stroke. The underlying metabolomic pathophysiology of ischemic stroke, however, remains poorly understood. Recently, metabolome analysis using “omics” method has developed. Mass spectrometry (MS) and nuclear magnetic resonance (NMR) spectroscopy have garnered the most use for profiling a large number of metabolites simultaneously.\\cite{Lewis:2008uq} These technologies offer comprehensive information about thousands of low-molecular mass compounds (less than 2kDa) including lipids, amino acids, peptides, nucleic acids, organic acids, vitamins, thiols and carbohydrates. Metabolomics renders the metabolic profile of a system, the end points of biological events, and reflect the state of a cell or group of cells at a given time.\\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry (GC/MS) is one of the wide-spread techniques, which enables researchers to determine analyte masses with such high precision and accuracy that peptides and metabolites can be identified unambiguously even in complex fluids.\\cite{Lewis:2010oq} The profiling of low molecular weight biochemicals that serve as substrates and products in metabolic pathways is particularly relevant to cardiovascular diseases.\\cite{Lewis:2008uq} At present, however, very few studies have been reported on metabolic profiling of stroke. Unlike myocardial infarction, metabolomic changes in the brain are not sufficiently reflected by blood biomarkers due to the presence of the blood-brain barrier and dilution by peripheral blood.\\cite{kim2013biomarkers} In addition, most of the studies focused on acute stage of stroke.\\cite{Jiang:2011uq,Jung:2011fk,Kimberly:2013mq #+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_6-authors.bst option:-a limit:t   何故か *Introductionの前に２つコンマを打たないとうまくhugoでブログにexportされない（理由は不明，ご教示を乞う）．このために画面上 *Introduction の前にコンマが一つ残っているが，もしコピーして試して見るなら，この余分なコンマは除かないとうまくいかないので注意していただきたい．\n  Emacsで上記のhogefuga_English.orgを開いた状態で，C-c C-e l oとすると，pdfが作成され，下図のようにskimで開かれる．\n      本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている． 何故pdfを作成するかというと， 文書の中で実際に引用された論文のみからなる文献リストを生成する ためである．pdfと一緒にできたtex ファイルで，reftex-create-bibtex-file もしくは bibexportを使って抽出された文献リストであるextract.bibを作成する． 実際に行った手順は以下の通りである．   pdfのexportの際に一緒に生成された hogefuga_English.tex をEmacsで開く．\n  M-x reftex-create-bibtex-file する\n  抽出された文献ファイルをextract.bibと命名し保存\n  しかし，extract.bibは何故か引用された8つの文献のうちの6つしか含まれていなかった．\n  そこで，上述のように bibexport を利用することにした．texファイルをxelatexでコンパイルし，できたaux ファイルにbibexportを適用した．LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）のlatexmkの項を参照のこと．\n$ latexmk -pvc -pdf -view=none hogefuga_English.tex $ bibexport -o extract2.bib hogefuga_English.aux   これで，８つの文献をすべて含むextract2.bibが生成された．\n    英語論文のWord fileのexport   ようやくWord fileへexportできる段階となった．\n  上記で作成したhogefuga_Engolish.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．多分パスも効くが，この原稿専用のリストなので，同じdirectoryの方が混乱することがないであろう．\n#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract2.bib   さらに，最後の文献についての以下の部分は削除する．\n#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t   以上で，下図のようになるので，hogefuga_English_WORD.org として保存する．\n#+LaTeX_CLASS: koma-article #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{times} #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:3 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil #+PANDOC_OPTIONS: csl:/Data/Stroke2018/Survival_CEA_CAS-MN/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract2.bib #+LINK_UP: #+LINK_HOME: #+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease #+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa. \\vspace*{-1.5cm} \\hspace{3cm} Department of Hogefuga, Hogefuga University ,* Introduction Stroke is estimated to be ranked as the second leading cause of death and the third most common cause of permanent disability around the world.\\cite{Donnan:2008ax} The proportion of ischemic stroke is more than 90% in all stroke. The underlying metabolomic pathophysiology of ischemic stroke, however, remains poorly understood. Recently, metabolome analysis using “omics” method has developed. Mass spectrometry (MS) and nuclear magnetic resonance (NMR) spectroscopy have garnered the most use for profiling a large number of metabolites simultaneously.\\cite{Lewis:2008uq} These technologies offer comprehensive information about thousands of low-molecular mass compounds (less than 2kDa) including lipids, amino acids, peptides, nucleic acids, organic acids, vitamins, thiols and carbohydrates. Metabolomics renders the metabolic profile of a system, the end points of biological events, and reflect the state of a cell or group of cells at a given time.\\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry (GC/MS) is one of the wide-spread techniques, which enables researchers to determine analyte masses with such high precision and accuracy that peptides and metabolites can be identified unambiguously even in complex fluids.\\cite{Lewis:2010oq} The profiling of low molecular weight biochemicals that serve as substrates and products in metabolic pathways is particularly relevant to cardiovascular diseases.\\cite{Lewis:2008uq} At present, however, very few studies have been reported on metabolic profiling of stroke. Unlike myocardial infarction, metabolomic changes in the brain are not sufficiently reflected by blood biomarkers due to the presence of the blood-brain barrier and dilution by peripheral blood.\\cite{kim2013biomarkers} In addition, most of the studies focused on acute stage of stroke.\\cite{Jiang:2011uq, Jung:2011fk, Kimberly:2013mq}   *Introductionの前のコンマについては前述のとおりである．\n  org-modeからWord fileへのexportの方法   ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, export via pandoc のメニューが見える．そこで，p xとして，export via pandoc \u0026mdash;\u0026gt; to docx and openを選択する．\n     暫く待つと，下図のようにWordが立ち上がって，docx file（ hogefuga_English_WORD.docx ）が開かれる．\n     全体的なスタイルはまずまずである．\n  本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．\n  文献リストの体裁はインデントに問題ありだが，これは手作業でやっても苦痛でないレベルである．\n  org-modeのオプションが見えてしまっているが，この程度であれば僅かな手作業で消去できる．\n  英語に関しては，pdfと比べると多少見劣りがするが，まず問題ないレベルのWord fileが出力できた．\n    日本語論文の場合のorg fileの設定   前回の記事（Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化）の際に作成したhogefuga.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．\n#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract.bib   さらに，最後の文献についての以下の部分は削除する．\n#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t   以上で，下図のようになるので，hogefuga_WORD.org として保存する．\n  #+LaTeX_CLASS: koma-jarticle #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+OPTIONS: date:nil #+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract.bib #+LINK_UP: #+LINK_HOME: #+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績 #+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康 \\vspace*{-1.5cm} \\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野 * 背景と目的 hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した． * 結果 hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\\cite{Cosentino:2011dn} #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float t :width 3in :align center #+ATTR_HTML: :width 500 :float: wrap :align center [[./hoge_fuga.jpg]] * 結論 hogefugaによる治療は有効である． org-modeからWord fileへのexportの方法   ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, export via pandoc のメニューが見える．そこで，p xとして，export via pandoc \u0026mdash;\u0026gt; to docx and openを選択する．\n     暫く待つと，下図のようにWordが立ち上がって，docx file（ hogefuga_WORD.docx ）が開かれる．\n     本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．\n  Figureのキャプションが消えているが，通常，論文投稿時には，本文と画像は別々になるので，画像自体を本文から削除できるため，問題無しとする．\n  しかし，英語の場合には見られなかった大きな問題が発覚した！　本文が, 濁点分離 してしまっている．\n    Word file の濁点分離を修正する方法  濁点分離 したままでは使いものにならないので，修正する必要がある．しかし，Word fileの内容を点検して，いちいち手作業をやっていては堪らない．そこで，一気に濁点分離を修正する方法はないものかといろいろ探ってみた． 参考サイト1：Wordで文書内の文字をUnicode NFC正規化する方法 参考サイト2：あらゆる文字に濁点と半濁点を付けてみよう 参考サイト3：Macの濁点問題を解決するPython unicodedataモジュール 参考サイト4：濁点問題 参考サイト5：濁点の話 参考サイト6：docx-normarize-nfc 上記の参考サイト4, 5, 6では，emasaka氏により，pythonを用いた方法が報告されており，docx-normarize-nfc としてGithubにアップされている．これはpython scriptであり，.docxファイルをZIPアーカイブとして開き、文書本体のXMLテキストを開いてNFC正規化し、ZIPアーカイブに書き戻すというものであり，これを使わせてもらうことにした．  Pythonの導入   参考サイト：Welcome to Python.org （本家）ご存知いま一番アツい言語．それしか知らなくても下記のようにして使える（笑）\n  まず下準備としてpythonを入れる．\n  homebrew でpython3をインストール\n$ brew install python3   docx-normarize-nfcの導入  docx-normarize-nfc からダウンロードして，/usr/local/bin/ にコピーする．（/usr/local/binにパスが通っているものとする）  濁点分離の修正   これでWord fileに対して上記のスクリプトを使用すれば良い．\n  念のために，Word fileの名前を，hogefuga_WORD_濁点分離修正済み.docxに変更し新規保存しておく．\n  そのうえで，shellで以下の操作を行う\n$ docx-normarize-nfc hogefuga_WORD_濁点分離修正済み.docx   一瞬で修正は終わるので，ファイルをオープンして確かめてみると，下図のように修正されている．素晴らしい．\n     ようやく，使い物になる日本語のWord fileを作成することができた．\n  これで，英語でも日本語でも，pdfからWordにコピペして修正するという難行苦行から解放される．\n  しかし，co-authorとのすり合わせやrevisionの際は，まだ，Wordでの作業が必要とされる．苦行は続くのである．．．．．\n  ","date":1537110000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538192253,"objectID":"6212fec4cbb8007188cbb99e08544974","permalink":"/post/org-mode_paper_4/","publishdate":"2018-09-17T00:00:00+09:00","relpermalink":"/post/org-mode_paper_4/","section":"post","summary":"医学系の多くのジャーナルでは，論文投稿の際のフォーマットを Microsoft Word と指定しているところが多い．．．．．\nいま，一瞬，憤りのあまり意識を失いかけたが，気を取り直して続ける．実際のところ，仕事でもしばしばword文書を要求される．イチからwordで文書を書くのはやりたくないわけで，ふと，org-modeからexportできないかと調べてみた．やはり，同じようなことを考える人はいるもので，エライ人はそれを実現させるべく色々な方法を開発していた．それらの中から，自分で試してみてうまく行った方法をまとめておく．使用するのは， pandoc とそれをorg−modeから利用するための ox-pandoc である．\nTable of Contents ox-pandoc   参照サイト1：本家　ox-pandoc\n  参照サイト2：ox-pandoc - org-mode + org-ref to docx with bibliographies\n  参照サイト3：もっと本家　Pandoc a universal document converter\n  pandoc自体の説明は略．ご存知，フォーマット変換のスイスアーミーナイフ．\n  ox-pandocは，pandocを介してorg-mode fileを様々なフォーマットに変換する新しいexporterであり，40種ものフォーマットに変換できる．\n  pandoc 2.0 (or later version)と，bibliography featureを使うならpandoc-citeproc 0.3 (or later)が必要なので，homebrewでインストールする．\n$ brew install pandoc $ brew install pandoc-citeproc   init.orgには以下のように書き込んで，ox-pandocをインストールし，設定する．use-packageを使うと両方がいっぺんにできて便利である．\n#+begin_src emacs-lisp (use-package ox-pandoc :ensure t :config ;; default options for all output formats (setq org-pandoc-options \u0026#39;((standalone .","tags":["org","mode","word","export","reference","citation","ox","pandoc"],"title":"Emacsのorg-modeで論文を書く（その4：pandocを利用してorg-modeからword [docx]を文献付きでexportする）","type":"post"},{"authors":null,"categories":null,"content":"前回（Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理））は，BibDeskを用いて文献情報をbibtex ファイルとして収集する方法についてまとめた．今回は，この文献情報を利用した引用をEmacsのorg-modeでどのように自動化するかについてまとめる．早い話が，org-modeからlatexのbibtexとreftexの機能を利用するということになる．\nTable of Contents org-mode-reftex-setup   参照サイト：Using Emacs Org-mode to Draft Papers\n  RefTex-ModeというものがEmacsには含まれている．文献や引用の管理のためのパッケージである．詳細はC-h iでマニュアルを見れば分かる，と言いたいところだが，このマニュアルが膨大である．そこで，RefTeX in a Nutshellという2ページほどの要約を読めば，使うのには十分であるとマニュアル自体に書いてある（笑）．実は私はそれすらろくに読んでいないが，以下のように設定すれば，十分に使える．設定方法は，以前の記事（Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する）に記載したとおり，init.orgに書き込めば良い．\n#+begin_src emacs-lisp (defun org-mode-reftex-setup () (load-library \u0026#34;reftex\u0026#34;) (and (buffer-file-name) (file-exists-p (buffer-file-name)) (reftex-parse-all)) (define-key org-mode-map (kbd \u0026#34;C-c )\u0026#34;) \u0026#39;reftex-citation) ) (add-hook \u0026#39;org-mode-hook \u0026#39;org-mode-reftex-setup) #+end_src   上記の設定により，参照サイトの説明のように，org-modeの中でreftex-citationの機能が働くようになる．\n  org-mode-reftex-setupの使用方法   org-modeで文書を書いている最中に文献を引用したい箇所で，C-c ) と打つ\n  すると，まず，どの文献リストを使うかを聞いてくるので，hogefuga-reference.bibなど使いたいリストの名前を打つ．前回説明した方法で収集した文献のbib ファイルが有るはずである．\n  次に，文献を絞り込むためにキーワードを打つように催促されるので，それを打つ．すると，そのキーワードを有する文献のリストがずらずらと並ぶ．下図の例では，stetler と著者名を打ったときの結果が下のバッファに表示されている．該当する文献にカーソルを持ってくるか，クリックして選択し，リターンを押せば決定され，本文の該当箇所にその論文の cite-key，つまり，\\cite{Stetler:2012jt} が入力される．\n     上図の下のバッファ内でも，C-sの検索機能は使えるので，さらに絞り込みが必要な際は便利である．以前の記事（Emacsの設定（その1）Preludeの導入）で述べたようにpreludeを導入して，かつ，helmを有効にしておけば，下図のようにC-sでswiperが使えて更に便利である．（なお，下図では，まず，heat shock proteinと打ち，ズラッと並んだ真ん中のバッファでC-sとやってstetlerと打ったところである．一番下のバッファにstetlerで絞り込まれた候補が並んでいる）\n     ox-bibtex.el   参考サイト：Org and Bibtex\n  上述の作業で，文献を本文中にcite-keyとして引用することはできた．次に必要なのはorg-modeからpdfやhtmlにexportする際に，cite-keyをもとに，文献が雑誌の規定の様式で引用され，最後に文献リストが規定の様式で記述されるようにすることである．この面倒をみてくれるのが，ox-bibtex.el である．\n  ox-bibtex.elは，org-plus-contrib packageの中に含まれているので，まず，org-plus-contribをインストールする．これは，package.el を使えば簡単である．\n  次いで，use-packageを使って，ox-bibtexを設定する．と言っても以下のようにinit.orgに書くだけである．\n(use-package ox-bibtex)   なお，use-packageを使ってox-bibtexを設定する際に，defer t にすると，htmlへの文献のexportができなくなるので注意！\n  use-packageは非常に便利．emacsの新しいパッケージの導入と管理はこれでいいと思う．\n 参照サイト1：use-package 参照サイト2：use-packageで可読性の高いinit.elを書く    ox-bibtex.elはbibtexをLaTeX, html, asciiにexportしてくれる．HTMLへのexportには，bibtex2html が使われる．そこで，bibtex2htmlをインストールしておく．homebrewがインストールされていれば以下のようにすれば良い．\nbrew install bibtex2html   ox-bibtexの使い方はソースの最初に書いてあるとおりである．すなわち，文献をexportするためには，org-mode文書の冒頭に例えば以下を追加し，\n#+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} 最後に，\n#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-references.bib Stroke_3-authors_alphabetical.bst option:-a limit:t を追加する．\n  #+LaTeX_HEADER: の行の最後のnatbib は，texliveに含まれる文献サポートのパッケージであり，1, 2, 3,\u0026hellip;.というような番号付タイプの文献引用や author-yearタイプの文献引用の両方に（それ以外にも）対応している．その手前はnatbibのオプションである．\n  #+BIBLIOGRAPHY: のあとにfoo.bibを書くわけだが，この部分はフルパスで書いて良い．その後にはスタイルを書く．上記のStroke_3-authors_alphabetical.bstは自作だが，これは投稿ジャーナルの規定に合わせて作成する．ジャーナルによってはbst ファイルを用意してあるかもしれない．\n  option: -foobar はbibtex2htmlに \u0026lsquo;foobar\u0026rsquo; を渡す．つまり\noption:-d sort by date option:-a sort as BibTeX (usually by author) *default* option:-u unsorted i.e. same order as in .bib file option:-r reverse the sort   複数のオプションを使用することも可能\noption:-d option:-r   上述のように， limit:t とすることにより，引用された文献のみのリストになる．これをしないと bib ファイルの中のすべての論文がリストになってしまう．\n  bst ファイルについて  bibtexにおいて引用のスタイルを決めているファイルであり，これを目指すジャーナルの投稿規定に合わせる．既にそのようなbst ファイルがあれば極楽だが，ない場合は大変である．この辺は以下のサイトを参照．  LaTeXで参考文献の形式を変更する方法（bstファイルの編集） BibTeXのドキュメント    bst ファイルの置き場所   これにはかなり悩まされたが，なんのことはないMacTeXのFAQサイトに書いてあった．\n  The Most Frequently Asked Questions (FAQ)\nQM.06 : Why can't the latest MacTeX find my local BibTeX files? Earlier versions of MacTeX worked correctly. AM.06 : TeX Live is slightly pickier about placement of these files. \u0026ldquo;.bib\u0026rdquo; files go in ~/Library/texmf/bibtex/bib or subfolders of this directory, and \u0026ldquo;.bst\u0026rdquo; files go in ~/Library/texmf/bibtex/bst or subfolders of this directory.\n  ここにおいておけば，パスを指定することなく，どこからでもbstファイルを指定してスタイルを決められる．\n  文献を引用したorg-modeからのexportの実例  ようやく，これで準備が整ったので，実例を示す．以下のファイルを作成し，hogefuga.orgとして保存する．  #+LaTeX_CLASS: koma-jarticle #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+OPTIONS: date:nil #+LINK_UP: #+LINK_HOME: #+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績 #+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康 \\vspace*{-1.5cm} \\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野 * 背景と目的 hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した． * 結果 hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\\cite{Cosentino:2011dn} #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float t :width 3in :align center #+ATTR_HTML: :width 500 :float: wrap :align center [[./hoge_fuga.jpg]] * 結論 hogefugaによる治療は有効である． #+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t   hogefuga-References.bibの部分やbstの部分は，それぞれ該当するファイルに置き換えていただきたい．\n  \\cite{Stetler:2012jt,Cosentino:2011dn} の部分は私のbibファイルにおけるcite-keyである．\n  C-c C-e l o で，文献が番号付きで引用されたpdfが作成され，skimで開く．\n  下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．また，このbstでは著者名のアルファベット順を指定しているので，最初にでてきた文献が2に，二番目にでてきた文献が1になっていることに注意してほしい．さらに，著者名は3人までは全員記載し，4人以上の論文では4人目以降はet alになっている．bibtexの活用により，これらのことが自動的になされている．\n     ついで，htmlである．C-c C-e h o で，文献が番号付きで引用されたhtmlが作成され，browserで開く．\n  下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．その他もpdfと同様であるが，文献リストにはabstractやDOIも追加される．投稿する際はpdfか，別記事のようにwordにしてしまうので，html出力の設定はこれ以上触っていない．\n     ようやく，文献付きの原稿の出力の設定にまでたどり着くことができた．次回はpandocを利用して，org-modeからword ファイルを出力する方法をまとめる．\n  ","date":1536937200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537169947,"objectID":"43c14a1a39c0be3315ecaaffad0115b9","permalink":"/post/org-mode_paper_3/","publishdate":"2018-09-15T00:00:00+09:00","relpermalink":"/post/org-mode_paper_3/","section":"post","summary":"前回（Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理））は，BibDeskを用いて文献情報をbibtex ファイルとして収集する方法についてまとめた．今回は，この文献情報を利用した引用をEmacsのorg-modeでどのように自動化するかについてまとめる．早い話が，org-modeからlatexのbibtexとreftexの機能を利用するということになる．\nTable of Contents org-mode-reftex-setup   参照サイト：Using Emacs Org-mode to Draft Papers\n  RefTex-ModeというものがEmacsには含まれている．文献や引用の管理のためのパッケージである．詳細はC-h iでマニュアルを見れば分かる，と言いたいところだが，このマニュアルが膨大である．そこで，RefTeX in a Nutshellという2ページほどの要約を読めば，使うのには十分であるとマニュアル自体に書いてある（笑）．実は私はそれすらろくに読んでいないが，以下のように設定すれば，十分に使える．設定方法は，以前の記事（Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する）に記載したとおり，init.orgに書き込めば良い．\n#+begin_src emacs-lisp (defun org-mode-reftex-setup () (load-library \u0026#34;reftex\u0026#34;) (and (buffer-file-name) (file-exists-p (buffer-file-name)) (reftex-parse-all)) (define-key org-mode-map (kbd \u0026#34;C-c )\u0026#34;) \u0026#39;reftex-citation) ) (add-hook \u0026#39;org-mode-hook \u0026#39;org-mode-reftex-setup) #+end_src   上記の設定により，参照サイトの説明のように，org-modeの中でreftex-citationの機能が働くようになる．\n  org-mode-reftex-setupの使用方法   org-modeで文書を書いている最中に文献を引用したい箇所で，C-c ) と打つ\n  すると，まず，どの文献リストを使うかを聞いてくるので，hogefuga-reference.bibなど使いたいリストの名前を打つ．前回説明した方法で収集した文献のbib ファイルが有るはずである．\n  次に，文献を絞り込むためにキーワードを打つように催促されるので，それを打つ．すると，そのキーワードを有する文献のリストがずらずらと並ぶ．下図の例では，stetler と著者名を打ったときの結果が下のバッファに表示されている．該当する文献にカーソルを持ってくるか，クリックして選択し，リターンを押せば決定され，本文の該当箇所にその論文の cite-key，つまり，\\cite{Stetler:2012jt} が入力される．\n     上図の下のバッファ内でも，C-sの検索機能は使えるので，さらに絞り込みが必要な際は便利である．以前の記事（Emacsの設定（その1）Preludeの導入）で述べたようにpreludeを導入して，かつ，helmを有効にしておけば，下図のようにC-sでswiperが使えて更に便利である．（なお，下図では，まず，heat shock proteinと打ち，ズラッと並んだ真ん中のバッファでC-sとやってstetlerと打ったところである．一番下のバッファにstetlerで絞り込まれた候補が並んでいる）","tags":["reference","citation","bibtex","reftex","latex","org","mode","automation"],"title":"Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化）","type":"post"},{"authors":null,"categories":null,"content":"さて，前回（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））はorg-modeによる論文本体の執筆に付いてまとめたわけだが，今回は論文引用の方法についてまとめる．と思ったのだが，論文を引用するためには，当然のことながら論文を収集しなければならない．そのうち膨大な数の論文の海に溺れることになる．そこで，収集した論文，つまり，pdfの整理をするソフトが必要になってくる．その引用も，書式や番号付を雑誌の規定に合わせて自動化してくれれば言うことはない．ということで，そのようなソフトについて書くことにする．有料ソフトの定番としては，EndoNoteがあるし，フリーソフトでは，zoteroやMendeleyが有名である．私自身は，LaTeXを利用することが多い関係上，BibDeskというこれまた老舗のソフトをもっぱら利用している．ネット上でもzoteroやmendeleyについての情報は豊富だが，BibDeskについてはそれほど見られないので，まとめておくことは多少の意味があるであろうと考え，BibDeskによる論文収集を説明することにした．\nBibDesk   texliveをインストールすればその中に入っているが，最新版はリンク先にあるので，そちらを落とすほうが良い．\n  文献をbibtexのファイルとして管理する．pdfとの関連付けができるので，書誌事項とpdfが一体化して管理できる．\n  bibtexに関しては，BiBTeXとは を参照\n  bibtexファイルなので，当然，latexの機能を用いて，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．これが便利！\n  見た目はこんな感じ\n     医学系の論文となると，やはり，PubMedなどネットでの連携が重要である．下図のごとく，BibDeskではSearches menuからPubMedを選ぶことにより，BibDeskの中からPubMedを検索できる．\n       検索欄に，例えば，\u0026ldquo;heat shock protein\u0026quot;と打つと，下図のように検索結果が50編ずつ並ぶが，50編以上ある場合は，Searchを繰り返しクリックすることにより，100編と150編とどんどんリストに取り込まれていく．\n     上図のごとく，検索結果欄の左端に\u0026quot;Import\u0026rdquo; ボタンがあるが，これをクリックするとその論文の書誌事項が取り込まれる．その際に，自分の文献リストの名前を，\u0026ldquo;hogefuga-reference.bib\u0026rdquo; など適当に決めれば良い．以後はそのリストに追加していくことになる．\n  また，取り込まれる際にcite-keyをBibDeskが自動的に決めてくれる．このcite-keyは次回の記事で述べる「引用の自動化」の際にreftexに使用される．\n  なお，PubMedの番号，つまり，Pmidが分かっていれば，それを打ち込めば一発で書誌事項を検索できる．\n  リストの中から興味のある論文をクリックして選択し，グレーにハイライトさせると，下図のごとく右側のサイドパネルに，その論文のあるサイトを示すアイコンが表示される．これをクリックすれば，ブラウザーが開いてそのサイトに飛ぶ．もし，その論文がオープンアクセスであれば，あるいは，所属する組織が出版社と契約を交わしていれば，その論文のpdfを落とせる．落としたpdfをドラッグしてその論文に該当するリストのラインにドロップすれば，その書誌事項とpdfはリンクし，以降はその論文のサイドパネルにpdfのアイコンが表示され，ダブルクリックによりオープンするようになる．さらに言えば，pdfではなく，パワポやワードのファイルとして文献が存在することもある．同じようにドラッグ＆ドロップすれば，これまたリンクする．しかも一つの文献にいくつものpdfやその他のファイルをリンクできる．非常に便利である．\n     また，下図のごとく，左のサイドパネルの一番上の方にある\u0026quot;Web BibDesk Web Group\u0026quot;をクリックして選択すれば，更にいろいろな文献ソースが表示される．医学系では，Google Scholarが有用なので，これをクリックすれば，BibDeskの中からGoogle Scholarを検索できるし，書誌事項も取り込める．pdfのリンクが存在すればBibDeskの中でpdfを落とすこともできる．\n     収集した文献の書誌事項はhogefuga-reference.bibにbibtex fileとしてまとめられているが，その中身は以下のような情報の集積である（下の例ではabstractなどは省略している）．\n@article{Rothwell:2018aa, Author = {Rothwell, Peter M and Cook, Nancy R and Gaziano, J Michael and Price, Jacqueline F and Belch, Jill F F and Roncaglioni, Maria Carla and Morimoto, Takeshi and Mehta, Ziyah}, Date-Added = {2018-08-03 22:46:26 +0900}, Date-Modified = {2018-08-03 22:46:26 +0900}, Doi = {10.1016/S0140-6736(18)31133-4}, Journal = {Lancet}, Journal-Full = {Lancet (London, England)}, Month = {Jul}, Pmid = {30017552}, Pst = {aheadofprint}, Title = {Effects of aspirin on risks of vascular events and cancer according to bodyweight and dose: analysis of individual patient data from randomised trials}, Year = {2018}, }   bibtexなので，前述のごとく，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．\n  Emacsのorg-modeと組み合わせて，どのように文献の引用を自動化するかについては次回の記事にまとめる．\n  ","date":1536678000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537101885,"objectID":"78fd0112bddefdeb41521ea6f69e50f2","permalink":"/post/org-mode_paper_2/","publishdate":"2018-09-12T00:00:00+09:00","relpermalink":"/post/org-mode_paper_2/","section":"post","summary":"さて，前回（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））はorg-modeによる論文本体の執筆に付いてまとめたわけだが，今回は論文引用の方法についてまとめる．と思ったのだが，論文を引用するためには，当然のことながら論文を収集しなければならない．そのうち膨大な数の論文の海に溺れることになる．そこで，収集した論文，つまり，pdfの整理をするソフトが必要になってくる．その引用も，書式や番号付を雑誌の規定に合わせて自動化してくれれば言うことはない．ということで，そのようなソフトについて書くことにする．有料ソフトの定番としては，EndoNoteがあるし，フリーソフトでは，zoteroやMendeleyが有名である．私自身は，LaTeXを利用することが多い関係上，BibDeskというこれまた老舗のソフトをもっぱら利用している．ネット上でもzoteroやmendeleyについての情報は豊富だが，BibDeskについてはそれほど見られないので，まとめておくことは多少の意味があるであろうと考え，BibDeskによる論文収集を説明することにした．\nBibDesk   texliveをインストールすればその中に入っているが，最新版はリンク先にあるので，そちらを落とすほうが良い．\n  文献をbibtexのファイルとして管理する．pdfとの関連付けができるので，書誌事項とpdfが一体化して管理できる．\n  bibtexに関しては，BiBTeXとは を参照\n  bibtexファイルなので，当然，latexの機能を用いて，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．これが便利！\n  見た目はこんな感じ\n     医学系の論文となると，やはり，PubMedなどネットでの連携が重要である．下図のごとく，BibDeskではSearches menuからPubMedを選ぶことにより，BibDeskの中からPubMedを検索できる．\n       検索欄に，例えば，\u0026ldquo;heat shock protein\u0026quot;と打つと，下図のように検索結果が50編ずつ並ぶが，50編以上ある場合は，Searchを繰り返しクリックすることにより，100編と150編とどんどんリストに取り込まれていく．\n     上図のごとく，検索結果欄の左端に\u0026quot;Import\u0026rdquo; ボタンがあるが，これをクリックするとその論文の書誌事項が取り込まれる．その際に，自分の文献リストの名前を，\u0026ldquo;hogefuga-reference.bib\u0026rdquo; など適当に決めれば良い．以後はそのリストに追加していくことになる．\n  また，取り込まれる際にcite-keyをBibDeskが自動的に決めてくれる．このcite-keyは次回の記事で述べる「引用の自動化」の際にreftexに使用される．\n  なお，PubMedの番号，つまり，Pmidが分かっていれば，それを打ち込めば一発で書誌事項を検索できる．\n  リストの中から興味のある論文をクリックして選択し，グレーにハイライトさせると，下図のごとく右側のサイドパネルに，その論文のあるサイトを示すアイコンが表示される．これをクリックすれば，ブラウザーが開いてそのサイトに飛ぶ．もし，その論文がオープンアクセスであれば，あるいは，所属する組織が出版社と契約を交わしていれば，その論文のpdfを落とせる．落としたpdfをドラッグしてその論文に該当するリストのラインにドロップすれば，その書誌事項とpdfはリンクし，以降はその論文のサイドパネルにpdfのアイコンが表示され，ダブルクリックによりオープンするようになる．さらに言えば，pdfではなく，パワポやワードのファイルとして文献が存在することもある．同じようにドラッグ＆ドロップすれば，これまたリンクする．しかも一つの文献にいくつものpdfやその他のファイルをリンクできる．非常に便利である．\n     また，下図のごとく，左のサイドパネルの一番上の方にある\u0026quot;Web BibDesk Web Group\u0026quot;をクリックして選択すれば，更にいろいろな文献ソースが表示される．医学系では，Google Scholarが有用なので，これをクリックすれば，BibDeskの中からGoogle Scholarを検索できるし，書誌事項も取り込める．pdfのリンクが存在すればBibDeskの中でpdfを落とすこともできる．\n     収集した文献の書誌事項はhogefuga-reference.bibにbibtex fileとしてまとめられているが，その中身は以下のような情報の集積である（下の例ではabstractなどは省略している）．","tags":["reference","citation","bibdesk","bibtex","pdf","pubmed"],"title":"Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理）","type":"post"},{"authors":null,"categories":null,"content":"私がEmacsを使用している理由の一番大きなものはorg-modeである．あらゆる文書作成にorg-modeを用いている．org-modeを使って論文を書くことに関しては，ググってもらえばおわかりのように，ネット上に山のように情報が存在する．「屋上屋を架してどうする」と言う自分の中の声を押し殺し，あくまで備忘録ということで，あえてここにまとめておく．なお，私はGTDのツールとしてはorg-modeを全く使用していないので，その種の情報はここにはまったくないことをお断りしておく．\nTable of Contents 目的  org-modeからlatex経由で，文献がnumberingされ文献リストも付いたpdfを出力できるようにする org-modeから，文献がnumberingされ文献リストも付いたhtmlを出力できるようにする org-modeから，文献がnumberingされ文献リストも付いたwordファイルを出力できるようにする  org-modeで論文を書く利点  LaTeXのややこしいコマンドを覚えなくても普通に文章を書いていけば，pdfで出力できる． latexの力を借りることで，文献の引用やリストの作成を自動化できる． 必要なら，htmlとしても出力できる． どうしても必要なら，pandocの力を借りて，なんとMicrosoft Wordのファイルとしても出力できてしまう．  org-modeの設定・セットアップ（pdfとhtmlへの出力用） 設定が最もよくまとまっているのはTeX Wiki Emacs/Org mode 設定例のmacOSの部分である．正統派の方は，こちらを参考にしていただきたい．\n私は，koma-script – A bundle of versatile classes and packages と Tufte-LaTeX を気に入っており，ほぼこれらしか使わないので，その設定を書いておく．その前に少し情報をまとめておく．\nkoma-script – A bundle of versatile classes and packages  参考サイト１：Koma-Script 入門　～初歩の初歩～ 参考サイト２：使ってはいけない LaTeX のコマンド・パッケージ・作法 参考サイト３：LaTeX の「アレなデフォルト」 傾向と対策 アメリカ生まれのaritcleなどの欧文標準文書クラスはデフォルトがレターサイズで余白が広すぎてしまう．これに対して，ヨーロッパ生まれのkoma-scriptはa4がデフォルトで，余白も広すぎず，レイアウトもなんとなくオシャレ（笑）である．当然のことながら，texliveに含まれており，texliveをインストールした時点で，インストールされている．  Tufte-LaTeX  参考サイト１： tufte-org-mode Edward R. Tufteによって作られたページレイアウト．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．こういうスタイルはよく見かけるものだと思うが，作者がはっきりしているとは，恥ずかしながら全く知らなかった． tufte-org-modeはこのtufte classをorg-modeから使えるようにした有り難いパッケージである．  org-bullet   参考サイト１：https://github.com/sabof/org-bullets\n  参考サイト２：http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html\n  pdf出力とは関係ないが，ついでに触れておく．要するにorg-modeの見た目が良くなるパッケージである．星印が色付きの丸や二重丸になる．やる気に繋がるので，見た目は大事である．こんな感じになる．\n     init.elには以下のようにuse-packageを用いて記述してインストール兼設定となる．もちろん，これも以前の記事（Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する）で説明したように，init.orgに書いたものから生成されたinit.elである．\n(use-package org-bullets :ensure t :config (add-hook \u0026#39;org-mode-hook (lambda () (org-bullets-mode 1))))   org-modeのinit.elの設定（pdf出力用）   前述のごとく，koma-scriptとTufte-LaTeXについて設定する．\n  何回もしつこいようだが，これも以前の記事（Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する）で説明したように，init.orgに書いたものから生成されたinit.elである．\n(require \u0026#39;ox-latex) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.org$\u0026#34; . org-mode)) (setq org-latex-default-class \u0026#34;bxjsarticle\u0026#34;) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;koma-article\u0026#34; \u0026#34;\\\\documentclass{scrartcl}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;koma-jarticle\u0026#34; \u0026#34;\\\\documentclass{scrartcl} \\\\usepackage{amsmath} \\\\usepackage{amssymb} \\\\usepackage{xunicode} \\\\usepackage{fixltx2e} \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont} \\\\usepackage{xltxtra} \\\\usepackage{graphicx} \\\\usepackage{longtable} \\\\usepackage{float} \\\\usepackage{wrapfig} \\\\usepackage{soul} \\\\usepackage{hyperref}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) ;; tufte-handout class for writing classy handouts and papers (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;tufte-handout\u0026#34; \u0026#34;\\\\documentclass[twoside,nobib]{tufte-handout} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;))) ;; tufte-book class (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;tufte-book\u0026#34; \u0026#34;\\\\documentclass[twoside,nobib]{tufte-book} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026#34; (\u0026#34;\\\\part{%s}\u0026#34; . \u0026#34;\\\\part*{%s}\u0026#34;) (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)))   私はxelatexを使っているので，compileは以下のように設定している．\n(setq org-latex-pdf-process \u0026#39;(\u0026#34;xelatex -interaction nonstopmode -output-directory %o %f\u0026#34; \u0026#34;bibtex %b\u0026#34; \u0026#34;xelatex -interaction nontopmode -output-directory %o %f\u0026#34; \u0026#34;xelatex -interaction nonstopmode -output-directory %o %f\u0026#34;))   ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．なお，pandocやTufteの項は別途記事にするので，とりあえずは無視してほしい．\n     pdfで出力したければ，さらに，l o と打つと，As PDF file and openを選択したことになり，原稿がpdfとして出力され，かつ，skimでそのpdfがオープンされる．\n  同じく，htmlで出力したければ，h o と打つと，As HTML file and openを選択したことになり，ブラウザーでそのhtmlがオープンされる．\n  「org-modeで論文を書く」の実例  それでは実例を示してみる．以下のような書類を作成し，hogefuga.orgとして保存する．hoge_fuga.jpgはorg fileと同じdirectoryにあるものとする． 前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略\u0026hellip;..(^^;;;  #+LaTeX_CLASS: koma-jarticle #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+OPTIONS: date:nil #+LINK_UP: #+LINK_HOME: #+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績 #+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康 \\vspace*{-1.5cm} \\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野 * 背景と目的 hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した． * 結果 hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)． #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float t :width 3in :align center #+ATTR_HTML: :width 500 :float: wrap :align center [[./hoge_fuga.jpg]] * 結論 hogefugaによる治療は有効である．   ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e l oと打てば，以下のようなpdfがskimで開かれる．\n     また，C-c C-e h oと打てば，以下のようなhtmlがbrowserで開かれる．latexのコマンドが見えてしまっているのがご愛嬌だが，htmlにしか出力しないのであれば，削除すればよい．\n     長くなったので，ここまでとし，文献の引用の設定は次回の記事にまとめることとする．\n  ","date":1535727600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536491871,"objectID":"2621ff35fa4f09249d3070d3c8dd6bbd","permalink":"/post/org-mode_paper_1/","publishdate":"2018-09-01T00:00:00+09:00","relpermalink":"/post/org-mode_paper_1/","section":"post","summary":"私がEmacsを使用している理由の一番大きなものはorg-modeである．あらゆる文書作成にorg-modeを用いている．org-modeを使って論文を書くことに関しては，ググってもらえばおわかりのように，ネット上に山のように情報が存在する．「屋上屋を架してどうする」と言う自分の中の声を押し殺し，あくまで備忘録ということで，あえてここにまとめておく．なお，私はGTDのツールとしてはorg-modeを全く使用していないので，その種の情報はここにはまったくないことをお断りしておく．\nTable of Contents 目的  org-modeからlatex経由で，文献がnumberingされ文献リストも付いたpdfを出力できるようにする org-modeから，文献がnumberingされ文献リストも付いたhtmlを出力できるようにする org-modeから，文献がnumberingされ文献リストも付いたwordファイルを出力できるようにする  org-modeで論文を書く利点  LaTeXのややこしいコマンドを覚えなくても普通に文章を書いていけば，pdfで出力できる． latexの力を借りることで，文献の引用やリストの作成を自動化できる． 必要なら，htmlとしても出力できる． どうしても必要なら，pandocの力を借りて，なんとMicrosoft Wordのファイルとしても出力できてしまう．  org-modeの設定・セットアップ（pdfとhtmlへの出力用） 設定が最もよくまとまっているのはTeX Wiki Emacs/Org mode 設定例のmacOSの部分である．正統派の方は，こちらを参考にしていただきたい．\n私は，koma-script – A bundle of versatile classes and packages と Tufte-LaTeX を気に入っており，ほぼこれらしか使わないので，その設定を書いておく．その前に少し情報をまとめておく．\nkoma-script – A bundle of versatile classes and packages  参考サイト１：Koma-Script 入門　～初歩の初歩～ 参考サイト２：使ってはいけない LaTeX のコマンド・パッケージ・作法 参考サイト３：LaTeX の「アレなデフォルト」 傾向と対策 アメリカ生まれのaritcleなどの欧文標準文書クラスはデフォルトがレターサイズで余白が広すぎてしまう．これに対して，ヨーロッパ生まれのkoma-scriptはa4がデフォルトで，余白も広すぎず，レイアウトもなんとなくオシャレ（笑）である．当然のことながら，texliveに含まれており，texliveをインストールした時点で，インストールされている．  Tufte-LaTeX  参考サイト１： tufte-org-mode Edward R. Tufteによって作られたページレイアウト．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．こういうスタイルはよく見かけるものだと思うが，作者がはっきりしているとは，恥ずかしながら全く知らなかった． tufte-org-modeはこのtufte classをorg-modeから使えるようにした有り難いパッケージである．  org-bullet   参考サイト１：https://github.","tags":["org","mode","emacs","latex","html","word","pandoc"],"title":"Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）","type":"post"},{"authors":null,"categories":null,"content":"前回のポストを書いた後に，念のために調べてみると，どうやら，media9なるものが，いまやpdfに動画を埋め込むために普通に使われているようだということが判明してしまった！う〜む，勉強不足を痛感する．遅れを取り返すべく，早速やってみたので，それを追加報告とする．\nTable of Contents HAHAHUGOSHORTCODE-TOC0-HBHB media9 media9はtexlive2018に含まれており，特に別途インストールする必要はなかった．media9については様々な情報があったが，多くはWindowsやLinuxに関してであり，そのままコピペして動くような極楽情報はなかなか見つからなかった．やはり，餅は餅屋で，OS X TeXにそのものズバリの情報があった．それが参考サイト５である．\n 参考サイト１：TeXWiki media9 参考サイト２：TeXでプレゼン - LaTeX Beamerを使う人のためのTips集 参考サイト３：How to embed video files in a PDF using LaTeX (a media9/beamer example) 参考サイト４：Beamer で PDF ファイルに動画を埋め込む 参考サイト５：media9 problems  beamerで動画が走るスライド原稿を作る（media9版）   同一directoryにhogefuga.movがあるとすれば，以下のように書けば良い\n  preambleに，\\usepackage{media9}を忘れずに追加しておく．\n\\newcommand{\\showmovie}[1]{\\includemedia[ activate=pageopen, deactivate=pageclose, width=110mm, height=72mm, addresource=#1, flashvars={ src=#1 \u0026amp;loop=true \u0026amp;autoPlay=false } ]{}{StrobeMediaPlayback.swf} } \\begin{frame} \\frametitle{hogefugaの動画} \\centering \\showmovie{hogefuga.mov} \\end{frame}   110mmと72mmの数値はフレーム内の動画の収まり具合により適宜調整する．\n  loopは，ループ再生するかどうか\n  autoplayは自動再生するかどうか\n  media9を使用したときの利点  なんと言ってもべた書きよりもelegant! スライドを開けたときに，何もしなくても動画の静止画が映るので，前回のやり方のように背景をべた書きしなくて良い．  media9を使用したときの欠点 もう完全にmedia9に乗り換えるつもりでいたが，以下に述べるようにいくつか欠点もあることが判明した．\n media9はpdf自体に動画を埋め込むようである．したがって，200MBの動画を走らせるとすると，pdf自体が200MB以上の大きさになってしまう． それだけでなく，200MB程度の動画になると，途中で固まってしまう！これでは使い物にならない． 一方，前回記事のべた書き方式だと，pdf自体に動画を埋め込まないので，pdfは大きくならないし，動画指定のパスは効くし，200MBだろうともっと大きかろうと動画はガンガン動く．  結論  容量の小さな動画であれば，media9でも十分であろう． 私のように，容量の大きな動画を使用するような場合は，べた書きを使用するほうが良いであろう． ということで，結局，元の木阿弥に戻ることとなった．  ","date":1535209200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375575,"objectID":"00d76be71cf03aa1545ebf8f2daf8456","permalink":"/post/beamer_movie2/","publishdate":"2018-08-26T00:00:00+09:00","relpermalink":"/post/beamer_movie2/","section":"post","summary":"前回のポストを書いた後に，念のために調べてみると，どうやら，media9なるものが，いまやpdfに動画を埋め込むために普通に使われているようだということが判明してしまった！う〜む，勉強不足を痛感する．遅れを取り返すべく，早速やってみたので，それを追加報告とする．\nTable of Contents HAHAHUGOSHORTCODE-TOC0-HBHB media9 media9はtexlive2018に含まれており，特に別途インストールする必要はなかった．media9については様々な情報があったが，多くはWindowsやLinuxに関してであり，そのままコピペして動くような極楽情報はなかなか見つからなかった．やはり，餅は餅屋で，OS X TeXにそのものズバリの情報があった．それが参考サイト５である．\n 参考サイト１：TeXWiki media9 参考サイト２：TeXでプレゼン - LaTeX Beamerを使う人のためのTips集 参考サイト３：How to embed video files in a PDF using LaTeX (a media9/beamer example) 参考サイト４：Beamer で PDF ファイルに動画を埋め込む 参考サイト５：media9 problems  beamerで動画が走るスライド原稿を作る（media9版）   同一directoryにhogefuga.movがあるとすれば，以下のように書けば良い\n  preambleに，\\usepackage{media9}を忘れずに追加しておく．\n\\newcommand{\\showmovie}[1]{\\includemedia[ activate=pageopen, deactivate=pageclose, width=110mm, height=72mm, addresource=#1, flashvars={ src=#1 \u0026amp;loop=true \u0026amp;autoPlay=false } ]{}{StrobeMediaPlayback.swf} } \\begin{frame} \\frametitle{hogefugaの動画} \\centering \\showmovie{hogefuga.mov} \\end{frame}   110mmと72mmの数値はフレーム内の動画の収まり具合により適宜調整する．\n  loopは，ループ再生するかどうか\n  autoplayは自動再生するかどうか","tags":["beamer","movie","latex","pdf"],"title":"beamerでスライド原稿用pdfを作成する（その3）動画が走るスライド原稿を作る（media9に関する追記）","type":"post"},{"authors":null,"categories":null,"content":"実は，同じような内容について2010年に，TeX QA に投稿しているが，その後現在に至るまで使い続けることができており，一応，こちらでもまとめておくことにした．\nbeamerで動画が走るスライド原稿を作る   前述した ，TeX QA に経緯は投稿してあるので，詳細はそちらを読んでいただきたい．\n  参考にしたのは，Adobeのpdfのマニュアル（DVI specials for PDF generation） https://www.tug.org/TUGboat/tb30-1/tb94cho.pdf の以下の部分\n3 Annotations An annotation is considered as an object with a location on a page. The type of the object is given by the value of the key `/Subtype\u0026#39;, for instance, `/Text\u0026#39;, `/Link\u0026#39;, `/Sound\u0026#39;, `/Movie\u0026#39;, etc. (See [1, p. 615] for the list of all annotation types.) The location is given by an array object associated to the key `/Rect\u0026#39;. DVIPDFM(x) provides the following special command for annotations............ The following example shows a movie annotation that enables us to run the movie file ‘mymovie.avi’ inside a PDF viewer program. \\special{pdf:ann bbox 0 0 360 180 \u0026lt;\u0026lt; /Subtype /Movie /Border [1 0 0] /T (My Movie) /Movie \u0026lt;\u0026lt; /F (mymovie.avi) /Aspect [720 360] /Poster true \u0026gt;\u0026gt; /A \u0026lt;\u0026lt; /ShowControls false \u0026gt;\u0026gt; \u0026gt;\u0026gt;}   アスペクト比やコントロールバーの有無，リピートするかどうかなども指示できる（下記参照）\n  mymovie.aviのところに動かしたい動画を記入（パスも効く）\n  私の作成したものは読んでいただければおわかりのように，非常にダサいベタ書きである．\n  最近の書き方は以下の通りで，もっぱら，mov形式の画像を使用している．コンテナがaviやwmvだと動かないが，Mac以外でどうなるのかは不明．そういえば，Windowsで試したことはなかった\u0026hellip;..\n{ \\usebackgroundtemplate{\\put(20, -265){\\includegraphics[scale=0.45]{/Data/.../..../Figures/hogefuga.pdf}}} \\begin{frame} \\frametitle{hogefugaの対策} \\special{pdf:ann bbox -10 -130 320 90 \u0026lt;\u0026lt; /Subtype /Movie /Border [0 0 1] /T (My Movie) /Movie \u0026lt;\u0026lt; /F (/Data/.../hogefuga.mov) %/Aspect [720 480]  /Aspect [640 480] /Poster false \u0026gt;\u0026gt; /A \u0026lt;\u0026lt; /ShowControls true /Mode /Repeat \u0026gt;\u0026gt; \u0026gt;\u0026gt;} \\end{frame} }   \\usebackgroundtemplateの部分には動画のキャプチャー画像を貼り付けておく．なにもないと，動画が動き出す前の画面が空白になってしまう（もっと良い方法があれば，どなたかご教示ください）．\n  \\putで背景画像（キャプチャー画像）の位置を直接指定し，\\includegraphicsのscaleで倍率を指定して動画の大きさに合わせている．\n  これで，画像をクリックすると（ほぼ）同じ大きさの動画が（ほぼ）同じ位置で動くようになる\n  動画の大きさはbboxで，かぶせる静止画の大きさはscaleで調整する．\n  プレゼンテーションにskimを使うと動画が動かないので注意．\n  動画は同一directoryにある必要はなく，パスで指定すれば良い\n  動画自体はpdfの中に埋め込まれないので，pdfの容量がむやみに大きくならないという利点がある．\n  Adobe Acrobat Readerでプレゼンすれば，動画は動くし，音もでる．コントロールバーにより早送りなども可能．\n  最初にpdfで動画をクリックすると「セキュリティ上の問題．．．」というメッセージが表示される．この横にあるオプションボタンをクリックして，信頼するを選択すれば，動画が動くようになる．\n  ","date":1535122800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375575,"objectID":"3969c636d005c06be1b10b6c0fb22fa1","permalink":"/post/beamer_movie/","publishdate":"2018-08-25T00:00:00+09:00","relpermalink":"/post/beamer_movie/","section":"post","summary":"実は，同じような内容について2010年に，TeX QA に投稿しているが，その後現在に至るまで使い続けることができており，一応，こちらでもまとめておくことにした．\nbeamerで動画が走るスライド原稿を作る   前述した ，TeX QA に経緯は投稿してあるので，詳細はそちらを読んでいただきたい．\n  参考にしたのは，Adobeのpdfのマニュアル（DVI specials for PDF generation） https://www.tug.org/TUGboat/tb30-1/tb94cho.pdf の以下の部分\n3 Annotations An annotation is considered as an object with a location on a page. The type of the object is given by the value of the key `/Subtype\u0026#39;, for instance, `/Text\u0026#39;, `/Link\u0026#39;, `/Sound\u0026#39;, `/Movie\u0026#39;, etc. (See [1, p. 615] for the list of all annotation types.) The location is given by an array object associated to the key `/Rect\u0026#39;.","tags":["beamer","movie","latex","pdf"],"title":"beamerでスライド原稿用pdfを作成する（その2）動画が走るスライド原稿を作る","type":"post"},{"authors":null,"categories":null,"content":"前回のポスト（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記））により，既にLaTeXはインストールされたので，今回は学会発表向けのスライド原稿作成についてまとめる．ようやく実質的な話になる． beamerによるスライド原稿の作成  基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsのauctexを使うと補完などあり，便利である． 下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う． なお， \\usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えていただいた．参考：beamerでの数式フォントの変更 また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．  % -*-coding:utf-8-*- \\documentclass[svgnames, table, 14pt]{beamer} \\usepackage{zxjatype} \\usepackage[hiragino-dx]{zxjafont} % ヒラギノ角ゴ Proを使う \\setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3} \\setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3} % themeを指定する \\usetheme{Darmstadt} \\usefonttheme[onlylarge]{structurebold} \\setbeamerfont*{frametitle}{size=\\large,series=\\bfseries} \\setbeamertemplate{navigation symbols}{} \\usepackage[english]{babel} \\usepackage[latin1]{inputenc} \\usepackage{times} \\usepackage[T1]{fontenc} \\usepackage{hyperref} % Setup TikZ \\usepackage{tikz} \\usetikzlibrary{arrows} \\tikzstyle{block}=[draw opacity=0.7,line width=1.4cm] % Figure position \\usepackage[absolute,overlay]{textpos} % math \\usepackage{mathabx} \\usefonttheme{professionalfonts} % Author, Title, etc. \\title[hoge/fugaによる相補的な治療における高難度症例の治療と成績] {hoge/fugaによる相補的な治療における高難度症例の治療と成績} \\author[taipapa] {taipapa, 織田信長, 豊臣秀吉, 徳川家康} \\institute[hogefuga University] {hogefuga大学大学院 hogefuga研究科　hogefuga分野} \\date[日本hogefuga外科学会 第??回学術総会　\\hspace{2.4cm} 201X年X月XX日] {\\scriptsize{Symposium-02「とっーても難しいhogeとfuga」 \\\\ \\vspace{0.15cm} 筆頭演者はhogefuga外科学会へ過去3年間のCOI自己申告を 完了しています．\\\\本演題の発表に関して開示すべきCOIはありません }} % 学会名，日付，スライド番号を挿入 \\setbeamertemplate{footline} {\\color{gray} % \\hspace{.075cm} \\insertshortdate% \\hspace{4cm} \\insertframenumber{} / \\inserttotalframenumber% } \\begin{document} \\begin{frame} \\titlepage \\end{frame} \\section{Introduction} \\begin{frame}{背景と目的} \\begin{block}{} \\begin{itemize} \\item hogeとfugaを比較してみると，一方で難易度の高い症例で も他方では容易に行える場合も多い. \\item 当施設では，一方に片寄ることなく，hogeとfugaを相補的に 用いることにより合併症の減少を目指す方針をとっている． \\item そこで，自験例から高難度のhogefuga症例についての 方針と成績を主にhogefuga surgeonの立場から検討した. \\end{itemize} \\end{block} \\end{frame} \\section{Results} \\begin{frame} \\frametitle{hogefuga症例の画像} \\centering \\includegraphics[width=3.5in]{hoge_fuga.pdf} \\end{frame} \\end{document}   ターミナルで，cdして上記のbeamer_test.texのあるdirectoryに移動し，shellで以下のように打ち込む．前回のポスト（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにするを参考　latexmk -pvc -pdf -view=none beamer_test.tex   これで下記のようなpdfが出来上がるはず．\n        画像の貼り付けが必要なら，上の文書にもあるように必要な箇所で，\n\\includegraphics[width=2in]{/Data/hoge/fuga/......./hoge_fuga.pdf} などと打てばよい．以下のようなスライドが得られる．\n     なにもしなければ，画像は左寄せになる．中央に寄せたければ，上記の文書内にあるように，\\centering を使用する．\n  次回は，beamerで動画を走らせる件について書く予定．\n  ","date":1535036400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538286591,"objectID":"7312c8ffee3386d88a094b9af5c67ccf","permalink":"/post/beamer/","publishdate":"2018-08-24T00:00:00+09:00","relpermalink":"/post/beamer/","section":"post","summary":"前回のポスト（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記））により，既にLaTeXはインストールされたので，今回は学会発表向けのスライド原稿作成についてまとめる．ようやく実質的な話になる． beamerによるスライド原稿の作成  基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsのauctexを使うと補完などあり，便利である． 下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う． なお， \\usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えていただいた．参考：beamerでの数式フォントの変更 また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．  % -*-coding:utf-8-*- \\documentclass[svgnames, table, 14pt]{beamer} \\usepackage{zxjatype} \\usepackage[hiragino-dx]{zxjafont} % ヒラギノ角ゴ Proを使う \\setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3} \\setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3} % themeを指定する \\usetheme{Darmstadt} \\usefonttheme[onlylarge]{structurebold} \\setbeamerfont*{frametitle}{size=\\large,series=\\bfseries} \\setbeamertemplate{navigation symbols}{} \\usepackage[english]{babel} \\usepackage[latin1]{inputenc} \\usepackage{times} \\usepackage[T1]{fontenc} \\usepackage{hyperref} % Setup TikZ \\usepackage{tikz} \\usetikzlibrary{arrows} \\tikzstyle{block}=[draw opacity=0.7,line width=1.4cm] % Figure position \\usepackage[absolute,overlay]{textpos} % math \\usepackage{mathabx} \\usefonttheme{professionalfonts} % Author, Title, etc. \\title[hoge/fugaによる相補的な治療における高難度症例の治療と成績] {hoge/fugaによる相補的な治療における高難度症例の治療と成績} \\author[taipapa] {taipapa, 織田信長, 豊臣秀吉, 徳川家康} \\institute[hogefuga University] {hogefuga大学大学院 hogefuga研究科　hogefuga分野} \\date[日本hogefuga外科学会 第?","tags":["latex","latexmk","beamer","texlive","mactex","emacs"],"title":"beamerでスライド原稿用pdfを作成する（その１）","type":"post"},{"authors":null,"categories":null,"content":"Table of Contents HAHAHUGOSHORTCODE-TOC0-HBHB TeX Live 2018のインストール  参考サイト１：TeX Wiki TeX Live 参考サイト２：TeX Wiki TeX LiveMac 参考サイト３：The MacTeX-2018 Distribution 上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする． これでスライド作成ソフトであるbeamerも一緒にインストールされる． beamerに固有の設定は特に必要なし．  TeX Live 2018のインストール（2018年9月1日追記） 大事なことを２つ忘れていたので追記する．\nヒラギノフォントの埋め込みなど  参考サイト：MacTeX 2018のインストール\u0026amp;日本語環境構築法 こんなところを読んでいないで，直ちに上記のサイトに飛んでいただきたい． マックユーザーにとっての最大の問題点は 「macos標準添付のヒラギノフォントなど商用フォントに関する設定ファイル群が，TeX LiveからTLContriに移動になった」 ということである．この問題に対する対応方法は，すべて上記のサイトに記載されているので，そのとおりにすれば良い．実にありがたい．  インストール後のパスの修正（symbolic linkを張る）   参考サイト：TeX Wiki TeX LiveMac\n  MacTeX 2018を普通にインストールすると，/usr/local/texlive/2018/bin/x86_64-darwin/bibtexというふうにbinの下にx86_64-darwinというdirectoryが入って，tex関連のコマンドのパスが上手く通らなくなる．そこで，上記のTeX Wiki TeX LiveMacに書いてあるように，/usr/local/binディレクトリの下にsymbolic linkを張る．\n$ sudo /usr/local/texlive/????/bin/*/tlmgr path add   上記でうまくいかないときは下記のように具体的なディレクトリ名を指定する．\n$ sudo /usr/local/texlive/2018/bin/x86_64-darwin/tlmgr path add   auctexのインストールと設定  latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見） preludeをインストールした時点で，auctexもインストールされる． auctexの設定などについては以下を参照（手抜き\u0026hellip;.. (^^;;; ）  AUCTEX – Sophisticated document creation TeX Wiki AUCTeX Emacs/AUCTeX AUCTeX の設定と便利な機能   しかし，org-modeを使うようになってからは直接latex文書を打つことはめっきり少なくなってしまった．それでも，学会発表用のスライドなどはlatexを直接打って，beamer文書を作成し，pdf原稿に変換している．  latexmk   Emacsでbeamerを使って，スライド原稿などを作成していると，C-c C-cするたびにtex文書がcompileされてpdf原稿が出来上がるのを待たなければならず，この待ち時間が結構辛い．そこで，tex ファイルの変更が保存されるたびに自動で裏でlatexmkがcompileしてくれるようにする．latexmkを使う．\n  参考サイト：TeX Wiki Latexmk\n  texlive2018, MacTeXに入っているので，これらを入れていれば別途インストールする必要なし．\n  ~/.latexmkrcの中に以下のように記述する（ちなみに私はxelatexを使用している）\n$pdflatex = \u0026#39;xelatex -interaction=nonstopmode -synctex=1 %O %S\u0026#39;; $pdf_mode = 1; $postscript_mode = $dvi_mode = 0; $pdf_previewer = \u0026#39;open -a Skim\u0026#39;; $preview_continuous_mode = 1; # equivalent to -pvc   実際の作業   上記のようにセットアップしていることとする．\n  ターミナルで，texファイルが有るdirectoryに移動し，\nlatexmk -pvc -pdf -view=none document.tex   これで，texファイルへの変更を保存すると自動でコンパイルされて，設定にもよるが，skimで開いているpdfファイルも更新される．\n  XeLaTeXについて  以下を参照されたい．特に最初にあげたZRさんの文書は必読！  XeLaTeX で日本語する件について TeXWiki XeTeX XeLaTeXだとかな混植が簡単にできて最高だという話    ","date":1534604400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535982370,"objectID":"6641ce6841559763953478215cc8e75b","permalink":"/post/latexmk/","publishdate":"2018-08-19T00:00:00+09:00","relpermalink":"/post/latexmk/","section":"post","summary":"Table of Contents HAHAHUGOSHORTCODE-TOC0-HBHB TeX Live 2018のインストール  参考サイト１：TeX Wiki TeX Live 参考サイト２：TeX Wiki TeX LiveMac 参考サイト３：The MacTeX-2018 Distribution 上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする． これでスライド作成ソフトであるbeamerも一緒にインストールされる． beamerに固有の設定は特に必要なし．  TeX Live 2018のインストール（2018年9月1日追記） 大事なことを２つ忘れていたので追記する．\nヒラギノフォントの埋め込みなど  参考サイト：MacTeX 2018のインストール\u0026amp;日本語環境構築法 こんなところを読んでいないで，直ちに上記のサイトに飛んでいただきたい． マックユーザーにとっての最大の問題点は 「macos標準添付のヒラギノフォントなど商用フォントに関する設定ファイル群が，TeX LiveからTLContriに移動になった」 ということである．この問題に対する対応方法は，すべて上記のサイトに記載されているので，そのとおりにすれば良い．実にありがたい．  インストール後のパスの修正（symbolic linkを張る）   参考サイト：TeX Wiki TeX LiveMac\n  MacTeX 2018を普通にインストールすると，/usr/local/texlive/2018/bin/x86_64-darwin/bibtexというふうにbinの下にx86_64-darwinというdirectoryが入って，tex関連のコマンドのパスが上手く通らなくなる．そこで，上記のTeX Wiki TeX LiveMacに書いてあるように，/usr/local/binディレクトリの下にsymbolic linkを張る．\n$ sudo /usr/local/texlive/????/bin/*/tlmgr path add   上記でうまくいかないときは下記のように具体的なディレクトリ名を指定する．\n$ sudo /usr/local/texlive/2018/bin/x86_64-darwin/tlmgr path add   auctexのインストールと設定  latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見） preludeをインストールした時点で，auctexもインストールされる． auctexの設定などについては以下を参照（手抜き\u0026hellip;.","tags":["emacs","latex","pdf","skim","beamer","auctex"],"title":"LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）","type":"post"},{"authors":null,"categories":null,"content":"ようやく，ここからinit.orgの具体的な記述になる．\nTable of Contents HAHAHUGOSHORTCODE-TOC0-HBHB Coding systemの設定   まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から\n  init.orgに以下のように書き込む\n​* Coding System Environment ** 言語を日本語にする #+BEGIN_SRC lisp (set-language-environment \u0026#39;Japanese) #+END_SRC ** 極力UTF-8とする #+BEGIN_SRC lisp (prefer-coding-system \u0026#39;utf-8) #+END_SRC ** 日本語フォントをヒラギノにする ​ - 日本語のサイズを指定しないと動的にサイズを変えられるようになる ​ - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/ #+BEGIN_SRC lisp (when (or (eq window-system \u0026#39;mac) (eq window-system \u0026#39;ns)) (set-face-attribute \u0026#39;default nil :family \u0026#34;Menlo\u0026#34; :height 180) ;; 18pt (set-fontset-font nil \u0026#39;japanese-jisx0208 (font-spec :family \u0026#34;Hiragino Kaku Gothic ProN\u0026#34;)) (setq face-font-rescale-alist \u0026#39;((\u0026#34;.*Hiragino Kaku Gothic ProN.*\u0026#34; . 1.1)))) #+END_SRC   これがEmacs起動時にorg-babel-load-fileにより変換されて下記のようなinit.elとなる．\n(set-language-environment \u0026#39;Japanese) (prefer-coding-system \u0026#39;utf-8) (when (or (eq window-system \u0026#39;mac) (eq window-system \u0026#39;ns)) (set-face-attribute \u0026#39;default nil :family \u0026#34;Menlo\u0026#34; :height 180) ;; 18pt (set-fontset-font nil \u0026#39;japanese-jisx0208 (font-spec :family \u0026#34;Hiragino Kaku Gothic ProN\u0026#34;)) (setq face-font-rescale-alist \u0026#39;((\u0026#34;.*Hiragino Kaku Gothic ProN.*\u0026#34; . 1.1))))   つまり，org-modeで書いたinit.orgでの解説はすべて除かれて，lispのみのcodeになってinit.elが生成される．\n  この利点は，init.elの説明が実に書きやすい点にある（実際にはinit.orgに書くわけだが．．．）．org-modeはアウトライナーなので，階層構造も自由自在である．整理もしやすいし，後で順番を変えるのもCommand + arrow keyを使えば実に簡単である．\n  Inline-patchの設定   ついで，最も重要なinline-patchの設定\n  参考：Macに最新バージョンのEmacsをインストール\n  参考：El Capitan での日本語入力時に Emacs 内のカーソル色を変更する\n  init.orgに以下のように書き込む．\n​* inline-patch on macosx ** ミニバッファ入力時に自動的に英語入力モードにする ​ - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945 #+BEGIN_SRC lisp (when (functionp \u0026#39;mac-auto-ascii-mode) ;; ミニバッファに入力時、自動的に英語モード (mac-auto-ascii-mode 1)) #+END_SRC ** 日本語か英語かで，カーソルの色を変える． ​ - 参考１：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945 ​ - 参考２：http://suzuki.tdiary.net/20160103.html #+BEGIN_SRC lisp (when (fboundp \u0026#39;mac-input-source) (defun my-mac-selected-keyboard-input-source-chage-function () (let ((mac-input-source (mac-input-source))) (set-cursor-color ; (if (string-match \u0026#34;com.apple.inputmethod.Kotoeri.Roman\u0026#34; mac-input-source) (if (string-match \u0026#34;com.google.inputmethod.Japanese.Roman\u0026#34; mac-input-source) \u0026#34;#91C3FF\u0026#34; \u0026#34;#FF9300\u0026#34;)))) (add-hook \u0026#39;mac-selected-keyboard-input-source-change-hook \u0026#39;my-mac-selected-keyboard-input-source-chage-function)) #+END_SRC   これがEmacsの起動時に，org-babel-load-fileによって，下記のようにcodeだけ抜き出されて，init.elに書き込まれる．\n(when (functionp \u0026#39;mac-auto-ascii-mode) ;; ミニバッファに入力時、自動的に英語モード (mac-auto-ascii-mode 1)) (when (fboundp \u0026#39;mac-input-source) (defun my-mac-selected-keyboard-input-source-chage-function () (let ((mac-input-source (mac-input-source))) (set-cursor-color ; (if (string-match \u0026#34;com.apple.inputmethod.Kotoeri.Roman\u0026#34; mac-input-source) (if (string-match \u0026#34;com.google.inputmethod.Japanese.Roman\u0026#34; mac-input-source) \u0026#34;#91C3FF\u0026#34; \u0026#34;#FF9300\u0026#34;)))) (add-hook \u0026#39;mac-selected-keyboard-input-source-change-hook \u0026#39;my-mac-selected-keyboard-input-source-chage-function))   これで日本語入力中であっても，M-xなどでミニバッファ入力時に自動的に英語入力モードになってくれる．\n  ついでに行った日本語か英語かでカーソルの色が変わる設定はわりに有用だが，ときに色が変わらないことがあるが，気にしないことにしている．\n  ","date":1534518000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375574,"objectID":"cc5e147ed7f7a1af0836d432101e2bd2","permalink":"/post/japanese_setup/","publishdate":"2018-08-18T00:00:00+09:00","relpermalink":"/post/japanese_setup/","section":"post","summary":"ようやく，ここからinit.orgの具体的な記述になる．\nTable of Contents HAHAHUGOSHORTCODE-TOC0-HBHB Coding systemの設定   まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から\n  init.orgに以下のように書き込む\n​* Coding System Environment ** 言語を日本語にする #+BEGIN_SRC lisp (set-language-environment \u0026#39;Japanese) #+END_SRC ** 極力UTF-8とする #+BEGIN_SRC lisp (prefer-coding-system \u0026#39;utf-8) #+END_SRC ** 日本語フォントをヒラギノにする ​ - 日本語のサイズを指定しないと動的にサイズを変えられるようになる ​ - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/ #+BEGIN_SRC lisp (when (or (eq window-system \u0026#39;mac) (eq window-system \u0026#39;ns)) (set-face-attribute \u0026#39;default nil :family \u0026#34;Menlo\u0026#34; :height 180) ;; 18pt (set-fontset-font nil \u0026#39;japanese-jisx0208 (font-spec :family \u0026#34;Hiragino Kaku Gothic ProN\u0026#34;)) (setq face-font-rescale-alist \u0026#39;((\u0026#34;.","tags":["emacs","prelude","init-el"],"title":"Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など","type":"post"},{"authors":null,"categories":null,"content":"自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．\n参考サイト  俺、ちゃんと全部管理してます（org-modeでinit.elを管理する） babel-loader:org-mode で init.el を管理する方法 平衡点(2011-12-13) ORG-Babel + init.el = ?? | くらいまーず　はい Prelude init.el \u0026amp; org-babel  Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法 基本方針  個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む． 起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む． 具体的には，init.elで，(require \u0026lsquo;org)した後にorg-babel-load-fileでinit.orgを読み込む． しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．  Preludeの導入 前回のポスト（Emacsの設定（その1）Preludeの導入）を参考　emac-init.elの作成  ~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む  (require \u0026#39;org) (defvar my-config-dir (concat user-emacs-directory \u0026#34;personal/\u0026#34;)) (org-babel-load-file (expand-file-name \u0026#34;init.org\u0026#34; my-config-dir))  工夫と言っても， init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ． これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．  init.orgの作成  これでいよいよ肝心のinit.orgの作成を行う org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている． 具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．  Code blockの挿入   俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である．\n  org-modeで以下のようにする．（後述する設定が必要）\n\u0026lt;l （ここで\u0026lt;TAB\u0026gt;すると．．．） 以下のように展開される #+begin_src emacs-lisp #+end_src   2019年1月14日追加\n  上記の「TABで展開」に関して，Disqusで，mickaushyさんから「\u0026lt;lではなくて\u0026lt;sではないのか」とのご指摘をいただいた．全くそのとおりで，（後述する設定が必要）と自分で書いておきながら，その設定を書き忘れていた．mickaushyさんが指摘されている通りの設定をしている． - 参考：\u0026lt;http://pages.sachachua.com/.emacs.d/Sacha.html#org74bcbb3\u0026gt; ```lisp #+begin_src emacs-lisp (setq org-structure-template-alist '((\u0026quot;s\u0026quot; \u0026quot;#+begin_src ?\\n\\n#+end_src\u0026quot; \u0026quot;\u0026lt;src lang=\\\u0026quot;?\\\u0026quot;\u0026gt;\\n\\n\u0026lt;/src\u0026gt;\u0026quot;) (\u0026quot;e\u0026quot; \u0026quot;#+begin_example\\n?\\n#+end_example\u0026quot; \u0026quot;\u0026lt;example\u0026gt;\\n?\\n\u0026lt;/example\u0026gt;\u0026quot;) (\u0026quot;q\u0026quot; \u0026quot;#+begin_quote\\n?\\n#+end_quote\u0026quot; \u0026quot;\u0026lt;quote\u0026gt;\\n?\\n\u0026lt;/quote\u0026gt;\u0026quot;) (\u0026quot;v\u0026quot; \u0026quot;#+BEGIN_VERSE\\n?\\n#+END_VERSE\u0026quot; \u0026quot;\u0026lt;verse\u0026gt;\\n?\\n\u0026lt;/verse\u0026gt;\u0026quot;) (\u0026quot;c\u0026quot; \u0026quot;#+BEGIN_COMMENT\\n?\\n#+END_COMMENT\u0026quot;) (\u0026quot;p\u0026quot; \u0026quot;#+BEGIN_PRACTICE\\n?\\n#+END_PRACTICE\u0026quot;) (\u0026quot;l\u0026quot; \u0026quot;#+begin_src emacs-lisp\\n?\\n#+end_src\u0026quot; \u0026quot;\u0026lt;src lang=\\\u0026quot;emacs-lisp\\\u0026quot;\u0026gt;\\n?\\n\u0026lt;/src\u0026gt;\u0026quot;) ;; (\u0026quot;l\u0026quot; \u0026quot;#+begin_src lisp\\n?\\n#+end_src\u0026quot; \u0026quot;\u0026lt;src lang=\\\u0026quot;lisp\\\u0026quot;\u0026gt;\\n?\\n\u0026lt;/src\u0026gt;\u0026quot;) (\u0026quot;L\u0026quot; \u0026quot;#+latex: \u0026quot; \u0026quot;\u0026lt;literal style=\\\u0026quot;latex\\\u0026quot;\u0026gt;?\u0026lt;/literal\u0026gt;\u0026quot;) (\u0026quot;h\u0026quot; \u0026quot;#+begin_html\\n?\\n#+end_html\u0026quot; \u0026quot;\u0026lt;literal style=\\\u0026quot;html\\\u0026quot;\u0026gt;\\n?\\n\u0026lt;/literal\u0026gt;\u0026quot;) (\u0026quot;H\u0026quot; \u0026quot;#+html: \u0026quot; \u0026quot;\u0026lt;literal style=\\\u0026quot;html\\\u0026quot;\u0026gt;?\u0026lt;/literal\u0026gt;\u0026quot;) (\u0026quot;a\u0026quot; \u0026quot;#+begin_ascii\\n?\\n#+end_ascii\u0026quot;) (\u0026quot;A\u0026quot; \u0026quot;#+ascii: \u0026quot;) (\u0026quot;i\u0026quot; \u0026quot;#+index: ?\u0026quot; \u0026quot;#+index: ?\u0026quot;) (\u0026quot;I\u0026quot; \u0026quot;#+include %file ?\u0026quot; \u0026quot;\u0026lt;include file=%file markup=\\\u0026quot;?\\\u0026quot;\u0026gt;\u0026quot;))) #+end_src ``` この設定を，init.orgに書き込んでおいて，「\u0026lt;lのあとにTAB」とすれば，上述のように展開される．この次の記事でまとめて書こうと考えていたが，すっかり失念していた．ここに書いておいたほうが確かにわかりやすい．mickaushyさん，ご指摘ありがとうございました．  Codeの記述  上記の#+begin_src emacs-lispと#+end_srcの間にemacs-lispで設定内容を書く．ここからが便利にできているところ． code-blockの中にいるときに   C-c \u0026lsquo;とする\n  当該のcode blockだけのバッファが表示される（下図の下のバッファ）\n     この中はemacs-lisp modeでsyntaxも普通に効くので，普通にコードを書く．もちろん，括弧の対応もハイライトで表示される．\n  C-c nとする\n  すると，インデントも綺麗に整えてくれる．\n  満足したら，C-c \u0026lsquo;で元のバッファに戻る．整形は綺麗なまま反映される．素晴らしい！\n   具体的なinit.orgの内容は次回のポスト以降に記述予定  ","date":1534431600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547442355,"objectID":"c3973bd911d5119ebc1c48efc65d3aa6","permalink":"/post/init_org/","publishdate":"2018-08-17T00:00:00+09:00","relpermalink":"/post/init_org/","section":"post","summary":"自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．\n参考サイト  俺、ちゃんと全部管理してます（org-modeでinit.elを管理する） babel-loader:org-mode で init.el を管理する方法 平衡点(2011-12-13) ORG-Babel + init.el = ?? | くらいまーず　はい Prelude init.el \u0026amp; org-babel  Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法 基本方針  個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む． 起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む． 具体的には，init.elで，(require \u0026lsquo;org)した後にorg-babel-load-fileでinit.orgを読み込む． しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．  Preludeの導入 前回のポスト（Emacsの設定（その1）Preludeの導入）を参考　emac-init.elの作成  ~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む  (require \u0026#39;org) (defvar my-config-dir (concat user-emacs-directory \u0026#34;personal/\u0026#34;)) (org-babel-load-file (expand-file-name \u0026#34;init.org\u0026#34; my-config-dir))  工夫と言っても， init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ． これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．  init.orgの作成  これでいよいよ肝心のinit.orgの作成を行う org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている． 具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．  Code blockの挿入   俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である．\n  org-modeで以下のようにする．（後述する設定が必要）","tags":["emacs","init-org","init-el"],"title":"Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する","type":"post"},{"authors":null,"categories":null,"content":"昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．\nPreludeとは  Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．． Prelude Githubはこちら  Preludeのインストール   上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになってはいるが心配性なもんで）．\n$ curl -L https://git.io/epre | sh   インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！ （2018年10月9日修正） デフォルトのままではこうならない．下記のように設定する必要あり．\n  prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．\n(require \u0026#39;prelude-helm) ;; Interface for narrowing and search (require \u0026#39;prelude-helm-everywhere) ;; Enable Helm everywhere .................. (require \u0026#39;prelude-latex) helmにすっかり慣らされてしまったのでこのあたりは外している．prelude-latexのコメントアウトを外すことにより，次回にEmacsを立ち上げるときに auctex がインストールされる．\n  preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．\n  super-save について（ 2019年6月1日追記 ）：この記事を書いてからすぐに気がついたのだが，現在のpreludeはsuper-saveがdefaultで設定されるので，こちらもoffにしないと自動保存が行われてしまう．これは好みの問題だとは思うが，私は嫌いなのでoffにしている．遅まきながら追記しておく．設定の変更は上述のとおりで，M-x customize からsuper-saveを検索し，offにする．下図を参考にしていただきたい．\n     個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．\n  ","date":1534258800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559368959,"objectID":"786398f30daac02b4b03938b98470f9a","permalink":"/post/prelude_install/","publishdate":"2018-08-15T00:00:00+09:00","relpermalink":"/post/prelude_install/","section":"post","summary":"昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．\nPreludeとは  Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．． Prelude Githubはこちら  Preludeのインストール   上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになってはいるが心配性なもんで）．\n$ curl -L https://git.io/epre | sh   インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！ （2018年10月9日修正） デフォルトのままではこうならない．下記のように設定する必要あり．\n  prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．\n(require \u0026#39;prelude-helm) ;; Interface for narrowing and search (require \u0026#39;prelude-helm-everywhere) ;; Enable Helm everywhere .................. (require \u0026#39;prelude-latex) helmにすっかり慣らされてしまったのでこのあたりは外している．prelude-latexのコメントアウトを外すことにより，次回にEmacsを立ち上げるときに auctex がインストールされる．\n  preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．\n  super-save について（ 2019年6月1日追記 ）：この記事を書いてからすぐに気がついたのだが，現在のpreludeはsuper-saveがdefaultで設定されるので，こちらもoffにしないと自動保存が行われてしまう．これは好みの問題だとは思うが，私は嫌いなのでoffにしている．遅まきながら追記しておく．設定の変更は上述のとおりで，M-x customize からsuper-saveを検索し，offにする．下図を参考にしていただきたい．\n     個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．\n  ","tags":["emacs","prelude"],"title":"Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）","type":"post"},{"authors":null,"categories":null,"content":"なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここではHomebrewを使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．\nEmacsで日本語を書いてると，M-xしたときに面倒なことになるので，Imput Method Editor (IME)用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（Emacs Mac Port）．ありがたい．\n$ brew tap railwaycat/emacsmacport $ brew install emacs-mac --with-modern-icon --with-imagemagick $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications  \u0026ndash;with-modern-iconを指定すると、新しいアイコンになる。    なお，他のoptionは以下のように打てば分かる．  $ brew tap railwaycat/emacsmacport $ brew info emacs-mac ","date":1534172400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375574,"objectID":"69826a60598312e775b9e92297cf554f","permalink":"/post/emacs_install/","publishdate":"2018-08-14T00:00:00+09:00","relpermalink":"/post/emacs_install/","section":"post","summary":"なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここではHomebrewを使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．\nEmacsで日本語を書いてると，M-xしたときに面倒なことになるので，Imput Method Editor (IME)用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（Emacs Mac Port）．ありがたい．\n$ brew tap railwaycat/emacsmacport $ brew install emacs-mac --with-modern-icon --with-imagemagick $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications  \u0026ndash;with-modern-iconを指定すると、新しいアイコンになる。    なお，他のoptionは以下のように打てば分かる．  $ brew tap railwaycat/emacsmacport $ brew info emacs-mac ","tags":["emacs","homebrew"],"title":"Emacsのインストール","type":"post"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic's Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["taipapa"],"categories":null,"content":" Click the Slides button above to demo Academic's Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Welcome to Slides Academic\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/img/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let's make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"\u0026hellip;\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530140400,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"/privacy/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/privacy/","section":"","summary":"\u0026hellip;","tags":null,"title":"Privacy Policy","type":"page"},{"authors":null,"categories":null,"content":"\u0026hellip;\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530140400,"objectID":"9b10c1f64082d3869fd4cb1f85809430","permalink":"/terms/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/terms/","section":"","summary":"\u0026hellip;","tags":null,"title":"Terms","type":"page"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["taipapa","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic's Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["taipapa","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic's Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]