<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | A perfect autumn day</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Sat, 24 Aug 2019 00:00:00 +0900</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>How to update hugo and academic theme (Part2)</title>
      <link>/post/how-to-update-hugo-and-academic-theme-part2/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0900</pubDate>
      <guid>/post/how-to-update-hugo-and-academic-theme-part2/</guid>
      <description>&lt;p&gt;前回（&lt;a href=&#34;../how-to-upgrade-hugo-and-academic-theme&#34;&gt;How to update hugo and academic theme (Part 1)&lt;/a&gt;）にhutoとacademicのアップデートをまとめたが，やはり，githubにdeployするときのエラーが，どうしても気になる．そこで，今回は，Academic themeのインストールを一からやり直すことにした．   Hugoとox-hugoのインストールやアップデートは前回の記事（&lt;a href=&#34;../how-to-upgrade-hugo-and-academic-theme&#34;&gt;How to update hugo and academic theme (Part 1)&lt;/a&gt;）を参考にしていただきたい．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-academic-kickstart-with-git&#34;&gt;Install Academic Kickstart with Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#migrate-content&#34;&gt;Migrate Content&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34; target=&#34;_blank&#34;&gt;Install&lt;/a&gt; Academicご本家の解説&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Update&lt;/a&gt; Academicご本家の解説&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-academic-kickstart-with-git&#34;&gt;Install Academic Kickstart with Git&lt;/h2&gt;

&lt;p&gt;やはり，公式ドキュメントに従うのが良いだろうと考え，上記のリンク先のInstallの解説の通りにしてみた．git submoduleを使うので，よく分からんと敬遠していたのだが，やってみると（作業自体は）簡単であった． &lt;a href=&#34;https://qiita.com/sotarok/items/0d525e568a6088f6f6bb&#34; target=&#34;_blank&#34;&gt;Git submodule の基礎&lt;/a&gt; によれば，「git submodule は、外部の git リポジトリを、自分の git リポジトリのサブディレクトリとして登録し、特定の commit を参照する仕組み」である．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;まず，Academic Kickstart repository を自分のウェブサイトを作るためにクローンする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd
/Data/MyBlog
$ git clone https://github.com/sourcethemes/academic-kickstart.git Taipapablog
Cloning into &#39;Taipapablog&#39;...
remote: Enumerating objects: 579, done.
remote: Total 579 (delta 0), reused 0 (delta 0), pack-reused 579
Receiving objects: 100% (579/579), 163.92 KiB | 480.00 KiB/s, done.
Resolving deltas: 100% (179/179), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついで，themeをsubmoduleでinitializeする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd Taipapablog
$ pwd
/Data/MyBlog/Taipapablog
$ git submodule update --init --recursive
Submodule &#39;themes/academic&#39; (https://github.com/gcushen/hugo-academic.git) registered for path &#39;themes/academic&#39;
Cloning into &#39;/Data/MyBlog/Taipapablog/themes/academic&#39;...
Submodule path &#39;themes/academic&#39;: checked out &#39;32b6145c06835e33668100105ac1835593cf8d72&#39;
$ ls
LICENSE.md          config/             netlify.toml        themes/
README.md           content/            scripts/            update_academic.sh*
academic.Rproj      data/               static/             view.sh*
$ ll
total 72
drwxr-xr-x  18 kohkichi  admin   576 Aug 24 16:34 .
drwxr-xr-x  18 kohkichi  admin   576 Aug 24 16:35 ..
-rw-r--r--   1 kohkichi  admin   298 Aug 24 16:34 .editorconfig
drwxr-xr-x  13 kohkichi  admin   416 Aug 24 16:34 .git
-rw-r--r--   1 kohkichi  admin    15 Aug 24 16:34 .gitignore
-rw-r--r--   1 kohkichi  admin   106 Aug 24 16:34 .gitmodules
-rw-r--r--   1 kohkichi  admin  1078 Aug 24 16:34 LICENSE.md
-rw-r--r--   1 kohkichi  admin  2671 Aug 24 16:34 README.md
-rw-r--r--   1 kohkichi  admin   258 Aug 24 16:34 academic.Rproj
drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 config
drwxr-xr-x   7 kohkichi  admin   224 Aug 24 16:34 content
drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 data
-rw-r--r--   1 kohkichi  admin   380 Aug 24 16:34 netlify.toml
drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 scripts
drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 static
drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 themes
-rwxr-xr-x   1 kohkichi  admin  1628 Aug 24 16:34 update_academic.sh
-rwxr-xr-x   1 kohkichi  admin    49 Aug 24 16:34 view.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;う〜む，実質2行のコマンドで終わり，これで，あとは，hugo serverと叩いて，ブラウザで，localhost:1313を開けば，デモ用のサイトが立ち上がる．非常に簡単である．&lt;/p&gt;

&lt;h2 id=&#34;migrate-content&#34;&gt;Migrate Content&lt;/h2&gt;

&lt;p&gt;前回（&lt;a href=&#34;../how-to-upgrade-hugo-and-academic-theme&#34;&gt;How to update hugo and academic theme (Part 1)&lt;/a&gt;）にすでに投稿記事などはスクリプトなどを使ってアップデートしてあるし，設定ファイルもアップデート済みである．そちらのディレクトリから，config, content (home, postなど主要な部分を含む), layouts, static, assetsなどを，今回新たに作成したTaipapablog directoryにコピーすれば良い．コピー後にもう一度Taipapablog directoryの中身を見ると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls
LICENSE.md                   layouts/
README.md                    netlify.toml
Taipapablog-20180816_v2.org  public/
academic.Rproj               resources/
assets/                      scripts/
config/                      static/
content/                     themes/
data/                        update_academic.sh*
deploy.sh*                   view.sh*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな風になっているはずである．（Taipapablog-20180816_v2.orgは，ox-hugoで書いたこのブログの原稿）&lt;/p&gt;

&lt;p&gt;これで，hugo root directoryで，hugo serverを叩くと，元のブログが立ち上がる．&lt;/p&gt;

&lt;p&gt;あれ，今回は簡単にできてしまった．既に，前回で，Page Bundlesやfeatured imageに合わせて修正していたから，本当に流し込むだけであった．さて，これで，deployしてもエラーが出なければOKである．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to update hugo and academic theme (Part 1)</title>
      <link>/post/how-to-upgrade-hugo-and-academic-theme/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0900</pubDate>
      <guid>/post/how-to-upgrade-hugo-and-academic-theme/</guid>
      <description>&lt;p&gt;最近のニュースを見ていて思い出した言葉がある．&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;True patriotism hates injustice in its own land more than anywhere else.” ― Clarence Darrow&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Patriotism is the last refuge of a scoundrel.&amp;rdquo; ― Samuel Johnson&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Violence is the last refuge of the incompetent.&amp;rdquo;&amp;rdquo; ― Salvor Hardin ( Isaac Asimov)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3番目はオマケ&lt;/p&gt;

&lt;p&gt;閑話休題，以前の記事（&lt;a href=&#34;../horizontal_scrollbar&#34;&gt;How to add horizontal scrollbar for codeblock in academic theme of hugo&lt;/a&gt;）で触れたように，このブログは，Hugoという静的サイトジェネレーター（themeはacademic）で作成している．&lt;/p&gt;

&lt;p&gt;実際には，ox-hugoというemacsのorg-modeのパッケージを用いて書いて，それをhugoのmarkdownとしてexportしている．同記事内で，academic themeのupgradeが速すぎて全く追随できていないと書いた．記事はゴールデンウィークの5月4日に投稿しており，既に3ヶ月以上が経過している．この夏休みにようやくupdateすることができたので，後日のためにまとめておく．&lt;/p&gt;

&lt;p&gt;本来なら，まずox-hugoを用いたhugoでのブログの作り方をまとめるべきであろうが，ネットを少し探せば，私のような素人よりはるかに詳しい方が懇切丁寧に解説しているサイトが山のように存在する．また，ブログ設定の一から十まで溯る気力もないので，順番が逆になるが，今回はアップグレードからということにした．素人がアップデートに困ってあれこれやったことの詳細なメモということで．．．(^^;;;&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hugoのupdate&#34;&gt;Hugoのupdate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ox-hugo-update&#34;&gt;ox-hugo update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#academic-theme-update&#34;&gt;Academic theme update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#migrate-content&#34;&gt;Migrate Content&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#front-matter&#34;&gt;Front matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#featured-image&#34;&gt;Featured image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#recent-postsのサマリが長すぎる&#34;&gt;Recent Postsのサマリが長すぎる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#recent-postsの画像表示のフォーマット変更&#34;&gt;Recent Postsの画像表示のフォーマット変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alerts&#34;&gt;Alerts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#warn-dot-dot-dot-dot-dot-found-no-layout-file-for-css-for-home&#34;&gt;WARN &amp;hellip;.. found no layout file for &amp;ldquo;CSS&amp;rdquo; for &amp;ldquo;home&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#追記&#34;&gt;追記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;HUGO&lt;/a&gt;  ご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;  academic themeのご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mit.edu/~k2smith/post/getting-started/&#34; target=&#34;_blank&#34;&gt;Getting started with the Academic framework for Hugo&lt;/a&gt;  academic themeのインストール&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Update&lt;/a&gt;  academic themeのupdateについて&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ox-hugo.scripter.co&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;  ox-hugoのご本家&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hugoのupdate&#34;&gt;Hugoのupdate&lt;/h2&gt;

&lt;p&gt;hugoを最新版にする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew upgrade hugo
..........
$ hugo version
Hugo Static Site Generator v0.57.2/extended darwin/amd64 BuildDate: unknown

$ brew info hugo
hugo: stable 0.57.2 (bottled), HEAD
Configurable static site generator
https://gohugo.io/
/usr/local/Cellar/hugo/0.57.2 (41 files, 59.2MB) *
Poured from bottle on 2019-08-19 at 21:45:45
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hugo.rb
==&amp;gt; Dependencies
Build: go ✘
==&amp;gt; Options
--HEAD
Install HEAD version
==&amp;gt; Caveats
Bash completion has been installed to:
/usr/local/etc/bash_completion.d
==&amp;gt; Analytics
install: 23,734 (30 days), 46,557 (90 days), 196,750 (365 days)
install_on_request: 22,865 (30 days), 45,011 (90 days), 186,183 (365 days)
build_error: 0 (30 days)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ox-hugo-update&#34;&gt;ox-hugo update&lt;/h2&gt;

&lt;p&gt;ox-hugoを最新版にする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;M-x package-utils-upgrade-by-name
...........
ox-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C-h C-l ox-hugo-pkg.elすると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-package &amp;quot;ox-hugo&amp;quot; &amp;quot;20190802.1755&amp;quot; &amp;quot;Hugo Markdown Back-End for Org Export Engine&amp;quot;
  &#39;((emacs &amp;quot;24.4&amp;quot;)
    (org &amp;quot;9.0&amp;quot;))
  :keywords
  &#39;(&amp;quot;org&amp;quot; &amp;quot;markdown&amp;quot; &amp;quot;docs&amp;quot;)
  :url &amp;quot;https://ox-hugo.scripter.co&amp;quot;)
;; Local Variables:
;; no-byte-compile: t
;; End:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最新版であることが確認できる．&lt;/p&gt;

&lt;h2 id=&#34;academic-theme-update&#34;&gt;Academic theme update&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Update&lt;/a&gt; のサイトには，以下の3つの場合でのupdateの方法が書かれている．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you installed Academic Kickstart&lt;/li&gt;
&lt;li&gt;If you installed by Git cloning hugo-academic&lt;/li&gt;
&lt;li&gt;If you installed from a ZIP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;問題は，自分がどうやってインストールしたかを忘れている（！）ことだった&amp;hellip;..(^^;;;  versionも 2.4.0とかなり古い． しかも，恐らくは，数種類の方法を重ねて試した結果が現在の状況と考えられるので，ドキュメントの通りにやってもうまくいくはずがない気がした．&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    以下のhugo new citeを行ってから，academic をgit cloneする方法はお勧めしない．この方法では，git repositryの中にgit repositoryを埋め込むことになりエラーが出る．1のAcademic Kickstartを使う方法が良い．次回の記事（&lt;a href=&#34;../how-to-update-hugo-and-academic-theme-part2&#34;&gt;How to update hugo and academic theme (Part2)&lt;/a&gt;）を参考にしていただきたい．以下の記述は自戒のために残しておく．
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;del&gt;色々悩んだ末に，2の方法をいちから，やり直すことにした．要するにクリーンインストールを行い，その上に，現在までの内容を流し込むという泥臭いやり方を選択したわけである．&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;以下，&lt;a href=&#34;http://www.mit.edu/~k2smith/post/getting-started/&#34; target=&#34;_blank&#34;&gt;Getting started with the Academic framework for Hugo&lt;/a&gt; に沿って，まず，hugoで新しいサイトを作成し，そこにacademic themeをgitでインストールし，最新版の4.4.0になっていることを確認する．&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/hoge
$ hugo new site Taipapablog
$ cd Taipapablog
$ pwd
/Data/hoge/Taipapablog
$ git clone https://github.com/gcushen/hugo-academic.git themes/academic
$ less themes/academic/data/academic.toml
# Academic

version = &amp;quot;4.4.0&amp;quot;
themes/academic/data/academic.toml (END)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;そして，academicのexampleSite folder の中身を全てwebsite root folder（今回はTaipapablog directory）にコピーする．これらは，config fileなどを含んでおり，自分のウェブサイトの鋳型になる．&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd
/Data/hoge/Taipapablog
$ ls themes/academic/exampleSite/
config/  content/ static/
$ cp -av themes/academic/exampleSite/* .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;ここで，Hugo serverをwebsite root folderから立ち上げる．&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd
/Data/hoge/Taipapablog
$ hugo server --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;これで，ブラウザで，url windowにlocalhost:1313と打てば，Academic powered websiteのデモが立ち上がる．ここまでは実に簡単である．&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;migrate-content&#34;&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/#migrate-content&#34; target=&#34;_blank&#34;&gt;Migrate Content&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;ここから以前の記事の内容を流し込んでいくわけであるが，academicの新旧versionの間には断絶があって，単純に流し込んで終わりというわけにはいかない．これも，上書きアップデート（？）のようなやり方を諦めた理由である．この断絶を &lt;strong&gt;&amp;ldquo;Breaking changes&amp;rdquo;&lt;/strong&gt; と呼んでいる．これを乗り越えてブログの内容を移行するための&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34; target=&#34;_blank&#34;&gt;academic-scripts&lt;/a&gt; のリンクが上記ページにある．これは，hugoの新しい機能である&lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34; target=&#34;_blank&#34;&gt;Page Bundles&lt;/a&gt; への移行を自動化するスクリプトである．簡単に言えば，Page Bundlesとは，&lt;a href=&#34;https://gohugo.io/content-management/page-resources/&#34; target=&#34;_blank&#34;&gt;Page Resources&lt;/a&gt; をグループ化する方法であり，詳細は，リンク先を参照されたい．Page Bundlesは，下記のような構造になる．つまり，ファイルの構成が変わってmdファイルひとつだったのが，フォルダ（ディレクトリ）となり，mdファイルの名前はindex.mdとなり，かつ，featured.jpgが自動的にページの冒頭に置かれるようになる．同一記事に使用する画像などは，同じディレクトリ内にまとめることができる．以下は，アップデート前後の /Data/hoge/Taipapablog/content/post の比較である．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Old version
$ tree -L 2
.
├── Different-segment-to-each-facet-in-ggplot.md
├── Emacs_Install.md
├── EmbedRplotInBlog.md
├── ExportRplot.md
├── FullTextSearch.md
├── Japanese_setup.md
..........

Current version
$ tree -L 2
.
├── Different-segment-to-each-facet-in-ggplot
│   ├── featured.jpg
│   └── index.md
├── Emacs_Install
│   ├── featured.jpg
│   └── index.md
├── EmbedRplotInBlog
│   ├── featured.jpg
│   └── index.md
├── ExportRplot
│   ├── featured.jpg
│   └── index.md
├── FullTextSearch
│   ├── featured.jpg
│   └── index.md
├── Japanese_setup
│   ├── featured.jpg
│   └── index.md
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほどのスクリプトは，このフォルダ構成への移行を自動化してくれる．これをgitでクローンする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/hoge
$ ls
Taipapablog
$ git clone https://github.com/sourcethemes/academic-scripts.git
Cloning into &#39;academic-scripts&#39;...
remote: Enumerating objects: 27, done.
remote: Total 27 (delta 0), reused 0 (delta 0), pack-reused 27
Unpacking objects: 100% (27/27), done.
$ ls
Taipapablog
academic-scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このacademic-scriptsの中身を見ると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd academic-scripts/
$ ls
LICENSE.md
README.md
refactor-homepage-sections-to-bundles.sh*
refactor-pages-to-page-bundles.sh*
refactor_page_bundles_to_pages.sh*
$ less refactor-pages-to-page-bundles.sh
#!/bin/sh

# Helps migrate from v2.4.0 to v3.0.0
#
# Refactor a page named `X.md` to `content/&amp;lt;section&amp;gt;/X/index.md` to use the
# new page bundles and featured image system
#
..........
$ less refactor-homepage-sections-to-bundles.sh
#!/usr/bin/env bash

# Helps migrate from v4.1 to v4.2
#
# Refactors homepage sections named `content/home/X.md` to `content/home/X/index.md`,
# treating homepage sections as headless page bundles in Hugo.
#
# - E.g. an About section named `content/home/about.md` is converted to `content/home/about/index.md`
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という具合に，確かに，pageからpage bundlesへの移行を自動でやってくれるようになっている．そこで，これまでのブログをTaipapablog_OLDとして保存し，そのポスト（投稿記事）にこのスクリプトを適用する．その後，これらの記事を全て新しい方のTaipapablogのpostにコピーする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/hoge
$ ls
Taipapablog
Taipapablog_OLD
academic-scripts
$ cd Taipapablog_OLD/
$ pwd
/Data/hoge/Taipapablog_OLD
$ ../academic-scripts/refactor-pages-to-page-bundles.sh
./content/posts/annotation.md -&amp;gt; ./content/posts/annotation/index.md
./content/post/org-html-export-theme.md -&amp;gt; ./content/post/org-html-export-theme/index.md
./content/post/org-mode_paper_2.md -&amp;gt; ./content/post/org-mode_paper_2/index.md
..........
$ cp -a content/post/* ../Taipapablog/content/post/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降の作業は全て，新しい方のTaipapablog directoryで行う．こちらのcontent/home/にも先ほどのスクリプトのホームページセクション用のものを適用しておいた．こちらは不要かもしれない．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ../academic-scripts/refactor-homepage-sections-to-bundles.sh
./content/home/search.md -&amp;gt; ./content/home/search/index.md
./content/home/hero_carousel.md -&amp;gt; ./content/home/hero_carousel/index.md
./content/home/hero.md -&amp;gt; ./content/home/hero/index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにより，/Data/hoge/Taipapablog/content/posts/*.mdや/Data/hoge/Taipapablog/content/home/.mdが，先ほどtreeで示したようなディレクトリ構造になる．&lt;/p&gt;

&lt;p&gt;ここから先は，config/, content/, content/home/, content/post/の中身を弄って，アップデートする前と同じになるように修正していく．私は，blogをhugoのmarkdown自体はほとんど弄ることなく，org-modeのパッケージであるox-hugoで書いているので，そちらを中心に述べる．&lt;/p&gt;

&lt;h3 id=&#34;front-matter&#34;&gt;Front matter&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;content/home/には，demo, experienceなど多くのwidgetが入っているが，ほとんど使用してないので，それぞれのindex.mdのfront matterの最初の方にあるactive = trueを &lt;strong&gt;active = false&lt;/strong&gt; にする．&lt;/li&gt;
&lt;li&gt;上記のスクリプトを適用した際に，headless = true  # This file represents a page section. が二重になることがあったので，余分な部分は全て削除した．&lt;/li&gt;
&lt;li&gt;新規ポストを投稿する際に，page bundlesの形式になるようにするために，propertiesに &lt;strong&gt;EXPORT_HUGO_BUNDLE&lt;/strong&gt; を使用する．詳細は次節で述べる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;subtitle&lt;/strong&gt; を使用するのが可能となった．もしかして以前から？　以下のように，ox-hugoでpropertiesに追加すれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle &amp;quot;Hugoとacademic テーマのアップデート&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;featured-image&#34;&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34;&gt;Featured image&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;各ポストの冒頭に掲げていた画像は，アップデート前は明示的に場所と名前を指示しないといけなかったが，アップデート後はPage Bundlesとなり，同じフォルダにfeatured.jpgとして置いておけば，自動的にその記事の冒頭に表示されるようになる．各画像の移動が面倒であったが，今後は楽になりそう．．．(^^&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ox-hugoから，Page Bundlesとしてexportするためには，propertiesに &lt;strong&gt;EXPORT_HUGO_BUNDLE&lt;/strong&gt; を使って以下のように書けば，Front Matterとしてexportされる．2個目の項目追加からは，*EXPORT_HUGO_BUNDLE+* とする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;:PROPERTIES:
:EXPORT_HUGO_BUNDLE: how-to-upgrade-hugo-and-academic-theme
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle &amp;quot;Hugoとacademic テーマのアップデート&amp;quot;
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image &#39;((placement . 3) (caption . &amp;quot;Ancient greek pottery, Musée du Louvre&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Featured imageをどのような大きさで表示するかについては，上述のリンク先に説明がある．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Featured image
# To use, place an image named `featured.jpg/png` in your page&#39;s folder.
# Placement options: 1 = Full column width, 2 = Out-set, 3 = Screen-width
# Focal point options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight
# Set `preview_only` to `true` to just use the image for thumbnails.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずは，旧記事に合わせて，スクリーン幅となるplacement = 3とした．ox-hugoでのpropertiesで上述のように指定する．captionのつけ方も上記の通り．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recent-postsのサマリが長すぎる&#34;&gt;Recent Postsのサマリが長すぎる！&lt;/h3&gt;

&lt;p&gt;Home ページの下方には，Recent Postsがあり，最近の記事のサマリが画像とともに表示される．この表示形式は以下のように5種類が選べる（&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#view&#34; target=&#34;_blank&#34;&gt;View&lt;/a&gt;）．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Several widgets have a view option to let you choose the layout of the widget. The following layouts are available:

1 = List (previously Simple)
2 = Compact (previously Stream)
3 = Card (previously Detailed)
4 = Citation (previously APA and MLA), only available for publications
Optionally, edit the value of citation_style in params.toml to APA or MLA
5 = Showcase (large images), only available for projects
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中から，以前のversionに一番近い 3，つまり，カード形式を選択した．しかし，画像のcropがイマイチで，しかもサマリがサマリと言えないくらいに長い．updateする前のフォーマットが気に入っていたので，この変化は残念．&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-a-blog-post&#34; target=&#34;_blank&#34;&gt;Create a blog post&lt;/a&gt; に記載されているように， &lt;strong&gt;&amp;lt;!&amp;ndash;more&amp;ndash;&amp;gt;&lt;/strong&gt; を記事本文の適当なところに挿入して，サマリの長さを調整することにした．&lt;/p&gt;

&lt;h3 id=&#34;recent-postsの画像表示のフォーマット変更&#34;&gt;Recent Postsの画像表示のフォーマット変更&lt;/h3&gt;

&lt;h4 id=&#34;references-1&#34;&gt;References&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/crop-less-with-focal-point/15387&#34; target=&#34;_blank&#34;&gt;Crop Less with Focal Point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/image-processing/&#34; target=&#34;_blank&#34;&gt;Image Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/partials/&#34; target=&#34;_blank&#34;&gt;Partial Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ottan.xyz/hugo-template-partial-define-block-20190101/&#34; target=&#34;_blank&#34;&gt;Hugoのテンプレート構文「template」「partial」「block」「define」のわかりやすい解説&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述のfeatured imageを記事のheader imageとして表示する際のサイズやクロップのやり方が気に入らないので，変更することにした．cardでacademic themeに全文検索をかけると， &lt;strong&gt;li_card.html&lt;/strong&gt; というファイルが見つかり，どうやら，これが，カード形式のテンプレート（&lt;a href=&#34;https://gohugo.io/templates/partials/&#34; target=&#34;_blank&#34;&gt;Partial Templates&lt;/a&gt;）と推察され，これを変更すれば良いと気がついた．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Data/hoge/Taipapablog/layouts&lt;/em&gt; に &lt;strong&gt;partials&lt;/strong&gt; directoryを作成し，/Data/hoge/Taipapablog/themes/academic/layouts/partials/ &lt;strong&gt;li_card.html&lt;/strong&gt; をコピーする．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugoは以下の優先順位で読み込まれる．（&lt;a href=&#34;https://gohugo.io/templates/partials/#partial-template-lookup-order&#34; target=&#34;_blank&#34;&gt;Partial Template Lookup Order&lt;/a&gt;）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;layouts/partials/*&lt;PARTIALNAME&gt;.html&lt;/li&gt;
&lt;li&gt;themes/&lt;THEME&gt;/layouts/partials/*&lt;PARTIALNAME&gt;.html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;したがって，1にコピーしたli_card.htmlを弄れば，それが優先されることになる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下のように，li_card.htmlの53行目を変更する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;.....
52 {{ with $resource }}
53 {{ $image := .Fill (printf &amp;quot;918x517 q90 %s&amp;quot; $anchor) }}
54 &amp;lt;a href=&amp;quot;{{ $item.RelPermalink }}&amp;quot;&amp;gt;
.....

-----&amp;gt;
.....
53 {{ $image := .Resize &amp;quot;900x&amp;quot;  }}
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは， &lt;a href=&#34;https://gohugo.io/content-management/image-processing/&#34; target=&#34;_blank&#34;&gt;Image Processing&lt;/a&gt; に解説されているように，FillをResizeに変更しただけであるが，ほぼ望み通りの画像表示となった．&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;alerts&#34;&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34; target=&#34;_blank&#34;&gt;Alerts&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;これは今回見つけた新たな小道具&lt;/li&gt;
&lt;li&gt;ノート，ヒント，警告などに有用．&lt;/li&gt;
&lt;li&gt;いくつか方法はあるが，shortcodeを使うのが一番簡単．&lt;br /&gt;
｛{% alert note %}}&lt;br /&gt;
  A Markdown aside is useful for displaying notices, hints, or definitions to your readers.&lt;br /&gt;
  ｛{% alert  %}}&lt;br /&gt;
により，（最初の &lt;strong&gt;&amp;rdquo;{&amp;rdquo;&lt;/strong&gt; はescapeできないので全角の &lt;strong&gt;&amp;ldquo;｛&amp;rdquo;&lt;/strong&gt; にしていることに注意）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;となる．&lt;/p&gt;

&lt;p&gt;｛{% alert warning %}}&lt;br /&gt;
 A Markdown aside is useful for displaying notices, hints, or definitions to your readers.&lt;br /&gt;
 ｛{% /alert %}}&lt;br /&gt;
 は，以下のようになる．（最初の &lt;strong&gt;&amp;rdquo;{&amp;rdquo;&lt;/strong&gt; はescapeできないので全角の &lt;strong&gt;&amp;ldquo;｛&amp;rdquo;&lt;/strong&gt; にしていることに注意）&lt;br /&gt;
 &lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;また，使ってみよう．&lt;/p&gt;

&lt;h3 id=&#34;warn-dot-dot-dot-dot-dot-found-no-layout-file-for-css-for-home&#34;&gt;WARN &amp;hellip;.. found no layout file for &amp;ldquo;CSS&amp;rdquo; for &amp;ldquo;home&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;アップデートしていじっているうちに，
  &lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    WARN 2019/08/23 0028 found no layout file for &amp;ldquo;CSS&amp;rdquo; for &amp;ldquo;home&amp;rdquo;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;のような警告が出るようになった（早速使ってみた）．サイト自体のビルドはできて，実害はないが，気持ちが悪いので，ネットを探ると，academicの作者のGitHub pageに，そのものズバリの &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues/1060&#34; target=&#34;_blank&#34;&gt;Featurette widget does not change from example #1060&lt;/a&gt; があった．&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have updated to the unreleased version. You&amp;rsquo;ll need to remove the &amp;ldquo;CSS&amp;rdquo; output entry from config.Toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということなので，以下のように作業した．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vi /Data/hoge/Taipapablog/config/_default/config.toml
.....
45 [outputs]
46   home = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;WebAppManifest&amp;quot;, &amp;quot;CSS&amp;quot;]
47   section = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot; ]
.....
-----&amp;gt;
.....
45 [outputs]
46 #  home = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;WebAppManifest&amp;quot;, &amp;quot;CSS&amp;quot;]
47   home = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;WebAppManifest&amp;quot;]
48   section = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot; ]
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;46行目の&amp;rdquo;CSS&amp;rdquo;を削除するだけで，警告が出なくなった．(^o^)&lt;/p&gt;

&lt;p&gt;見え方にまだまだ不満はあるが，こんなところだろうか．アップデートしてから，貼り付けた画像の上にマウスを持っていくと，拡大鏡のアイコンになり，クリックすると2段階で拡大されるようになった．他にも変化はあるようだが，全然活用できていない．ぼちぼち触っていって，面白いことがあれば，また，まとめてみよう．．．&lt;/p&gt;

&lt;h2 id=&#34;追記&#34;&gt;追記&lt;/h2&gt;

&lt;p&gt;githubにdeployした時に，以下のようなエラーが生じた．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;warning: adding embedded git repository: themes/academic
hint: You&#39;ve added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint:
hint: 	git submodule add &amp;lt;url&amp;gt; themes/academic
hint:
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint:
hint: 	git rm --cached themes/academic
hint:
hint: See &amp;quot;git help submodule&amp;quot; for more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーは吐くものの，deployはできて，ウェブでサイトも見られるので，疲れたし（笑），しばらくは，このままで行くことにする．themeのインストールは，submoduleで行うべきだったと，今更にして気がついた．次回アップデートする時にやってみよう．．．(^^;;;&lt;/p&gt;

&lt;p&gt;で，結局，気になって，academic themeのインストールをやり直した（笑）．次回の記事（&lt;a href=&#34;../how-to-update-hugo-and-academic-theme-part2&#34;&gt;How to update hugo and academic theme (Part2)&lt;/a&gt;）を参照されたい．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Full text search of PDF archives with hyperestraier on maos (mojave) — Hyper Estraierでpdfの全文検索を行う</title>
      <link>/post/fulltextsearch/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0900</pubDate>
      <guid>/post/fulltextsearch/</guid>
      <description>&lt;p&gt;論文というものはすぐにたまる．読みもしないのにどんどんたまる．21世紀に入った頃は論文のプリントアウトの山ができて定期的に捨てたりしていたのだが，それも今は昔，現在はpdfの時代であり，かなり前からpdfで読んで，注釈など書き込んだりするようになった．しかし，どんどんたまるのは昔以上である．何しろ取るスペースはディスクの容量だけで，物理空間を占拠するわけではないから，いくらでも気兼ねなくため込める．ため込んだ論文数が数千を越えるあたりで，ふと思うわけである．「これを全て読むのは不可能としても，全文検索ができたら便利だろうなぁ．．．」&lt;/p&gt;

&lt;p&gt;という訳で，今回は，hyperestraierを使ってため込んだpdfの全文検索をできるようにしようという話である．&lt;/p&gt;

&lt;p&gt;hyperestraierをインストールし，Apacheをセットアップして，pdf文書のインデックスを作成し，これをブラウザで検索できるようにするという流れでまとめていく．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;セットアップは結構面倒だが，非常に便利で，オススメである！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;なお，以下の手順は，MacBook Pro (15-inch, Late 2016) Mojave 10.14.6，および，iMac 2012 Mojave 10.14.6 の両方で確認済みである．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hyper-estraier&#34;&gt;Hyper Estraier&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pdftotext&#34;&gt;pdftotext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ユーザー用のウェブディレクトリの作成&#34;&gt;ユーザー用のウェブディレクトリの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#全文検索用のディレクトリの作成&#34;&gt;全文検索用のディレクトリの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#全文検索用のindexの作成&#34;&gt;全文検索用のindexの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indexの更新&#34;&gt;indexの更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#検索のテスト&#34;&gt;検索のテスト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#apache-set-up&#34;&gt;Apache set up&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cgi-を許可するように-apache-を設定する&#34;&gt;CGI を許可するように Apache を設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#apacheの起動-再起動&#34;&gt;Apacheの起動，再起動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cgiが動くかどうかのテスト&#34;&gt;CGIが動くかどうかのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#documentroot&#34;&gt;DocumentRoot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ユーザ毎のウェブディレクトリ&#34;&gt;ユーザ毎のウェブディレクトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hyperestraier付属の全文検索用cgi-scriptのset-up&#34;&gt;Hyperestraier付属の全文検索用CGI scriptのset up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://skalldan.wordpress.com/2011/06/28/hyper-estraier-で仏典探索/&#34; target=&#34;_blank&#34;&gt;Hyper Estraier で仏典探索&lt;/a&gt;     Amrtaさんのものすごく役に立つサイト&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skalldan.wordpress.com/2011/07/01/hyper-estraier-で-pdf-文書管理/&#34; target=&#34;_blank&#34;&gt;Hyper Estraier で PDF 管理&lt;/a&gt;    これまた，Amrtaさんの物凄く役に立つサイト．以上の2つを読めば，このサイトを見る必要はないような．．．(^^;;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sudoしてrootになるのはイヤ，普通のユーザーとしてapacheを使ってブラウザで全文検索をしたいという人は，この先を読むと参考になるかもしれない．&lt;/p&gt;

&lt;h2 id=&#34;hyper-estraier&#34;&gt;Hyper Estraier&lt;/h2&gt;

&lt;p&gt;今回用いるのは&lt;a href=&#34;https://fallabs.com/hyperestraier/index.ja.html&#34; target=&#34;_blank&#34;&gt;Hyper Estraier&lt;/a&gt;という全文検索システムである．これがどんなものかはリンク先の文書を読んでもらうとして，早速インストールである．&lt;/p&gt;

&lt;h3 id=&#34;install&#34;&gt;Install&lt;/h3&gt;

&lt;p&gt;homebrewを使用すれば一発である．qdbmなどの依存関係も全部面倒を見てくれるので楽である．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install hyperestraier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールされたものを見るとこうなっている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew info hyperestraier

hyperestraier: stable 1.4.13 (bottled)
Full-text search system for communities
https://fallabs.com/hyperestraier/
/usr/local/Cellar/hyperestraier/1.4.13 (278 files, 3.1MB) *
Built from source on 2016-12-24 at 22:34:54 with: --with-mecab
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hyperestraier.rb
==&amp;gt; Dependencies
Required: qdbm
==&amp;gt; Analytics
install: 3 (30 days), 16 (90 days), 64 (365 days)
install_on_request: 3 (30 days), 16 (90 days), 64 (365 days)
build_error: 0 (30 days)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pdfのindexを作成する際に，hyperestraierに含まれているestfxpdftohtmlというフィルタでPDFのファイルをHTML形式に変換する．しかし，このフィルタは/usr/local/bin/などには入ってくれないので，brewによりインストールされた場所を探して，pathの通るところにsymbolic linkを張っておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mdfind -name filter | grep hyperestraier
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter

$ ls -al /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter
total 48
drwxr-xr-x   8 kohkichi  admin   256 Feb 16  2017 ./
drwxr-xr-x  19 kohkichi  admin   608 Dec 24  2016 ../
-rwxr-xr-x   1 kohkichi  admin  1118 Dec 24  2016 estfxasis*
-rwxr-xr-x   1 kohkichi  admin  1063 Dec 24  2016 estfxmantotxt*
-rwxr-xr-x   1 kohkichi  admin  1263 Dec 24  2016 estfxmsotohtml*
-rwxr-xr-x   1 kohkichi  admin  1016 Dec 24  2016 estfxpdftohtml*
-rwxr-xr-x   1 kohkichi  admin  1007 Dec 24  2016 estfxxdwtotxt*
-rwxr-xr-x   1 kohkichi  admin  1057 Dec 24  2016 estwnetxpnd*

$ ln -s /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter/* /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pdftotext&#34;&gt;pdftotext&lt;/h3&gt;

&lt;p&gt;上述のestfxpdftohtmlであるが，内部でpdftotextを使用している．そして，厄介なことに，このpdftotextはxpdfとpopplerの両方に含まれている．しかも，xpdfに含まれているpdftotextには &lt;strong&gt;-htmlmeta&lt;/strong&gt; optionがないのである．つまり， &lt;strong&gt;xpdfに含まれているpdftotextを使用するとpdf文書のindexができない&lt;/strong&gt; ということになる．実際にそれぞれのversionを見てみると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;lt;&amp;lt;xpdf&amp;gt;&amp;gt;
$ pdftotext -h
pdftotext version 4.01.01
Copyright 1996-2019 Glyph &amp;amp; Cog, LLC
..........

&amp;lt;&amp;lt;poppler&amp;gt;&amp;gt;
$ pdftotext -h
pdftotext version 0.77.0
Copyright 2005-2019 The Poppler Developers - http://poppler.freedesktop.org
Copyright 1996-2011 Glyph &amp;amp; Cog, LLC
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように，全く異なったものになっているが，どうやら，xpdfのものの方が古いらしい．もし，xpdfをすでに入れている場合は，popplerをインストールしようとすると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install poppler

Error: Cannot install poppler because conflicting formulae are installed.
xpdf: because poppler, pdftohtml, pdf2image, and xpdf install conflicting executables

Please `brew unlink xpdf` before continuing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と怒られるので，言われる通りに brew unlink xpdf してから，再度，brew install popplerを行えば良い．これで，popplerの方のpdftotextが使われるようになって，ちゃんとindexができるようになる．私は2台あるMacの片方でだけ何故かindexが作成できないので，原因を調べているうちにこのことに気がついたが，ネットで他に触れている記事が見当たらないので，ここにまとめておく．&lt;/p&gt;

&lt;p&gt;また，このようにしてxpdfとpopplerをインストールしていると，&lt;a href=&#34;../pdf-tools/#追記-2019年7月17日&#34;&gt; Emacsでpdfを読む (pdf-tools) (2019.07.17追記)&lt;/a&gt;に書いたように，pdf-toolをコンパイルする際に「libffiがどこにあるか分からん」というようなエラーメッセージが出ることがある．その際の対処法は，&lt;a href=&#34;../pdf-tools/#追記-2019年7月17日&#34;&gt; Emacsでpdfを読む (pdf-tools) (2019.07.17追記)&lt;/a&gt;に書いたとおりである．&lt;/p&gt;

&lt;h3 id=&#34;ユーザー用のウェブディレクトリの作成&#34;&gt;ユーザー用のウェブディレクトリの作成&lt;/h3&gt;

&lt;p&gt;まず，Apacheを用いてブラウザで検索できるように（これについては後述），自分のhome directoryにSitesというdirectoryを作成する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~
$ mkdir Sites
$ cd Sites
$ pwd
/Users/taipapa/Sites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apacheの設定のところで述べるが，このSitesというディレクトリにウェブサイトを構築できるように設定し，WWW ブラウザで全文検索できるようにする．&lt;/p&gt;

&lt;h3 id=&#34;全文検索用のディレクトリの作成&#34;&gt;全文検索用のディレクトリの作成&lt;/h3&gt;

&lt;p&gt;Sites ディレクトリの中に全文検索用のディレクトリを作成する．ここではpdfファイルの全文検索を行うので，pdfという名前にした．さらに，pdf ディレクトリの中に全文検索の対象となるpdfを集約するためのPDFsというディレクトリを作成する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~/Sites
$ mkdir pdf
$ cd pdf
$ mkdir PDFs
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pdfsディレクトリへのpdfの集約&#34;&gt;PDFsディレクトリへのpdfの集約&lt;/h4&gt;

&lt;p&gt;さて，pdfは，大抵の場合，いくつかのディレクトリに分けて置いてあるであろう．それを全て1箇所に集約して全文検索ができるようにするために，シンボリックリンクを使用する．具体的には，pdfのあるディレクトリが，/Data/hogehoge, /Data/fugaguga, /Data/misc とすると，以下のようにする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Users/taipapa/Sites/pdf/PDFs
$ ln -s /Data/hogehoge .
$ ln -s /Data/fugafuga .
$ ln -s /Data/misc .
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;全文検索用のindexの作成&#34;&gt;全文検索用のindexの作成&lt;/h3&gt;

&lt;p&gt;hyperestraierのestcmdを用いて，空のindexを作成する．名前はマニュアルの真似をしてcasketとする（わかれば何でも良いと思う）．これはpdfの配下でPDFsと同じレベルに置く&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd
/Users/taipapa/Sites/pdf
$ estcmd create casket
$ ls -la
total 24
drwxr-xr-x   5 taipapa  staff   160 Jul 29 20:34 .
drwxr-xr-x   8 taipapa  staff   256 Aug  4 22:19 ..
-rw-r--r--@  1 taipapa  staff  8196 Aug  5 22:12 .DS_Store
drwxr-xr-x  10 taipapa  staff   320 Jul 29 20:21 PDFs
drwxr-xr-x  11 taipapa  staff   352 Jul 29 21:14 casket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでようやく，indexを作成する準備が整った．後は以下のように叩けば良い．optionについてはマニュアルを参照．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Users/taipapa/Sites/pdf
$ estcmd gather -pc UTF-8 -cl -fx &amp;quot;.pdf&amp;quot; &amp;quot;H@estfxpdftohtml&amp;quot; -il ja -lf -1 -sd -cm -um casket PDFs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;document数が11734個，語数が1351563のindex作成に要した時間は約40分強であった．これは，MacBook Pro (15-inch, Late 2016)でもiMac 2012 でも，ほとんど変わらなかった．&lt;/p&gt;

&lt;p&gt;optionとしては，optimizeがインデックスを最適化して、不要な領域を削除，purgeはインデックス内にあってファイルシステム上にない文書の情報を削除する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Users/taipapa/Sites/pdf
$ estcmd optimize /Library/WebServer/Documents/pdf/casket
$ estcmd purge -cl /Library/WebServer/Documents/pdf/casket
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;indexの更新&#34;&gt;indexの更新&lt;/h3&gt;

&lt;p&gt;前述の3つのコマンドを打てば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Users/taipapa/Sites/pdf
$ estcmd gather -pc UTF-8 -cl -fx &amp;quot;.pdf&amp;quot; &amp;quot;H@estfxpdftohtml&amp;quot; -il ja -lf -1 -sd -cm -um casket PDFs
$ estcmd optimize /Library/WebServer/Documents/pdf/casket
$ estcmd purge -cl /Library/WebServer/Documents/pdf/casket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初にゼロからindexを作成する際は，上記のようにかなり時間がかかるが，一旦作ってしまえば，更新はごく短時間で終了する．更新の自動化については，Amrtaさんの &lt;a href=&#34;https://skalldan.wordpress.com/2011/07/01/hyper-estraier-で-pdf-文書管理/#sec-3&#34; target=&#34;_blank&#34;&gt;インデックス更新の自動化&lt;/a&gt; を参考にされたい．&lt;/p&gt;

&lt;h3 id=&#34;検索のテスト&#34;&gt;検索のテスト&lt;/h3&gt;

&lt;p&gt;試しにterminalで検索してみる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Users/taipapa/Sites/pdf
$ estcmd search -vh casket HSP27
--------[02D18ACF711B9586]--------
VERSION	1.0
NODE	local
HIT	288
HINT#1	hsp27	288
TIME	0.001226
DOCNUM	11734
WORDNUM	1354563
VIEW	HUMAN
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うん，ちゃんと動いている．それに速い！&lt;/p&gt;

&lt;h2 id=&#34;apache-set-up&#34;&gt;Apache set up&lt;/h2&gt;

&lt;p&gt;terminalで検索ではあまりに寂しいので，ブラウザで検索できるようにするために，Web serverを立ち上げる．MacにはデフォルトでApacheがインストールされているというありがたい状態になっているので，これを使う．なお，Apacheについては，&lt;a href=&#34;https://www.kagoya.jp/howto/rentalserver/apache/&#34; target=&#34;_blank&#34;&gt;Apacheとは？Webサーバーの仕組みと人気サーバーソフトを徹底解説&lt;/a&gt;などを参考にされたい．&lt;/p&gt;

&lt;p&gt;Apacheの設定については，以下を参考にした．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考1：&lt;a href=&#34;https://qiita.com/shuntaro%5Ftamura/items/bdabcb77926dc92617b1&#34; target=&#34;_blank&#34;&gt;Macでローカルサーバを立ち上げる方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考2：&lt;a href=&#34;https://qiita.com/kid%5Fdrill/items/5c85917068490177b6ab&#34; target=&#34;_blank&#34;&gt;MacでApacheを立ち上げてみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考3：&lt;a href=&#34;https://qiita.com/YuukiWatanabe/items/f89fe047ace61d2d2b45&#34; target=&#34;_blank&#34;&gt;Macでローカルサーバー構築あれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考4：&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/howto/cgi.html&#34; target=&#34;_blank&#34;&gt;Apache Tutorial: CGI による動的コンテンツ&lt;/a&gt;  （結局，きちんと理解する為には，これをはじめとするApacheのチュートリアルを読むのが一番であった）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらのサイトを読んだ方が早いのだが，自分のために設定などをまとめておく．&lt;/p&gt;

&lt;p&gt;まず，念のためにApacheが既にインストールされているかどうかを確かめてみる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ httpd -v
Server version: Apache/2.4.34 (Unix)
Server built:   Feb 22 2019 20:20:11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確かにインストールされている．&lt;/p&gt;

&lt;h3 id=&#34;cgi-を許可するように-apache-を設定する&#34;&gt;CGI を許可するように Apache を設定する&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/howto/cgi.html&#34; target=&#34;_blank&#34;&gt;Apache Tutorial: CGI による動的コンテンツ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apacheの設定ファイルの場所は、/etc/apache2/httpd.conf&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;CGI (Common Gateway Interface) は，ウェブサーバが コンテンツ生成をする外部プログラムと協調して動作するための方法を 定義している．&lt;/li&gt;
&lt;li&gt;CGI プログラムを正しく動作させるには、CGI を許可するように Apache の設定を行う必要がある．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apache が共有モジュール機能付きでビルドされている場合、モジュールがロードされていることを確認する．具体的には，/etc/apache2/httpd.conf をviを使って以下のように書き換えれば良い（root権限が必要なので sudo している）．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo vi /etc/apache2/httpd.conf
....
165 #LoadModule cgi_module libexec/apache2/mod_cgi.so
-----&amp;gt;
LoadModule cgi_module libexec/apache2/mod_cgi.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;165行目の行頭の＃を外してアンコメントし，有効化しておく．&lt;br /&gt;
これをやらないと，cgiが働かず，そのファイル自体がダウンロードされてしまう．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定ファイルの更新内容を反映させるためにはApacheの再起動が必要&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apacheの起動-再起動&#34;&gt;Apacheの起動，再起動&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apacheの起動&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apachectl start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apacheの停止&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apachectl stop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apacheの再起動&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apachectl restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでApacheを起動したので，hyperestraierに含まれている検索用CGI scriptを利用する．&lt;/p&gt;

&lt;h3 id=&#34;cgiが動くかどうかのテスト&#34;&gt;CGIが動くかどうかのテスト&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/howto/cgi.html&#34; target=&#34;_blank&#34;&gt;Apache Tutorial: CGI による動的コンテンツ&lt;/a&gt; には，「ScriptAlias ディレクティブを使用して、 CGI プログラム用の特別な別ディレクトリを Apache に設定します。 Apache は、このディレクトリ中の全てのファイルを CGI プログラムであると仮定します。 そして、この特別なリソースがクライアントから要求されると、 そのプログラムの実行を試みます。」と記載されている．一方, mojaveのデフォルトの /etc/apache2/httpd.confでは，ScriptAliasではなく，以下のようにScriptAliasMatchを用いている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;373  ScriptAliasMatch ^/cgi-bin/((?!(?i:webobjects)).*$) &amp;quot;/Library/WebServer/CGI-Executables/$1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この正規表現の記述により，cgi-bin/というパスが/Library/WebServer/CGI-Executables/に対応するようになっている（詳細は，&lt;a href=&#34;http://httpd.apache.org/docs/2.4/mod/mod%5Falias.html#scriptalias&#34; target=&#34;_blank&#34;&gt;ScriptAlias ディレクティブ&lt;/a&gt;  のScriptAliasMatch ディレクティブを参照）&lt;/p&gt;

&lt;p&gt;ということで，/Library/WebServer/CGI-Executables/にcgi scriptを置けば，CGI programとして動くはずである．macでは最初からperlがインストールされているので，以下のようなperl script（&amp;rdquo;Hello&amp;rdquo;と表示するだけ）を作成して試してみる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl
print &amp;quot;Content-type: text/html \n\n&amp;quot;;
print &amp;quot;Hello&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを，test.cgiとして保存し，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ chomod 755 test.cgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;して，実行権限を付与した上で，/Library/WebServer/CGI-Executables/に置く．この状態で，ブラウザのurl windowに localhost/cgi-bin/test.cgi と打ち込むと，&amp;rdquo;Hello&amp;rdquo; と表示される．&lt;/p&gt;

&lt;p&gt;さて，次の段階に進む前にDocumentRootについて，ちょっと説明が必要（後日の自分のため）．&lt;/p&gt;

&lt;h3 id=&#34;documentroot&#34;&gt;DocumentRoot&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&#34;https://www.adminweb.jp/apache/docroot/index1.html&#34; target=&#34;_blank&#34;&gt;ドキュメントルート(DocumentRoot)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/etc/apache2/httpd.confを，lessを使って読んでみると以下のように書かれている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ less -N /etc/apache2/httpd.conf
..........
240 #
241 # DocumentRoot: The directory out of which you will serve your
242 # documents. By default, all requests are taken from this directory, but
243 # symbolic links and aliases may be used to point to other locations.
244 #
245 DocumentRoot &amp;quot;/Library/WebServer/Documents&amp;quot;
246 &amp;lt;Directory &amp;quot;/Library/WebServer/Documents&amp;quot;&amp;gt;
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要するにDocumentRootというのは文書やコンテンツの置き場所として使われるディレクトリである．Macの場合は， &lt;strong&gt;DocumentRoot &amp;ldquo;/Library/WebServer/Documents&amp;rdquo;&lt;/strong&gt; と指定されており，WWW serverとして公開する内容は，/Library/WebServer/Documents 以下に配置していくことになる．他の場所を参照するためにシンボリックリンクやエーリアスを使用しても良いと書かれている．&lt;/p&gt;

&lt;p&gt;先ほど起動したApacheへブラウザからアクセスすると（ブラウザのurl が表示されているところにlocalhostと打てば良い）以下のような画面が表示される．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Apache.jpg&#34; &gt;

&lt;img src=&#34;/img/Apache.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これは，/Library/WebServer/Documents/index.html.en が表示されているのである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ less /Library/WebServer/Documents/index.html.en
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
/Library/WebServer/Documents/index.html.en (END)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり，この  /Library/WebServer/Documents ディレクトリの配下が， &lt;a href=&#34;http://localhost&#34; target=&#34;_blank&#34;&gt;http://localhost&lt;/a&gt; のroot直下となる．pdfを含むディレクトリ，あるいはそのシンボリックリンクを/Library/WebServer/Documents ディレクトリの配下に置けば全文検索を行うcgi scriptの対象とできるわけである．&lt;/p&gt;

&lt;p&gt;しかし，そうなると，前述の/Library/WebServer/CGI-Executables/に於いても同じであるが，全ての作業をrootとして行わなければならなくなり，何をするにもsudoしないといけないのが面倒であるし，security上でも問題であろう．そこで，UserDir ディレクティブを使って 各ユーザがホームディレクトリにSites directoryを作成し，ウェブサイトを構築できるように設定する．要するに，先ほど作成した/Users/taipapa/Sites/pdf/以下のディレクトリで全文検索ができるように設定するということである．&lt;/p&gt;

&lt;h3 id=&#34;ユーザ毎のウェブディレクトリ&#34;&gt;ユーザ毎のウェブディレクトリ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参照1：&lt;a href=&#34;http://motw.mods.jp/Mac/local%5Fserver.html&#34; target=&#34;_blank&#34;&gt;apacheを使ってローカルサーバーを構築する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照2：&lt;a href=&#34;http://neos21.hatenablog.com/entry/2019/01/27/080000&#34; target=&#34;_blank&#34;&gt;MacOS 同梱の Apache が参照するドキュメントルートを変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照3：&lt;a href=&#34;https://qiita.com/colorrabbit/items/3ab4c2d863a55ca72d35&#34; target=&#34;_blank&#34;&gt;MacOS X の Yosemite (10.10) で Sites ディレクトリを使って localhost をアカウント別に利用する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照4：&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/howto/public%5Fhtml.html&#34; target=&#34;_blank&#34;&gt;ユーザ毎のウェブディレクトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やはりApacheのチュートリアル（&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/howto/public%5Fhtml.html&#34; target=&#34;_blank&#34;&gt;ユーザ毎のウェブディレクトリ&lt;/a&gt;）を読むのが一番分かりやすかった．以下はこのサイトからの引用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「複数のユーザのいるシステムでは、UserDir ディレクティブを使って 各ユーザがホームディレクトリにウェブサイトを構築できるように設定することが 可能です。URL &lt;a href=&#34;http://example.com/~username/&#34; target=&#34;_blank&#34;&gt;http://example.com/~username/&lt;/a&gt; を訪れた人は &amp;ldquo;username&amp;rdquo; というユーザの UserDir ディレクティブで指定された サブディレクトリからコンテンツを得ることになります。」&lt;/li&gt;
&lt;li&gt;「デフォルトではこれらのディレクトリへのアクセスは許可されていません。 UserDir を使って有効にできます。 有効にするには、デフォルトの設定ファイルで付随する httpd-userdir.conf ファイルが必要」という翻訳になっている．意味はなんとなくわかるが，後半部分は「デフォルトの設定ファイルであるhttpd-userdir.conf ファイルの中の次の行をアンコメントすることによりアクセスが可能となる．また，必要に応じてhttpd-userdir.confも適切に変更する」と訳すべきと思う．&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;httpd-userdir-dot-confの有効化&#34;&gt;httpd-userdir.confの有効化&lt;/h4&gt;

&lt;p&gt;手順としては，まず，/etc/apache2/httpd.confの511行目の行頭の#を外し，コメントアウトを外してhttpd-userdir.confを有効にする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo vi /etc/apache2/httpd.conf
..........
510 # User home directories
511 #Include /private/etc/apache2/extra/httpd-userdir.conf
-----&amp;gt;
511 Include /private/etc/apache2/extra/httpd-userdir.conf
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;httpd-userdir-dot-confの編集-ユーザー毎の設定ファイルを読み込む様にする&#34;&gt;httpd-userdir.confの編集（ユーザー毎の設定ファイルを読み込む様にする）&lt;/h4&gt;

&lt;p&gt;ついで，有効にした /etc/apache2/extra/httpd-userdir.confを見て，編集する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo vi /etc/apache2/extra/httpd-userdir.conf

1 # Settings for user home directories
2 #
3 # Required module: mod_authz_core, mod_authz_host, mod_userdir
4
5 #
6 # UserDir: The name of the directory that is appended onto a user&#39;s home
7 # directory if a ~user request is received.  Note that you must also set
8 # the default access control for these directories, as in the example below.
9 #
10 UserDir Sites
11
12 #
13 # Control access to UserDir directories.  The following is an example
14 # for a site where these directories are restricted to read-only.
15 #
16 # Include /private/etc/apache2/users/*.conf
17 &amp;lt;IfModule bonjour_module&amp;gt;
18        RegisterUserSite customized-users
19 &amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10行目の&amp;rdquo;UserDir Sites&amp;rdquo;は デフォルトでアンコメントされており，そのままで良い．これにより，~usernameでSites directoryにアクセスできるようになる．編集する部分は，16行目の &amp;ldquo; # Include /private/etc/apache2/users/*.conf&amp;rdquo; であり，行頭の＃を外してアンコメントし，有効化しておく．これによりユーザーごとの設定ファイルを読み込む様になる（&lt;a href=&#34;https://qiita.com/colorrabbit/items/3ab4c2d863a55ca72d35&#34; target=&#34;_blank&#34;&gt;MacOS X の Yosemite (10.10) で Sites ディレクトリを使って localhost をアカウント別に利用する方法&lt;/a&gt;）．&lt;/p&gt;

&lt;p&gt;また，3行目にあるように，ユーザーのホームディレクトリのセットアップのために， &lt;strong&gt;mod_authz_core, mod_authz_host, mod_userdirを全て有効&lt;/strong&gt; にしておく必要がある．以下のように， &lt;strong&gt;/etc/apache2/httpd.conf&lt;/strong&gt; を編集する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vi /etc/apache2/httpd.conf
......
77 LoadModule authz_host_module libexec/apache2/mod_authz_host.so
78 LoadModule authz_groupfile_module libexec/apache2/mod_authz_groupfile.so
79 LoadModule authz_user_module libexec/apache2/mod_authz_user.so
80 #LoadModule authz_dbm_module libexec/apache2/mod_authz_dbm.so
81 #LoadModule authz_owner_module libexec/apache2/mod_authz_owner.so
82 #LoadModule authz_dbd_module libexec/apache2/mod_authz_dbd.so
83 LoadModule authz_core_module libexec/apache2/mod_authz_core.so
......
173 #LoadModule speling_module libexec/apache2/mod_speling.so
174 #LoadModule userdir_module libexec/apache2/mod_userdir.so
175 LoadModule alias_module libexec/apache2/mod_alias.so
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;77行目の &amp;ldquo;LoadModule authz_host_module libexec/apache2/mod_authz_host.so&amp;rdquo; と83行目の &amp;ldquo;LoadModule authz_core_module libexec/apache2/mod_authz_core.so&amp;rdquo;はデフォルトでアンコメントされていたが，174行目の &amp;ldquo;#LoadModule userdir_module libexec/apache2/mod_userdir.so&amp;rdquo; はコメントアウトされていたので，#を外して有効化した．これらの設定で， &lt;strong&gt;ユーザーディレクトリが有効&lt;/strong&gt; になる．&lt;/p&gt;

&lt;h4 id=&#34;ユーザー毎の設定ファイルを作成&#34;&gt;ユーザー毎の設定ファイルを作成&lt;/h4&gt;

&lt;p&gt;自分の使っているusernameを知らない人はいないと思うが，万一分からなければ以下のコマンドを使う．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ whoami
taipapa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついで，/etc/apache2/users にユーザー毎の設定ファイルを作成する．今回はtaipapaの設定ファイルということになる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo vi /etc/apache2/users/taipapa.conf

&amp;lt;Directory &amp;quot;/Users/taipapa/Sites/&amp;quot;&amp;gt;
AddHandler cgi-script cgi
AllowOverride All
Options Indexes FollowSymLinks Multiviews ExecCGI
Require all granted
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容を簡単に説明する．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Directory (&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/mod/core.html#directory&#34; target=&#34;_blank&#34;&gt;Directory ディレクティブ&lt;/a&gt;): 指定されたディレクトリとそのサブディレクトリにのみ ディレクティブを適用させるためには、 Directory と /Directory を対として、ディレクティブ群を囲む．以下はディレクティブの説明&lt;/li&gt;
&lt;li&gt;AddHandler (&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/mod/mod%5Fmime.html#addhandler&#34; target=&#34;_blank&#34;&gt;AddHandler ディレクティブ&lt;/a&gt; ): ファイル名の拡張子を指定されたハンドラにマップする．&amp;rdquo;AddHandler cgi-script cgi&amp;rdquo; により，/Users/taipapa/Sites/の配下にある拡張子 &amp;ldquo;.cgi&amp;rdquo; で終わるファイルを CGI スクリプトとして扱うようになる．&lt;/li&gt;
&lt;li&gt;AllowOverride (&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/mod/core.html#allowoverride&#34; target=&#34;_blank&#34;&gt;AllowOverride ディレクティブ&lt;/a&gt;): このディレクティブが All に設定されている時には、 .htaccess という コンテキスト を持つ 全てのディレクティブが利用できる．&lt;/li&gt;
&lt;li&gt;Options (&lt;a href=&#34;https://httpd.apache.org/docs/2.4/ja/mod/core.html#options&#34; target=&#34;_blank&#34;&gt;Options ディレクティブ&lt;/a&gt;): ディレクトリに対して使用可能な機能を設定する．個々の機能はリンク先を参照．今回重要なのは， &lt;strong&gt;ExecCGI&lt;/strong&gt; で，これはmod_cgiによるCGI scriptの実行を許可する．&lt;/li&gt;
&lt;li&gt;Require (参照：&lt;a href=&#34;https://qiita.com/100/items/ab31e57fcc66ac661d5c&#34; target=&#34;_blank&#34;&gt;Apache 2.4 設定ファイルの記述例&lt;/a&gt;): サーバーのディレクトリに接続してくるクライアントについて、許可・拒否する条件を指定するディレクティブ．昔はAllow ディレクティブやDeny ディレクティブを利用していた． &lt;strong&gt;&amp;ldquo;Require all granted&amp;rdquo; は、すべてのクライアントからの接続を許可する．&lt;/strong&gt; &amp;ldquo;Require all denied&amp;rdquo; は、すべてのクライアントからの接続を拒否する．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで，Apache関連の設定が終了した．次はいよいよCGI scriptの設定である．&lt;/p&gt;

&lt;h2 id=&#34;hyperestraier付属の全文検索用cgi-scriptのset-up&#34;&gt;Hyperestraier付属の全文検索用CGI scriptのset up&lt;/h2&gt;

&lt;p&gt;ようやく，ブラウザによる全文検索ができるようにするためにCGI scriptのset upをするところまでたどり着いた．hyperestraierに含まれている検索用CGI scriptは，&lt;a href=&#34;https://fallabs.com/hyperestraier/uguide-ja.html#estseek&#34; target=&#34;_blank&#34;&gt;estseek.cgi&lt;/a&gt;である．詳細はリンク先のマニュアルを参照していただきたい．そこにはこうある．「estseek.cgiが動作するには、設定ファイルとテンプレートファイルとトップページファイルとヘルプファイルが必要です。それぞれestseek.conf、estseek.tmpl、estseek.top、estseek.helpというのが標準的な名前です。」これらのscriptおよび関連ファイルは，brewでインストールした場合は，以下のような場所に入る．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mdfind -name estseek
/usr/local/Cellar/hyperestraier/1.4.13/libexec/estseek.cgi
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.top
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.tmpl
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.help
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.conf
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/increm/estseek-frame.html
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/increm/estseek-form.html
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.top
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.tmpl
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.help
/usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.conf

$ ls /usr/local/Cellar/hyperestraier/1.4.13/libexec/
estfraud.cgi* estproxy.cgi* estscout.cgi* estseek.cgi*  estsupt.cgi*

$ ls /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/
COPYING        estfraud.conf  estscout.conf  estseek.top    locale/
ChangeLog      estproxy.conf  estseek.conf   estsupt.conf
THANKS         estraier.idl   estseek.help   filter/
doc/           estresult.dtd  estseek.tmpl   increm/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そこで，これらのscriptをユーザーディレクトリのしかるべき場所にコピーする．今回は，まず，前半部で作成した/Users/taipapa/Sitesにcgi-bin というディレクトリを作成し，CGI scriptの置き場所とした．そして，その配下にestというディレクトリを作って，そこにhyperestraierによる全文検索用のscript などをコピーした．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Users/taipapa/Sites
$ mkdir -p cgi-bin/est
$ tree -L 2
.
├── cgi-bin
│   ├── est
│   └── test.cgi
├── index.html
├── pdf
│   ├── PDFs
│   └── casket
└── test.cgi
$ cd cgi-bin/est
$ cp -a /usr/local/Cellar/hyperestraier/1.4.13/libexec/* .
$ cp -a /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/est* .
$ ls
estfraud.cgi*  estproxy.conf  estscout.cgi*  estseek.conf   estseek.top
estfraud.conf  estraier.idl   estscout.conf  estseek.help   estsupt.cgi*
estproxy.cgi*  estresult.dtd  estseek.cgi*   estseek.tmpl   estsupt.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイルであるestseek.confはdefaultでは以下のようになっている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Users/taipapa/Sites/cgi-bin/est
$ less -N estseek.conf
..........
1 indexname: casket
2
3 tmplfile: estseek.tmpl
4
5 topfile: estseek.top
6
7 helpfile: estseek.help
8
9 lockindex: true
10
11 pseudoindex:
12
13 replace: ^file:///home/mikio/public_html/{{!}}http://localhost/
14 replace: /index\.html?${{!}}/
15
16 showlreal: false
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを以下のように編集する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;1 #indexname: casket
2 indexname: /Users/taipapa/Sites/pdf/casket
3
4 tmplfile: estseek.tmpl
5
6 topfile: estseek.top
7
8 helpfile: estseek.help
9
10 lockindex: true
11
12 pseudoindex:
13
14 #replace: ^file:///home/mikio/public_html/{{!}}http://localhost/
15 #replace: /index\.html?${{!}}/
16
17 replace: ^file:///Data/{{!}}http://localhost/~taipapa/pdf/PDFs/
18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;17行目の &lt;strong&gt;replace:&lt;/strong&gt; の部分はかなりの試行錯誤が必要であった．マニュアルでは，「replaceは正規表現によってURIを変換するのに使います。複数回指定できます。先頭にマッチする「^」を駆使すれば接頭辞（ディレクトリ）の変換ができますし、末尾にマッチする「$」を駆使すれば接尾辞（拡張子）の変換ができます。」とあるように，どこにpdf文書を置くかで適切に変更する必要がある．私の場合は，前述のごとく，pdfのあるディレクトリが，/Data/hogehoge, /Data/fugaguga, /Data/misc で，/Users/taipapa/Sites/pdf/PDFs にシンボリックリンクで集約したので，このような設定になった．他のファイルはdefaultのままとした．&lt;/p&gt;

&lt;p&gt;これで，全ての準備は整った．Sites ディレクトリには前半部で説明した通り，pdf archiveへのシンボリックリンクが集約されており，かつ，全文検索用の索引であるcasketも置いてある．全てが正しく設定されていれば，ブラウザのurl windowに &lt;strong&gt;&lt;a href=&#34;http://localhost/~username/cgi-bin/est/estseek.cgi&#34; target=&#34;_blank&#34;&gt;http://localhost/~username/cgi-bin/est/estseek.cgi&lt;/a&gt;&lt;/strong&gt; （今回は~usernameは~taipapa） と打ち込むと，以下のような全文検索の画面になるはずである．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/FTsearch_view.jpg&#34; &gt;

&lt;img src=&#34;/img/FTsearch_view.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;早速検索してみよう．HSP27と入れてみると，結果は以下の通り．検索に用いたキーワードが黄色でハイライトされている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/FTsearch_view2.jpg&#34; &gt;

&lt;img src=&#34;/img/FTsearch_view2.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;一番最初の2667.full.pdfを右クリックすると，下のように別タブでpdfが開く．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/FTsearch_view3.jpg&#34; &gt;

&lt;img src=&#34;/img/FTsearch_view3.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;また，各結果の[detail]の部分を右クリックすると以下のような画面が別タブで開く．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/FTsearch_view4.jpg&#34; &gt;

&lt;img src=&#34;/img/FTsearch_view4.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これは，pdfの内容をテキストで出力したものである．一見，見にくくて何の役にたつと思うかもしれないが，検索キーワードが黄色にハイライトされており，この単語の使い方が一目でわかるようになっている．論文を書くときに参考になる．&lt;/p&gt;

&lt;p&gt;この全文検索を使い始めてもう5-6年になるが，一旦セットアップしてしまえば，時々indexを更新する以外は手間いらずで，重宝している．更新の自動化については，前述の通り．&lt;/p&gt;

&lt;p&gt;今回は，このブログを始めて以来の長文になってしまった．後日の自分のためにできるだけ細かいところまで書き留めておいた．半分以上はApacheの設定に関する記述になっている（笑）．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacsでpdfを読む (pdf-tools) (2019.07.17追記)</title>
      <link>/post/pdf-tools/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0900</pubDate>
      <guid>/post/pdf-tools/</guid>
      <description>&lt;p&gt;Emacsでpdf文書を読もうとするとdefaultではDocViewで読むことになるが，解像度がイマイチで動きもややモッサリとしていて使い勝手が悪かったため，サクッと止めて，skimを使っている．ただ，pdf-toolsというのがあって，こちらは割とスグレモノらしいとの噂は聞いていた．そこで，今回はこれを試してみることにした．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#pdf-tools&#34;&gt;PDF Tools&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#インストール&#34;&gt;インストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#追記-2019年7月17日&#34;&gt;追記（2019年7月17日）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#設定&#34;&gt;設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用法&#34;&gt;使用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org-pdfview&#34;&gt;org-pdfview&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#インストールと設定&#34;&gt;インストールと設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pdf-toolsと他のアプリ-skim-previewなど-との比較&#34;&gt;PDF Toolsと他のアプリ（skim, Previewなど）との比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;pdf-tools&#34;&gt;PDF Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考１：&lt;a href=&#34;https://github.com/politza/pdf-tools&#34; target=&#34;_blank&#34;&gt;pdf-tools&lt;/a&gt;　ご本家&lt;/li&gt;
&lt;li&gt;参考２：&lt;a href=&#34;http://blog.livedoor.jp/hiroaki8270/archives/22871970.html&#34; target=&#34;_blank&#34;&gt;emacsをPDF Viewerにしよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考３：&lt;a href=&#34;https://ubutun.blogspot.com/2014/05/emacstexpdf.html&#34; target=&#34;_blank&#34;&gt;emacs内でTeX文書の作成からpdf閲覧まで行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考４：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/6x9gtb/pdftools%5Fon%5Fmacos/&#34; target=&#34;_blank&#34;&gt;pdf-tools on macos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考５：&lt;a href=&#34;http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/&#34; target=&#34;_blank&#34;&gt;VIEW AND ANNOTATE PDFS IN EMACS WITH PDF-TOOLS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考６：&lt;a href=&#34;http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/&#34; target=&#34;_blank&#34;&gt;MORE PDF-TOOLS TWEAKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考７：&lt;a href=&#34;http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/&#34; target=&#34;_blank&#34;&gt;EVEN MORE PDF-TOOLS TWEAKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考８：&lt;a href=&#34;https://github.com/politza/pdf-tools/issues/189&#34; target=&#34;_blank&#34;&gt;pdf-tools pretty much unusable with linum-mode enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考９：&lt;a href=&#34;https://www.youtube.com/watch?v=LFO2UbzbZhA&#34; target=&#34;_blank&#34;&gt;Using Emacs 44 - An Org mode and PDF-tools workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ご本家のイントロに書いてあるが，DocViewのようにghostscriptで予めrenderしておくのではなく，on demandでページを作成し，メモリーに貯めておく仕組みになっている．このrenderingは，popplerという名前の特別なライブラリーによって行われるが，これはepdfinfoと呼ばれるserver programの中で走っている．こいつの仕事はEmacsからの要求を連続して読んで適切な結果，すなわち，PDFのページのPNG imageを作成することである．&lt;/p&gt;

&lt;p&gt;　　「実際のところ，PDFファイルを表示するのはPDF toolsの仕事の一部に過ぎない．popplerは文書に関する全ての情報を提供でき，かつ，それを修飾もできるので，遥かにたくさんのことができる」とイントロの最後で大見得を切って，何ができるかを示す&lt;a href=&#34;https://www.dailymotion.com/video/x2bc1is?forcedQuality=hd720&#34; target=&#34;_blank&#34;&gt;動画&lt;/a&gt;を紹介している．&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;OSXは公式にはサポートされていないが，コンパイルできたと報告されている，と書いてあり，実際，以下のように出来た．まず，homebrewでpopplerをインストールする．もし，まだ，automakeを入れていなければそれもhomebrewでインストールする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install poppler automake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついで，pkg-configをexportでいじるようなことが書いてあるが，特にそれはせずともよかった．ただし，pdf-toolsのインストールの際にコンパイルエラーが出た．どういうわけか， &lt;strong&gt;pdf-tools          20180428.1527&lt;/strong&gt; ではだめだったが，幸い， &lt;strong&gt;pdf-tools          20181221.1913&lt;/strong&gt; が出たので，参考4：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/6x9gtb/pdftools%5Fon%5Fmacos/&#34; target=&#34;_blank&#34;&gt;pdf-tools on macos&lt;/a&gt;を頼りに，これにアップデートしたところ，あとは問題なくインストールできた．&lt;/p&gt;

&lt;h3 id=&#34;追記-2019年7月17日&#34;&gt;追記（2019年7月17日）&lt;/h3&gt;

&lt;p&gt;その後何度かpdf-toolをコンパイルすることがあったが，「libffiがどこにあるか分からん」というようなエラーメッセージが出て，「pkg-configでなんとかせい」と怒られるようになった．つまり，ご本家に書いてある通りになったわけである．そこで，libffiのpkgconfigを探して，それをPKG_CONFIG_PATHに含めるようにした．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mdfind -name pkgconfig | grep libffi
/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig
$ export PKG_CONFIG_PATH=/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig
$ /Applications/Emacs.app/Contents/MacOS/Emacs --debug-init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで下記のように設定していると，以下のようにpdf-toolが無事にコンパイルされる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/build/server/autobuild -i /Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/
---------------------------
Installing packages
---------------------------
Skipping package installation (already installed)

---------------------------
Configuring and compiling
---------------------------
./configure -q --bindir=/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/ &amp;amp;&amp;amp; make -s

Is case-sensitive searching enabled ?     yes
Is modifying text annotations enabled ?   yes
Is modifying markup annotations enabled ? yes


---------------------------
Installing
---------------------------
make -s install
/usr/local/bin/gmkdir -p &#39;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018&#39;
/usr/local/bin/ginstall -c epdfinfo &#39;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018&#39;
make[1]: Nothing to be done for `install-data-am&#39;.

===========================
Build succeeded. :O)
===========================
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;設定&#34;&gt;設定&lt;/h3&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書けばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  ;; initialise
  (pdf-tools-install)
  ;; PDF Tools does not work well together with linum-mode
  (add-hook &#39;pdf-view-mode-hook (lambda() (nlinum-mode -1)))
  ;; open pdfs scaled to fit page
  ;; (setq-default pdf-view-display-size &#39;fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd &amp;quot;C-s&amp;quot;) &#39;isearch-forward)
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下に内容を説明する．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pdf-tools-installにより最初のときにepdfinfoがコンパイルされる．&lt;/li&gt;
&lt;li&gt;行番号を表示するとうまく動かない．私はnlinum-modeを使っているのでpdf-view-modeの際には止めておく．&lt;/li&gt;
&lt;li&gt;ハイライトした部分には自動的に注釈を加える．&lt;/li&gt;
&lt;li&gt;swiperはうまく動かないので，C-sを普通のisearchに戻す&lt;/li&gt;
&lt;li&gt;＋とーで拡大，縮小だが，これを10%ずつにする．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使用法&#34;&gt;使用法&lt;/h3&gt;

&lt;p&gt;上記のインストールと設定を行えば，C-x C-fでも，drag &amp;amp; dropでも，Emacsのpdf toolsのpdf-view-modeでpdfが開くようになる．ここまでくれば，あとは色々なことができる．&lt;/p&gt;

&lt;h4 id=&#34;highlight&#34;&gt;highlight&lt;/h4&gt;

&lt;p&gt;マウスで文章をなぞって選択（下の画像の白黒反転した部分）したあとに，C-c C-a h もしくは，画像で示したように，PDF Tools &amp;rarr; Add markup annotation &amp;rarr; highlightを選択すれば，&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-2.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;選択した部分がハイライトされ，下に新たなバッファが開いてそこに注釈が書けるようになる（下の画像参照）．書き終わったら，C-c C-cで注釈バッファが閉じる．なお，上に元からある黄色にハイライトされた部分は以前に選択してハイライトした部分である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-3.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h4 id=&#34;display-annotations&#34;&gt;Display Annotations&lt;/h4&gt;

&lt;p&gt;複数箇所をハイライトして注釈をつけたあとに，全ての注釈を一度にリストにしてみることができる．C-c C-a l もしくは，PDF Tools &amp;rarr; Display Annotationsを選択すれば，下の画像のように，下に２つの新たなバッファが開く．真ん中のバッファに注釈のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動してブルーの枠で囲んで表示され，下のバッファに注釈の内容が表示される．qを押せば，2つのバッファは閉じる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-4.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-4.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h4 id=&#34;isearch-document--c-s&#34;&gt;Isearch document (C-s)&lt;/h4&gt;

&lt;p&gt;pdf-toolsはswiperとはconflictするために，C-sは本来のisearch-forwardに戻して設定しておく必要がある（前述の設定の通り）．これで，C-sとやると，minibufferに打ち込んだ語が反転して表示され，C-sとやるごとに先へ移動していく．下の画像では，&amp;rdquo;MK2&amp;rdquo;という単語を打った時の状態を示している．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-C-s.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-C-s.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h4 id=&#34;occur-document&#34;&gt;Occur document&lt;/h4&gt;

&lt;p&gt;PDF Tools &amp;rarr; Occur documentを選択すれば，minibufferに List lines matching PCRE: と表示される．そこに例えばMK2と打てば，下の画像のように，下に新たなバッファが開き，MK2のあるページとそこにある文章のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動する．qを押せば，下のバッファは閉じる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-occur.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-occur.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;org-pdfview&#34;&gt;org-pdfview&lt;/h2&gt;

&lt;p&gt;org-modeからpdf文書へのリンクを開くのをサポートするパッケージ．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考１：&lt;a href=&#34;https://github.com/markus1189/org-pdfview&#34; target=&#34;_blank&#34;&gt;org-pdfview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考２：&lt;a href=&#34;https://emacs.stackexchange.com/questions/19686/how-to-use-pdf-tools-pdf-view-mode-in-emacs&#34; target=&#34;_blank&#34;&gt;How to use pdf-tools (pdf-view-mode) in emacs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考３：&lt;a href=&#34;https://emacs.stackexchange.com/questions/31895/configure-org-pdfview-and-pdf-tools-to-open-at-page&#34; target=&#34;_blank&#34;&gt;Configure org-pdfview and pdf-tools to open at page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストールと設定&#34;&gt;インストールと設定&lt;/h3&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書くだけ．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package org-pdfview
  :ensure t)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例えば，Emacsのpdf-toolsを用いて，hogehoge.pdfを開いて読んでいるとする．そこで，C-c lとすると， &lt;strong&gt;Stored: /Data/Hoge/Fuga/hogefuga.pdf&lt;/strong&gt; と今読んでいるpdfへのリンクが保存される．そして，それを保存しておきたいorg文書の適当な場所で，C-c C-lとすれば，そのリンクが貼り付けられる．以前の記事（&lt;a href=&#34;../org-html-export-theme&#34;&gt;Org-modeでhtml exportの際のthemeについて&lt;/a&gt;）で書いたような文献のまとめを作成しているときに，元文献とリンクさせておく際などに便利である．貼り付けたリンクをクリックすれば，元文献がEmacsのpdf-toolsによって開かれるようになる（画面が分割され，下に新たなバッファが開いてそこにpdfが表示される）．割と便利である．&lt;/p&gt;

&lt;h2 id=&#34;pdf-toolsと他のアプリ-skim-previewなど-との比較&#34;&gt;PDF Toolsと他のアプリ（skim, Previewなど）との比較&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;注釈の一覧表示，C−s， occurなどの機能は便利である．&lt;/li&gt;
&lt;li&gt;skim, Previewなどでは，長方形ツールによりお好みの領域を選択してコピーすることができるし，このコピーした領域のみをpdfとして保存できるが，pdf-toolsではできない．&lt;/li&gt;
&lt;li&gt;skim, Preview, Adobe Acrobat Readerのように，全画面でプレゼンテーションするモードはない．&lt;/li&gt;
&lt;li&gt;Adobe Acrobat Readerのように，動画を動かすことは出来ない．&lt;/li&gt;
&lt;li&gt;上記２つの理由から，auctexを使用する際のpdf viewerとしてEmacsを使用していない．&lt;/li&gt;
&lt;li&gt;最近のpdfは，本文中に示された文献もしくはその番号をクリックすると，最後の文献リストの中の該当の論文のところに飛ぶようになっているものも多くなっているが，pdf-toolsはそれには対応していないようである．より正確にはリンク先が分からないようである．これは自力では解決できない．．．&lt;/li&gt;
&lt;li&gt;Outline構造にも対応しており，検出するのだが，リンク先が分からないようである．これも自力では解決できない．．．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上のことより，学会発表用のスライドなどを作成している際は，skimなどの方がpdf viewerとして便利であるが，文献のまとめなどpdfを読み込む際には，pdf-toolsの方が向いているのではないかと考えている．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mojaveのライブ変換で快適日本語入力（カーソルの色も日英で変わるように設定）</title>
      <link>/post/live/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0900</pubDate>
      <guid>/post/live/</guid>
      <description>&lt;p&gt;最初にmacosにライブ変換が登場した時に使用してみて，これは駄目だとすぐにGoogle inputmethodに戻してしまった．今年の5月にmojaveにupgradeしたのち，ある日，ふと思い立って，ライブ変換を試してみたところ，ほとんどストレスを感じることなくスラスラと入力ができた．ほとんど変換のためにスペースキーを叩く必要がないことに驚いた．予測の精度が登場時よりはるかに改良されているのであろう．エンドユーザーにはありがたいことである．早速乗り換えてしまった．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-set-up&#34;&gt;How to set up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shortcut&#34;&gt;Shortcut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-set-up&#34;&gt;How to set up&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;まず画面トップの右端の方の日本語入力のライブ変換にチェックを入れてオンにする．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついで，Emacsのカーソルの色の設定をする．これは以前の記事（&lt;a href=&#34;../japanese_setup&#34;&gt;Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など&lt;/a&gt;）の設定をほんの少し変えるだけのことである．comment outしていた部分を外して，google inputmethodの方をcomment outする．具体的には，init.orgに以下のように書き込めば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+BEGIN_SRC emacs-lisp
(when (fboundp &#39;mac-input-source)
(defun my-mac-selected-keyboard-input-source-chage-function ()
(let ((mac-input-source (mac-input-source)))
  (set-cursor-color
   (if (string-match &amp;quot;com.apple.inputmethod.Kotoeri.Roman&amp;quot; mac-input-source)
       ;; (if (string-match &amp;quot;com.google.inputmethod.Japanese.Roman&amp;quot; mac-input-source)
       &amp;quot;#91C3FF&amp;quot; &amp;quot;#FF9300&amp;quot;))))
(add-hook &#39;mac-selected-keyboard-input-source-change-hook
        &#39;my-mac-selected-keyboard-input-source-chage-function))
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでEmacsでライブ変換を使用している際に，日本語入力の時は赤色のカーソル，英語入力の時は青色のカーソルになる．&lt;/p&gt;

&lt;h2 id=&#34;shortcut&#34;&gt;Shortcut&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&#34;https://qiita.com/YumaInaura/items/8c74cdf32ad2f5ed57fa&#34; target=&#34;_blank&#34;&gt;#Mac のライブ変換で入力をひらがなのままで確定させる ( Control + J )&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;「Control」＋「J」  →   ひらがなに変換&lt;/li&gt;
&lt;li&gt;「Control」＋「K」  →   カタカナに変換&lt;/li&gt;
&lt;li&gt;「Control」＋「L」  →   全角英字に変換&lt;/li&gt;
&lt;li&gt;「Control」＋「;（セミコロン）」  →   半角英字に変換&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私のところでは何故か参考サイトと異なり，セミコロンで半角カタカナではなく半角英字に変換される．半角カタカナなんか使わないからいいけど．．．&lt;/p&gt;

&lt;p&gt;J, K, L, ; はキーボード上の位置が一直線であり，かつ，左から順番になっているので，指に優しい．&lt;/p&gt;

&lt;p&gt;mojaveのライブ変換，とにかく一度使ってみることをお勧めする．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Symbol Overlay (Highlight symbols at cursor point with keymap-enabled overlays in Emacs)</title>
      <link>/post/symbol-overlay/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0900</pubDate>
      <guid>/post/symbol-overlay/</guid>
      <description>&lt;p&gt;今回は（も？），redditで拾ってきたネタ（&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/c95cm5/how%5Fto%5Fhighlight%5Foccurences%5Fat%5Fcursor%5Fpoint%5Fin/&#34; target=&#34;_blank&#34;&gt;How to highlight occurences at cursor point in Emacs&lt;/a&gt;）．カーソルの位置にあるシンボル（単語と思えば良い）をバッファ内ですべてハイライトしてくれるEmacsのパッケージを訊いているのだが，いくつか答えがあって，一番便利そうだったのが，今回紹介する &lt;strong&gt;symbol-overlay&lt;/strong&gt; である．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use&#34;&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wolray/symbol-overlay&#34; target=&#34;_blank&#34;&gt;symbol-overlay&lt;/a&gt; （ご本家）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://manuel-uberti.github.io/emacs/2019/02/14/avy/&#34; target=&#34;_blank&#34;&gt;Jump around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/blue0513/items/c0dc35a880170997c3f5&#34; target=&#34;_blank&#34;&gt;Emacsの補完と検索を超強化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;例によって，以下のようにinit.orgに書き込んでMELPAからsymbol-overlayをインストールする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package symbol-overlay             ; Highlight symbols
  :ensure t
  :config
  (global-set-key (kbd &amp;quot;M-i&amp;quot;) &#39;symbol-overlay-put)
  (global-set-key (kbd &amp;quot;&amp;lt;f7&amp;gt;&amp;quot;) &#39;symbol-overlay-mode)
  (global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt;&amp;quot;) &#39;symbol-overlay-remove-all)
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-use&#34;&gt;How to use&lt;/h2&gt;

&lt;p&gt;使用法はご本家に書いてあるが，まず，”M-i”を叩けば，カーソルが位置しているシンボル（単語と思えば良い）が色付きでハイライトされる．同時に，同一バッファ内での全ての同じ単語も同様にハイライトされる．カーソルを動かしてもハイライトされた状態はそのままである．続けて，別の単語にカーソルを持って行って，&amp;rdquo;M-i&amp;rdquo;とすれば，その単語が別の色でハイライトされる．勿論，バッファ内の同一の単語も全て同じ色でハイライトされる．しかも，最初にハイライトした単語は，カーソルが離れた後もハイライトされた状態を維持している．文章で書くとわかりにくいが，要するに下図のような状態になる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/symbol-overlay.jpg&#34; &gt;

&lt;img src=&#34;/img/symbol-overlay.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;さらに，各単語間は &amp;ldquo;n&amp;rdquo; で先に進み， &amp;ldquo;p&amp;rdquo; で逆戻りできる．別の色のハイライトの単語にカーソルを移動させれば，今度はその単語間で同様に移動できる．そのほかご本家サイトによれば，以下のようなキーバインドになっている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&amp;quot;n&amp;quot; -&amp;gt; symbol-overlay-jump-next
&amp;quot;p&amp;quot; -&amp;gt; symbol-overlay-jump-prev
&amp;quot;w&amp;quot; -&amp;gt; symbol-overlay-save-symbol
&amp;quot;t&amp;quot; -&amp;gt; symbol-overlay-toggle-in-scope
&amp;quot;e&amp;quot; -&amp;gt; symbol-overlay-echo-mark
&amp;quot;d&amp;quot; -&amp;gt; symbol-overlay-jump-to-definition
&amp;quot;s&amp;quot; -&amp;gt; symbol-overlay-isearch-literally
&amp;quot;q&amp;quot; -&amp;gt; symbol-overlay-query-replace
&amp;quot;r&amp;quot; -&amp;gt; symbol-overlay-rename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なかでも特筆すべきは &amp;ldquo;r&amp;rdquo; のsymbol-overlay-renameで，ハイライトされた単語を一気に書き換えることができる．例えば下図のように &amp;ldquo;global-set-key&amp;rdquo; が赤くハイライトされている時，どれかの&amp;rdquo;global-set-key&amp;rdquo;にカーソルを置いて &amp;ldquo;r&amp;rdquo; を叩けば，minibufferにRenameが表示され，これを消去して新しい名前を書くと赤くハイライトされている単語は一気に新しい名前に変わる．この機能は場合によっては非常に便利である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Rename.jpg&#34; &gt;

&lt;img src=&#34;/img/Rename.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;こういうパッケージを教えてくれるので，redditは有難い．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to add annotation (ex. KEGG orthology) box to a plot in ggplot2</title>
      <link>/post/annotation/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0900</pubDate>
      <guid>/post/annotation/</guid>
      <description>&lt;p&gt;またまたRネタである．グラフに注釈をつけたくなることがあるが，なかなか見映えのする注釈をつけるのは難しい．最近，それなりの方法を見つけたので，まとめておく．例として，代謝経路の変化を縦型の折れ線グラフで描きKEGG orthologyによって分類したグラフを作成してみる．うーむ，自分で書いていてなんだが，マニアックなネタである．．．(^^;;;&lt;/p&gt;

&lt;p&gt;ま，備忘録として書いておこう．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-preparation&#34;&gt;Data Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plot-vertical-line-graph&#34;&gt;Plot vertical line graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flip-the-plot-so-that-horizontal-becomes-vertical-with-coord-flip&#34;&gt;Flip the plot so that horizontal becomes vertical with coord_flip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-annotation-box-by-geom-rect&#34;&gt;Add annotation box by geom_rect&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#remove-right-margin-with-expand-c--0-0&#34;&gt;Remove right margin with expand=c(0,0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#customize-tick-marks-with-limits-and-breaks-of-scale-y-continuous&#34;&gt;customize tick marks with limits and breaks of scale_y_continuous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-kegg-orthology--ko&#34;&gt;Add KEGG orthology (KO)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;Kyoto Encyclopedia of Genes and Genomes (KEGG) に関しては以下のサイトを参照&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genome.jp/kegg/docs/plea.html&#34; target=&#34;_blank&#34;&gt;KEGG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kegg.jp/kegg-bin/get%5Fhtext?br08902.keg&#34; target=&#34;_blank&#34;&gt;KEGG BRITE Hierarchy Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genome.jp/kegg-bin/show%5Fpathway?map01100&#34; target=&#34;_blank&#34;&gt;KEGG Metabolic pathways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genome.jp/kegg/ko.html&#34; target=&#34;_blank&#34;&gt;KO (KEGG ORTHOLOGY) Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-preparation&#34;&gt;Data Preparation&lt;/h2&gt;

&lt;p&gt;例によって，まず，架空のデータを作成する．Drugを投与して1，5，12，24時間後の代謝物の血中濃度変化を対照，つまり偽薬を投与した群と比較するという実験の結果を適当に作成する．代謝経路はKEGGのデータベースから適当に名前を充てがっておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;set.seed(100)
data.df1 &amp;lt;- data.frame(
  Pathwayname = c(&amp;quot;Cysteine and methionine metabolism&amp;quot;,&amp;quot;Histidine metabolism&amp;quot;,&amp;quot;Glucosinolate biosynthesis&amp;quot;,&amp;quot;Novobiocin biosynthesis&amp;quot;,&amp;quot;Phenylpropanoid biosynthesis&amp;quot;,&amp;quot;Pentose phosphate pathway&amp;quot;,&amp;quot;Cell cycle - yeast&amp;quot;,&amp;quot;Mineral absorption&amp;quot;,&amp;quot;Protein digestion and absorption&amp;quot;,&amp;quot;Type II diabetes mellitus&amp;quot;,&amp;quot;Insulin secretion&amp;quot;,&amp;quot;Carbon fixation in photosynthetic organisms&amp;quot;,&amp;quot;Photosynthesis&amp;quot;,&amp;quot;Peptidoglycan biosynthesis&amp;quot;,&amp;quot;Synthesis and degradation of ketone bodies&amp;quot;,&amp;quot;Cyanoamino acid metabolism&amp;quot;,&amp;quot;D-Glutamine and D-glutamate metabolism&amp;quot;,&amp;quot;Taurine and hypotaurine metabolism&amp;quot;,&amp;quot;GABAergic synapse&amp;quot;,&amp;quot;Retrograde endocannabinoid signaling&amp;quot;,&amp;quot;Synaptic vesicle cycle&amp;quot;,&amp;quot;Pyrimidine metabolism&amp;quot;,&amp;quot;HIF-1 signaling pathway&amp;quot;,&amp;quot;Morphine addiction&amp;quot;,&amp;quot;Nicotine addiction&amp;quot;,&amp;quot;Aminoacyl-tRNA biosynthesis&amp;quot;),
  C = rnorm(26, mean = 0, sd = 0.1),   # C: control
  OneH = rnorm(26, mean = 2, sd = 2),
  FiveH = rnorm(26, mean = 2, sd = 5),
  TwH = rnorm(26, mean = 4, sd = 10),
  TFH = rnorm(26, mean = 5, sd = 20))

data.df1
levels(data.df1$Pathwayname)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;
                                   Pathwayname            C       OneH
1           Cysteine and methionine metabolism -0.050219235  0.5595569
2                         Histidine metabolism  0.013153117  2.4618891
3                   Glucosinolate biosynthesis -0.007891709 -0.3154589
4                      Novobiocin biosynthesis  0.088678481  2.4941520
5                 Phenylpropanoid biosynthesis  0.011697127  1.8177729
6                    Pentose phosphate pathway  0.031863009  5.5147512
7                           Cell cycle - yeast -0.058179068  1.7241408
8                           Mineral absorption  0.071453271  1.7776130
9             Protein digestion and absorption -0.082525943  0.6199714
10                   Type II diabetes mellitus -0.035986213  1.5564115
11                           Insulin secretion  0.008988614  2.3658154
12 Carbon fixation in photosynthetic organisms  0.009627446  2.8346466
13                              Photosynthesis -0.020163395  4.1308047
14                  Peptidoglycan biosynthesis  0.073984050  3.9404040
15  Synthesis and degradation of ketone bodies  0.012337950  1.7967415
16                  Cyanoamino acid metabolism -0.002931671  4.8064070
17      D-Glutamine and D-glutamate metabolism -0.038885425 -1.5535513
18          Taurine and hypotaurine metabolism  0.051085626  3.2457348
19                           GABAergic synapse -0.091381419  0.9554333
20        Retrograde endocannabinoid signaling  0.231029682  4.6444619
21                      Synaptic vesicle cycle -0.043808998  1.2731193
22                       Pyrimidine metabolism  0.076406062  4.6381315
23                     HIF-1 signaling pathway  0.026196129  2.0875581
24                          Morphine addiction  0.077340460 -1.7573118
25                          Nicotine addiction -0.081437912  1.1058756
26                 Aminoacyl-tRNA biosynthesis -0.043845057 -1.4771959
        FiveH         TwH         TFH
1   2.8943242  14.0845187 -24.1598745
2  11.4873285 -16.7440475  -3.0061184
3  -9.3596274  12.9682227 -10.5283457
4   6.9023207   3.5000423  -2.3859302
5  -4.9941281  -9.4534931  29.8020292
6  11.1243621 -15.3121153   2.8513238
7   8.9064936  11.0958158   8.4518701
8  -2.1942594   2.4209497  10.0920254
9   0.6900211   6.1636787  -7.2906766
10  1.6557799  12.1736208 -23.5843019
11  0.1055822  21.2717575  -1.6195087
12 14.9097946   2.9622971   7.5677213
13  2.6491707  -1.5712229  25.3623998
14 -1.5651249  18.2830143  -0.1114738
15  5.1899712  -4.9295740  -1.0508202
16  3.0084580  -7.5757124  37.3038137
17  1.6504153  -1.3029645 -10.4742671
18  1.5375506  28.4568276  13.4800480
19  4.2445164  -4.3249580  -6.6789396
20 -3.3217784   8.1351985  13.3007136
21 -3.8120966  -7.7868314 -25.9052331
22 10.2426087  -7.7403476  -5.3749901
23 -8.3104801   0.6707665  -0.5958311
24  2.0637486  17.6311371  25.1491476
25 -3.4376417  -0.6914734  -4.3913991
26  3.3526975  12.4287563  10.9579408

 [1] &amp;quot;Aminoacyl-tRNA biosynthesis&amp;quot;
 [2] &amp;quot;Carbon fixation in photosynthetic organisms&amp;quot;
 [3] &amp;quot;Cell cycle - yeast&amp;quot;
 [4] &amp;quot;Cyanoamino acid metabolism&amp;quot;
 [5] &amp;quot;Cysteine and methionine metabolism&amp;quot;
 [6] &amp;quot;D-Glutamine and D-glutamate metabolism&amp;quot;
 [7] &amp;quot;GABAergic synapse&amp;quot;
 [8] &amp;quot;Glucosinolate biosynthesis&amp;quot;
 [9] &amp;quot;HIF-1 signaling pathway&amp;quot;
[10] &amp;quot;Histidine metabolism&amp;quot;
[11] &amp;quot;Insulin secretion&amp;quot;
[12] &amp;quot;Mineral absorption&amp;quot;
[13] &amp;quot;Morphine addiction&amp;quot;
[14] &amp;quot;Nicotine addiction&amp;quot;
[15] &amp;quot;Novobiocin biosynthesis&amp;quot;
[16] &amp;quot;Pentose phosphate pathway&amp;quot;
[17] &amp;quot;Peptidoglycan biosynthesis&amp;quot;
[18] &amp;quot;Phenylpropanoid biosynthesis&amp;quot;
[19] &amp;quot;Photosynthesis&amp;quot;
[20] &amp;quot;Protein digestion and absorption&amp;quot;
[21] &amp;quot;Pyrimidine metabolism&amp;quot;
[22] &amp;quot;Retrograde endocannabinoid signaling&amp;quot;
[23] &amp;quot;Synaptic vesicle cycle&amp;quot;
[24] &amp;quot;Synthesis and degradation of ketone bodies&amp;quot;
[25] &amp;quot;Taurine and hypotaurine metabolism&amp;quot;
[26] &amp;quot;Type II diabetes mellitus&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pathwaynameのlevelsを変更する．KEGG orthologyに合わせた配置にするためである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;data.df1$Pathwayname &amp;lt;- factor(data.df1$Pathwayname,
                               levels = c(&amp;quot;Aminoacyl-tRNA biosynthesis&amp;quot;, &amp;quot;Nicotine addiction&amp;quot;, &amp;quot;Morphine addiction&amp;quot;, &amp;quot;HIF-1 signaling pathway&amp;quot;, &amp;quot;Pyrimidine metabolism&amp;quot;, &amp;quot;Synaptic vesicle cycle&amp;quot;, &amp;quot;Retrograde endocannabinoid signaling&amp;quot;, &amp;quot;GABAergic synapse&amp;quot;, &amp;quot;Taurine and hypotaurine metabolism&amp;quot;, &amp;quot;D-Glutamine and D-glutamate metabolism&amp;quot;, &amp;quot;Cyanoamino acid metabolism&amp;quot;, &amp;quot;Synthesis and degradation of ketone bodies&amp;quot;, &amp;quot;Peptidoglycan biosynthesis&amp;quot;, &amp;quot;Photosynthesis&amp;quot;, &amp;quot;Carbon fixation in photosynthetic organisms&amp;quot;, &amp;quot;Insulin secretion&amp;quot;, &amp;quot;Type II diabetes mellitus&amp;quot;, &amp;quot;Protein digestion and absorption&amp;quot;, &amp;quot;Mineral absorption&amp;quot;, &amp;quot;Cell cycle - yeast&amp;quot;, &amp;quot;Pentose phosphate pathway&amp;quot;, &amp;quot;Phenylpropanoid biosynthesis&amp;quot;, &amp;quot;Novobiocin biosynthesis&amp;quot;, &amp;quot;Glucosinolate biosynthesis&amp;quot;, &amp;quot;Histidine metabolism&amp;quot;, &amp;quot;Cysteine and methionine metabolism&amp;quot;),
                               labels = c(&amp;quot;Aminoacyl-tRNA biosynthesis&amp;quot;, &amp;quot;Nicotine addiction&amp;quot;, &amp;quot;Morphine addiction&amp;quot;, &amp;quot;HIF-1 signaling pathway&amp;quot;, &amp;quot;Pyrimidine metabolism&amp;quot;, &amp;quot;Synaptic vesicle cycle&amp;quot;, &amp;quot;Retrograde endocannabinoid signaling&amp;quot;, &amp;quot;GABAergic synapse&amp;quot;, &amp;quot;Taurine and hypotaurine metabolism&amp;quot;, &amp;quot;D-Glutamine and D-glutamate metabolism&amp;quot;, &amp;quot;Cyanoamino acid metabolism&amp;quot;, &amp;quot;Synthesis and degradation of ketone bodies&amp;quot;, &amp;quot;Peptidoglycan biosynthesis&amp;quot;, &amp;quot;Photosynthesis&amp;quot;, &amp;quot;Carbon fixation in photosynthetic organisms&amp;quot;, &amp;quot;Insulin secretion&amp;quot;, &amp;quot;Type II diabetes mellitus&amp;quot;, &amp;quot;Protein digestion and absorption&amp;quot;, &amp;quot;Mineral absorption&amp;quot;, &amp;quot;Cell cycle - yeast&amp;quot;, &amp;quot;Pentose phosphate pathway&amp;quot;, &amp;quot;Phenylpropanoid biosynthesis&amp;quot;, &amp;quot;Novobiocin biosynthesis&amp;quot;, &amp;quot;Glucosinolate biosynthesis&amp;quot;, &amp;quot;Histidine metabolism&amp;quot;, &amp;quot;Cysteine and methionine metabolism&amp;quot;))
levels(data.df1$Pathwayname)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;
 [1] &amp;quot;Aminoacyl-tRNA biosynthesis&amp;quot;
 [2] &amp;quot;Nicotine addiction&amp;quot;
 [3] &amp;quot;Morphine addiction&amp;quot;
 [4] &amp;quot;HIF-1 signaling pathway&amp;quot;
 [5] &amp;quot;Pyrimidine metabolism&amp;quot;
 [6] &amp;quot;Synaptic vesicle cycle&amp;quot;
 [7] &amp;quot;Retrograde endocannabinoid signaling&amp;quot;
 [8] &amp;quot;GABAergic synapse&amp;quot;
 [9] &amp;quot;Taurine and hypotaurine metabolism&amp;quot;
[10] &amp;quot;D-Glutamine and D-glutamate metabolism&amp;quot;
[11] &amp;quot;Cyanoamino acid metabolism&amp;quot;
[12] &amp;quot;Synthesis and degradation of ketone bodies&amp;quot;
[13] &amp;quot;Peptidoglycan biosynthesis&amp;quot;
[14] &amp;quot;Photosynthesis&amp;quot;
[15] &amp;quot;Carbon fixation in photosynthetic organisms&amp;quot;
[16] &amp;quot;Insulin secretion&amp;quot;
[17] &amp;quot;Type II diabetes mellitus&amp;quot;
[18] &amp;quot;Protein digestion and absorption&amp;quot;
[19] &amp;quot;Mineral absorption&amp;quot;
[20] &amp;quot;Cell cycle - yeast&amp;quot;
[21] &amp;quot;Pentose phosphate pathway&amp;quot;
[22] &amp;quot;Phenylpropanoid biosynthesis&amp;quot;
[23] &amp;quot;Novobiocin biosynthesis&amp;quot;
[24] &amp;quot;Glucosinolate biosynthesis&amp;quot;
[25] &amp;quot;Histidine metabolism&amp;quot;
[26] &amp;quot;Cysteine and methionine metabolism&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;データの整形を行う．reshapeのmeltでlong formatのデータにする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(reshape)
data_melt.df1 &amp;lt;- melt(data.df1)
head(data_melt.df1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;
Using Pathwayname as id variables

                         Pathwayname variable        value
1 Cysteine and methionine metabolism        C -0.050219235
2               Histidine metabolism        C  0.013153117
3         Glucosinolate biosynthesis        C -0.007891709
4            Novobiocin biosynthesis        C  0.088678481
5       Phenylpropanoid biosynthesis        C  0.011697127
6          Pentose phosphate pathway        C  0.031863009
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで解析用のデータが出来上がった．&lt;/p&gt;

&lt;h2 id=&#34;plot-vertical-line-graph&#34;&gt;Plot vertical line graph&lt;/h2&gt;

&lt;p&gt;いきなり，Pathwaynameをy軸に設定すると全てのポイントが連結されたグラフになってしまうので，まず，Pathwaynameをｘ軸に設定して折れ線グラフを描く．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(ggplot2)
LinePlot_H &amp;lt;- ggplot(data_melt.df1, aes(x = Pathwayname, y = value, group = variable)) +
  theme_bw()
LinePlot_H + geom_line(aes(colour = variable))
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/horizontal_lineplot.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/horizontal_lineplot.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;flip-the-plot-so-that-horizontal-becomes-vertical-with-coord-flip&#34;&gt;Flip the plot so that horizontal becomes vertical with coord_flip&lt;/h2&gt;

&lt;p&gt;勿論，これではダメなので，coord_flipでｘ軸とｙ軸をひっくり返す．また，色もかえる．さらに，x軸とy軸のタイトルを除き，凡例を中に入れて，そのタイトルを除く．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;LinePlot_V &amp;lt;- ggplot(data_melt.df1, aes(x = Pathwayname, y = value, group = variable)) +
  theme_bw()
P1 &amp;lt;- LinePlot_V +
  geom_line(aes(colour = variable)) +
  scale_color_manual(values = c(&amp;quot;black&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;)) +
  xlab(&amp;quot;&amp;quot;) +
  ylab(&amp;quot;&amp;quot;) +
  coord_flip()

P1 + theme(legend.position = c(0.9, 0.7)) + theme(legend.title = element_blank())
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/vertical_lineplot.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/vertical_lineplot.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;add-annotation-box-by-geom-rect&#34;&gt;Add annotation box by geom_rect&lt;/h2&gt;

&lt;p&gt;とりあえずは，それなりの縦向き折れ線グラフが出来上がった．このグラフに注釈ボックスをつけてみる．試行錯誤の結果，ggplot2の場合，geom_rectを使用すれば良いことがわかった．&lt;/p&gt;

&lt;h3 id=&#34;references-1&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/24536651/what-is-a-good-way-to-fit-text-inside-a-plotting-area-with-ggplot2-using-a-pre-d&#34; target=&#34;_blank&#34;&gt;What is a good way to fit text inside a plotting area with ggplot2 using a pre-defined width for the text?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sape.inf.usi.ch/quick-reference/ggplot2/geom%5Frect&#34; target=&#34;_blank&#34;&gt;ggplot2 Quick Reference: geom_rect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/26741703/adding-multiple-shadows-rectangles-to-ggplot2-graph&#34; target=&#34;_blank&#34;&gt;Adding multiple shadows/rectangles to ggplot2 graph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まず，注釈ボックスとするrectangle用のデータを用意する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;rect1 &amp;lt;- data.frame (xmin=24.55, xmax=26.75, ymin=40, ymax=90, text = data_melt.df1[1,1])
rect2 &amp;lt;- data.frame (xmin=21.55, xmax=24.45, ymin=40, ymax=90, text = data_melt.df1[2,1])
rect3 &amp;lt;- data.frame (xmin=20.55, xmax=21.45, ymin=40, ymax=90, text = data_melt.df1[3,1])
rect4 &amp;lt;- data.frame (xmin=19.55, xmax=20.45, ymin=40, ymax=90, text = data_melt.df1[4,1])
rect5 &amp;lt;- data.frame (xmin=17.55, xmax=19.45, ymin=40, ymax=90, text = data_melt.df1[5,1])
rect6 &amp;lt;- data.frame (xmin=16.55, xmax=17.45, ymin=40, ymax=90, text = data_melt.df1[6,1])
rect7 &amp;lt;- data.frame (xmin=15.55, xmax=16.45, ymin=40, ymax=90, text = data_melt.df1[7,1])
rect8 &amp;lt;- data.frame (xmin=13.55, xmax=15.45, ymin=40, ymax=90, text = data_melt.df1[8,1])
rect9 &amp;lt;- data.frame (xmin=12.55, xmax=13.45, ymin=40, ymax=90, text = data_melt.df1[9,1])
rect10 &amp;lt;- data.frame (xmin=11.55, xmax=12.45, ymin=40, ymax=90, text = data_melt.df1[10,1])
rect11 &amp;lt;- data.frame (xmin=8.55, xmax=11.45, ymin=40, ymax=90, text = data_melt.df1[11,1])
rect12 &amp;lt;- data.frame (xmin=5.55, xmax=8.45, ymin=40, ymax=90, text = data_melt.df1[12,1])
rect13 &amp;lt;- data.frame (xmin=4.55, xmax=5.45, ymin=40, ymax=90, text = data_melt.df1[13,1])
rect14 &amp;lt;- data.frame (xmin=3.55, xmax=4.45, ymin=40, ymax=90, text = data_melt.df1[14,1])
rect15 &amp;lt;- data.frame (xmin=1.55, xmax=3.45, ymin=40, ymax=90, text = data_melt.df1[15,1])
rect16 &amp;lt;- data.frame (xmin=0, xmax=1.45, ymin=40, ymax=90, text = data_melt.df1[16,1])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-right-margin-with-expand-c--0-0&#34;&gt;Remove right margin with expand=c(0,0)&lt;/h3&gt;

&lt;p&gt;ボックスの右端を90にしたので，グラフがはみ出さないように，scale_y_continuousを用いて，expand=c(0,0)で余白を省き，limitsで軸の範囲を指定する．凡例の位置も変え，背景を透明にして，フォントサイズも小さくする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;P2 &amp;lt;- P1 + theme(legend.position = c(0.0825, 0.43)) +
  theme(legend.title = element_blank(),
        legend.text =  element_text(size = 6),
        legend.background = element_blank())       # legendの背景を透明にする
P2

P3 &amp;lt;- P2 +
  geom_rect(data=rect1, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect2, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect3, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect4, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect5, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect6, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect7, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect8, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect9, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect10, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect11, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect12, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect13, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect14, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect15, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE) +
  geom_rect(data=rect16, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill=&amp;quot;grey90&amp;quot;, alpha=1, color=&amp;quot;black&amp;quot;, lwd = 0.25, inherit.aes = FALSE)

P3 + scale_y_continuous(expand=c(0,0), limits = c(-30, 90))
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/vertical_lineplot2.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/vertical_lineplot2.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h3 id=&#34;customize-tick-marks-with-limits-and-breaks-of-scale-y-continuous&#34;&gt;customize tick marks with limits and breaks of scale_y_continuous&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels&#34; target=&#34;_blank&#34;&gt;ggplot2 axis ticks : A guide to customize tick marks and labels&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ticksを指定する．範囲も指定する．scale_y_continuousのlimitsとbreaksは別々に書くとお互いを上書きするので，同じ () の中で書くようにすると両方ともが効くようになる．&lt;br /&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/38313204/r-ggplot2-scale-y-continuous-combining-breaks-limits/38313454#38313454&#34; target=&#34;_blank&#34;&gt;R ggplot2 scale_y_continuous : Combining breaks &amp;amp; limits&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;P4 &amp;lt;- P3 +
  scale_y_continuous(expand=c(0,0), limits = c(-30, 90), breaks=c(-20, 0, 20, 40))
P4
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/vertical_lineplot3.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/vertical_lineplot3.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これで空白の注釈用ボックスができた．&lt;/p&gt;

&lt;h3 id=&#34;add-kegg-orthology--ko&#34;&gt;Add KEGG orthology (KO)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://sape.inf.usi.ch/quick-reference/ggplot2/geom%5Frect&#34; target=&#34;_blank&#34;&gt;ggplot2 Quick Reference: geom_rect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記サイトを参考にして，空白のボックスに該当するKOを記入する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;P4 +
  geom_text(data = rect1, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Amino acid metabolism&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect2, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Biosynthesis of \n other secondary metabolites&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect3, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Carbohydrate metabolism&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect4, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Cell growth and death&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect5, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Digestive system&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect6, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Endocrine and metabolic disease&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect7, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Endocrine system&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect8, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Energy metabolism&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect9, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Glycan biosynthesis and metabolism&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect10, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Lipid metabolism&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect11, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Metabolism of other amino acids&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect12, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Nervous system&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect13, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Nucleotide metabolism&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect14, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Signal transduction&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect15, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Substance dependence&amp;quot;), inherit.aes = FALSE, size = 2.4) +
  geom_text(data = rect16, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= &amp;quot;Translation&amp;quot;), inherit.aes = FALSE, size = 2.4)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/vertical_lineplot4.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/vertical_lineplot4.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ようやく完成である．この方法は他のタイプのグラフにも使えると思う．もっと簡単な方法があれば良いのだが．．．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gleanings (display-line-numbers, whitespace-mode, accessibility of iTerm2, etc)</title>
      <link>/post/gleanings/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0900</pubDate>
      <guid>/post/gleanings/</guid>
      <description>&lt;p&gt;前回久しぶりに記事を投稿したが，しばらく更新していない間に，いくつか細かな環境修正が必要であったので，落ち穂拾いとしてまとめておく．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#display-line-numbers&#34;&gt;display-line-numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whitespace-mode&#34;&gt;Whitespace-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterm2の権限の変更-mojaveで必要&#34;&gt;iTerm2の権限の変更（mojaveで必要）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterm2のcolor-schemeが効かない&#34;&gt;iTerm2のColor Schemeが効かない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;display-line-numbers&#34;&gt;display-line-numbers&lt;/h2&gt;

&lt;p&gt;emacs 26から入った行番号を表示させる機能．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ref 1: &lt;a href=&#34;http://garaemon.hatenadiary.jp/entry/2018/07/08/181003&#34; target=&#34;_blank&#34;&gt;emacs 26で入ったdisplay-line-numbersを利用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 2: &lt;a href=&#34;https://www.emacswiki.org/emacs/LineNumbers&#34; target=&#34;_blank&#34;&gt;LineNumbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 3: &lt;a href=&#34;https://blog.piyo.tech/posts/2019-01-24-emacs-display-line-numbers/&#34; target=&#34;_blank&#34;&gt;Emacs26のdisplay-line-numbers-modeがlinum-modeよりちょっと速くて快適になりそう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 4: &lt;a href=&#34;https://qiita.com/mamo3gr/items/1c6862cba09d5876e52c&#34; target=&#34;_blank&#34;&gt;Emacsの行番号表示にモヤモヤした話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定は，いつものように，init.orgに下記のとおりに書き込めばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(global-display-line-numbers-mode)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでもう行番号を表示していても重くならない．表示領域を確保するための設定も不要である．実際の表示状況は下の画像のとおりである．nlinum-modeの設定は削除した．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/display-line-number.jpg&#34; &gt;

&lt;img src=&#34;/img/display-line-number.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;行番号に必要な表示領域は自動的に確保される．3桁，4桁の番号になるに連れて表示領域が広くなるのが上の画像からわかるであろう．また，adaptive-wrapによって折り畳まれている行は行番号が空白になって1行であることがわかるようになっている（383行目）．&lt;/p&gt;

&lt;h2 id=&#34;whitespace-mode&#34;&gt;Whitespace-mode&lt;/h2&gt;

&lt;p&gt;かなり前から，Emacsの長い行の途中でフォントの色が赤くなってしまうようになった．つまり，下の画像のようになってしまう．短い行でもフォントが赤くなってるな．．．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-2a.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-2a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;何が原因かよくわからなかったのだが，redditの&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/butal1/how%5Fdo%5Fi%5Fstop%5Femacs%5Ffrom%5Fcoloring%5Ftext%5Fbeyond%5F80/&#34; target=&#34;_blank&#34;&gt;How do I stop Emacs from coloring text beyond 80 columns differently&lt;/a&gt;を読んで，もしかしたら，whitespace-modeのせいかもしれないと思ってやってみたらドンピシャであった．M-x customizeとして，Whitespace Styleをサーチして，(Face) Lines, only overlong partのチェックを外せばよい．下の画像の矢印で示した部分である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/whitespace.jpg&#34; &gt;

&lt;img src=&#34;/img/whitespace.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;下に，設定変更後の上の画像と同じところを示すが，行の途中でフォントの色が変わらなくなっている．これで目がおかしくなりそうな画面からようやく離れることができた．😀&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-3.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;iterm2の権限の変更-mojaveで必要&#34;&gt;iTerm2の権限の変更（mojaveで必要）&lt;/h2&gt;

&lt;p&gt;以前の記事（&lt;a href=&#34;../auto_html_export&#34;&gt;Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする&lt;/a&gt;）の中で，directoryの内容が変更されると，自動でhtmlを再読込するwatch_safari.rbというスクリプトを紹介した．しかし，mojaveにupgradeしたあとは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;85:141: execution error: System Eventsでエラーが起きました: osascriptにはキー操作の送信は許可されません。 (1002)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というエラーを吐いて，自動更新しなくなってしまった．調べてみると，mojaveでユーザーのデータや個人情報を保護するための機能が強化された結果であった．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ref 1: &lt;a href=&#34;https://minatokobe.com/wp/os-x/macos-mojave/post-51360.html&#34; target=&#34;_blank&#34;&gt;macOS Mojaveでのアプリケーションの権限、アクセシビリティとフルディスクアクセスの違いは何か？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 2: &lt;a href=&#34;https://www.softantenna.com/wp/tips/macos-mojave-iterm2-full-disk-access/&#34; target=&#34;_blank&#34;&gt;macOS MojaveでiTerm2を利用する場合にフルディスクアクセスを許可する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 3: &lt;a href=&#34;https://rcmdnk.com/blog/2019/04/29/computer-mac/&#34; target=&#34;_blank&#34;&gt;MacのターミナルやiTermでOperation not permittedが出る場合の対処法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 4: &lt;a href=&#34;https://gitlab.com/gnachman/iterm2/wikis/Whyfulldiskaccess&#34; target=&#34;_blank&#34;&gt;Why Full Disk Access is Useful for iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AccessibilityとFull Disk Accessのいずれか，あるいは，両方を変更すればよい．試してみた結果，iTerm2にFull Disk Accessを許可しても自動更新しないが，Accessiblityで「アプリケーションにコンピュータの制御を許可」すれば自動更新することがわかった．「システム環境設定」&amp;gt;「セキュリティ＆プライバシー」の「プライバシー」タブに行き，下の画像にあるように，iTerm2にcheckを入れればよい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Privacy.jpg&#34; &gt;

&lt;img src=&#34;/img/Privacy.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;crontabが働き，~/Library/Safari folderへのアクセスができるように，iTerm2にFull Disk Accessも与えておいた．方法は，上記とほぼ同じで，「プライバシー」タブに行き，フルディスクアクセスを選択し，iTerm2にcheckを入れればよい．&lt;/p&gt;

&lt;h2 id=&#34;iterm2のcolor-schemeが効かない&#34;&gt;iTerm2のColor Schemeが効かない&lt;/h2&gt;

&lt;p&gt;いつのまにかiTerm2のcolor schemeを変えても反映されなくなってしまった．ネットを探ると，同じようなことで悩んでいる人が結構いるようで，すぐに解決法が見つかった．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ref: &lt;a href=&#34;https://gitlab.com/gnachman/iterm2/issues/4844&#34; target=&#34;_blank&#34;&gt;Profile colors won&amp;rsquo;t change&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のサイトによれば，terminal windowがprofileと連絡を失ってしまったことが原因とのことで，iTerm2の Session &amp;gt; Edit Sessionで下の画像のようにdialogue boxがpop upするので，そこで，好きなcolor scheme (下の画像ではJapanesque) を選択し，右下のUse Selected Profileをクリックすればよい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/iTerm2.jpg&#34; &gt;

&lt;img src=&#34;/img/iTerm2.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これでリンクが再確立される．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deadgrep</title>
      <link>/post/deadgrep/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0900</pubDate>
      <guid>/post/deadgrep/</guid>
      <description>

&lt;p&gt;次世代grepで最速と言われる&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34; target=&#34;_blank&#34;&gt;ripgrep&lt;/a&gt;をバックエンドとするEmacs用検索ツールであるdeadgrepをインストールしてみた．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ref&#34;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use&#34;&gt;How to use&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2019年6月2日追記&#34;&gt;2019年6月2日追記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Wilfred/deadgrep&#34; target=&#34;_blank&#34;&gt;deadgrep: use ripgrep from Emacs&lt;/a&gt; ご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://solist.work/blog/posts/deadgrep/&#34; target=&#34;_blank&#34;&gt;複雑になった時使うツール&lt;/a&gt; とても勉強になるサイト，こちらを読めば本サイトは読まなくても良いような．．．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;まず，バックエンドのripgrepをインストールする．brewを使えば簡単である．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついで，以下のようにinit.orgに書き込んでMRLPAからdeadgrep.elをインストールする．f5にキーバインドしておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package deadgrep
  :ensure t
  :config
  (global-set-key (kbd &amp;quot;&amp;lt;f5&amp;gt;&amp;quot;) #&#39;deadgrep)
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-use&#34;&gt;How to use&lt;/h2&gt;

&lt;p&gt;使用方法の詳細はご本家に書いてあるが，f5を叩いて，検索キーワードを入れるだけである．下の画像は，このブログのあるdirectoryで，「検索」をキーワードとしてdeadgrepを走らせたところである．defaultでdirectory内を再帰的に検索する．キーワードは青くハイライトされており，左端の数字はその文書での行番号である． &lt;strong&gt;o&lt;/strong&gt; を叩くと下のバッファに該当箇所にカーソルがある状態でその文書が開く． &lt;strong&gt;C-c C-k&lt;/strong&gt; で検索を止めることができる．また，swiperとの併用も可能である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/deadgrep.jpg&#34; &gt;

&lt;img src=&#34;/img/deadgrep.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;一番上のSearch termの行のchangeにカーソルを持っていってReturnすると，Minibufferで検索語を変更できる．その下にあるSearch type, Case, Context, Directory, Filesも同様に条件を変更できる．とくに，Directoryは適切なものを選ばないと巨大なデータを検索することになってしまうので注意が必要である．&lt;/p&gt;

&lt;p&gt;個人的には，swiperでほぼ事足りているのだが，大きなプロジェクト内の複数のファイルを一気に検索する必要がある人には非常に有益なツールだと思う．&lt;/p&gt;

&lt;h3 id=&#34;2019年6月2日追記&#34;&gt;2019年6月2日追記&lt;/h3&gt;

&lt;p&gt;上記のように自分にはあまり役に立たないようなことを書いたが，早速，deadgrepが役に立ったので追記しておく．hyperestraierで全文検索をしようとして，H@estfxpdftohtml というコマンドを使おうとしたのだが，うまくいかず，その原因を探るために，/usr/local/で，H@estfxpdftohtmlをSearch termとして，deadgrepを下の画像のように走らせてみたところ，下側のバッファにあるように，一発で原因が判明してしまった．要するに，xpdfが必要ということであった．なるほど，こういう風に使うのかと納得した．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/deadgrep2.jpg&#34; &gt;

&lt;img src=&#34;/img/deadgrep2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;なお，全文検索については，いずれ別の機会にまとめてみたい．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to add horizontal scrollbar for codeblock in academic theme of hugo</title>
      <link>/post/horizontal_scrollbar/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0900</pubDate>
      <guid>/post/horizontal_scrollbar/</guid>
      <description>

&lt;p&gt;いやー，めでたい．ついに，TexLive 2019がreleaseされた．それにしても，TeXってこんなに人気があったのだ．世の中がみんなお祝いしてる，凄いぞ，TeX．．．．と思ったら，全然違った．．．これでまた年齢計算が複雑になる．システム担当者は大変である．まぁ，西暦を使用すればいいだけの話ではあるが．．．．．というわけで，今回はTeXの話，ではなくて，ブログのCodeBlockの長い行がwrapされるのは２行と間違うことがあるので，scrollbarをつけましょうという話である．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#wrap-or-scroll&#34;&gt;Wrap or scroll?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-add-horizontal-scrollbar&#34;&gt;How to add horizontal scrollbar&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ref&#34;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#academic-theme-version&#34;&gt;academic theme version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cssの変更&#34;&gt;cssの変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrap-or-scroll&#34;&gt;Wrap or scroll?&lt;/h2&gt;

&lt;p&gt;以前の記事でも触れたように（&lt;a href=&#34;../embedrplotinblog&#34;&gt;How to automatically embed R plot in blog created by Hugo via ox-hugo&lt;/a&gt;），このサイトは，ox-hugoというorg-modeのパッケージで書いて，Hugoという静的サイトジェネレーター（themeはacademic）で作っているのだが，code blockの長い行がwrapされて，つまり，折り畳まれて表示されるようになっていた．Rのcodeで示してみると，こんな感じである．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/wrap.jpg&#34; &gt;

&lt;img src=&#34;/img/wrap.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これは３行のcodeであるが，はっきり言って見にくい．．．．．　&lt;/p&gt;

&lt;p&gt;行番号を入れるという方法もあるが，それよりもscrollbarをつけて横にスライドさせる方が分かりやすい．つまり，こうである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;boxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = &amp;quot;&amp;quot;, main = &amp;quot;Drug1&amp;quot;, xaxt=&amp;quot;n&amp;quot;, cex.axis=1.5, ylab=&amp;quot;Relative value&amp;quot;, cex.lab = 1.5, pch=16, cex = 1.5)
axis(1,at=c(1,2,3),formatC(c(&amp;quot;Control&amp;quot;, &amp;quot;Day1&amp;quot;, &amp;quot;Day7&amp;quot;)), cex.axis=1.5)
beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c(&amp;quot;black&amp;quot;, &amp;quot;green&amp;quot;,&amp;quot;blue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これなら，確実に１行を把握できる．&lt;/p&gt;

&lt;p&gt;ここ（&lt;a href=&#34;http://seankross.com/notes/css-for-code/&#34; target=&#34;_blank&#34;&gt;Fix How Your Blog’s Code is Displayed on Mobile&lt;/a&gt;）を見るともっと分かりやすく書いてある．&lt;/p&gt;

&lt;h2 id=&#34;how-to-add-horizontal-scrollbar&#34;&gt;How to add horizontal scrollbar&lt;/h2&gt;

&lt;h3 id=&#34;ref&#34;&gt;Ref&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://seankross.com/notes/css-for-code/&#34; target=&#34;_blank&#34;&gt;Fix How Your Blog’s Code is Displayed on Mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues/467&#34; target=&#34;_blank&#34;&gt;Prevent wrapping in code blocks #467&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ShanEllis/ShanEllis.github.io/pull/1/commits/35c0f3064d3ec2d7b6e35790448994bdb1233f79&#34; target=&#34;_blank&#34;&gt;added horizontal scrolling for code #1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のサイトを参考に以下のようにscrollbarをセットアップすることにした．&lt;/p&gt;

&lt;h3 id=&#34;academic-theme-version&#34;&gt;academic theme version&lt;/h3&gt;

&lt;p&gt;まず，Hugoのthemeであるacademic のversionを以下のように調べてみると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;less themes/academic/data/academic.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# Academic

version = &amp;quot;2.4.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ふ，古い．latest versionは，4.2である．2018年8月に導入してから8ヶ月ほどで2.4から4.2までreleaseされており，開発スピードが並ではない．それは喜ぶべきことなのだが，問題は，私が全くそれについて行けてないことである．（ToT)&lt;/p&gt;

&lt;p&gt;最新版ではdirectory構造もかなり変わっている．horizontal scrollbarをつけるのを機会に全部をupgradeしようとしてみたが，なかなかうまくいかない．&lt;a href=&#34;https://sourcethemes.com/academic/docs/customization/#customize-style-css&#34; target=&#34;_blank&#34;&gt;Customize style (CSS)&lt;/a&gt; に書いてあるとおりにしようとしても，古いversionでは相当するdirectoryそのものが存在しない．&lt;/p&gt;

&lt;h3 id=&#34;cssの変更&#34;&gt;cssの変更&lt;/h3&gt;

&lt;p&gt;というわけで，academic themeのupgradeはサクッと諦めて姑息策を取ることにした． &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues/467&#34; target=&#34;_blank&#34;&gt;Prevent wrapping in code blocks #467&lt;/a&gt; を参考にして，&lt;br /&gt;
&lt;strong&gt;/Data/hogeblog/fugablog/themes/academic/layouts/partials/css/academic.css&lt;/strong&gt;
を &lt;br /&gt;
&lt;strong&gt;/Data/hogeblog/fugablog/static/css/academic_scrollbar.css&lt;/strong&gt;  &lt;br /&gt;
として保存した．変更箇所は以下の通り&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--- /Data/hogeblog/fugablog/themes/academic/layouts/partials/css/academic.css	2018-08-16 00:55:10.000000000 +0900
+++ /Data/hogeblog/fugablog/static/css/academic_scrollbar.css	2019-05-02 00:05:10.000000000 +0900
@@ -178,9 +178,16 @@
border-color: rgb(248, 248, 248);
 }

+/* pre code { */
+/*   white-space: pre; /\* Override Bootstrap to preserve line breaks in code. *\/ */
+/*   overflow-x: auto; */
+/* } */
+
+/* See http://seankross.com/notes/css-for-code/  */
 pre code {
-  white-space: pre; /* Override Bootstrap to preserve line breaks in code. */
-  overflow-x: auto;
+    overflow: auto;
+    word-wrap: normal;
+    white-space: pre;
 }

 hr {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで，ox-hugoでの&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/wrap2.jpg&#34; &gt;

&lt;img src=&#34;/img/wrap2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;は，以下のように表示されるようになる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;boxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = &amp;quot;&amp;quot;, main = &amp;quot;Drug1&amp;quot;, xaxt=&amp;quot;n&amp;quot;, cex.axis=1.5, ylab=&amp;quot;Relative value&amp;quot;, cex.lab = 1.5, pch=16, cex = 1.5)
axis(1,at=c(1,2,3),formatC(c(&amp;quot;Control&amp;quot;, &amp;quot;Day1&amp;quot;, &amp;quot;Day7&amp;quot;)), cex.axis=1.5)
beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c(&amp;quot;black&amp;quot;, &amp;quot;green&amp;quot;,&amp;quot;blue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-nをつけて行番号をつけると&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/wrap3.jpg&#34; &gt;

&lt;img src=&#34;/img/wrap3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;こうなる．&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;boxplot(data_melt.df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Drug1 &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; data_melt.df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Day, xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drug1&amp;#34;&lt;/span&gt;, xaxt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;, cex.axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, ylab&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Relative value&amp;#34;&lt;/span&gt;, cex.lab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, pch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;)
axis(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,at&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),&lt;span style=&#34;color:#66d9ef&#34;&gt;formatC&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Control&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day7&amp;#34;&lt;/span&gt;)), cex.axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;)
beeswarm(data_melt.df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Drug1 &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; data_melt.df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Day, pch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, ad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, cex&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
   なんとか，これで，code blockにhorizontal scrollbarをつけることができた．次に時間ができたときにacademic themeをupgradeして追いつこう．．．いつになることやら．．．(^^;;;;;;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew</title>
      <link>/post/mojave/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0900</pubDate>
      <guid>/post/mojave/</guid>
      <description>

&lt;p&gt;世はゴールデンウィークまっただ中である．完全な10連休ではないが，それなりに長い休みとなるので，この機会に，ようやく Sierraから &lt;strong&gt;Mojave&lt;/strong&gt; にupgradeすることにした．ついでにEmacsも26.1から 26.2にupgradeした．今回は，このupgradeの際に遭遇したトラブルについてまとめる．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#upgrade-to-mojave-from-sierra&#34;&gt;Upgrade to Mojave from Sierra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#upgrade-to-xcode-10-dot-2-dot-1&#34;&gt;Upgrade to Xcode 10.2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#upgrade-to-emacs-26-dot-2-from-26-dot-1&#34;&gt;Upgrade to Emacs 26.2 from 26.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#latex&#34;&gt;LaTeX&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#pdfにフォントが埋め込まれているかどうかを確認する方法&#34;&gt;pdfにフォントが埋め込まれているかどうかを確認する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#感想&#34;&gt;感想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-mojave-from-sierra&#34;&gt;Upgrade to Mojave from Sierra&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://support.apple.com/ja-jp/HT201475&#34; target=&#34;_blank&#34;&gt;macOS Mojave にアップグレードする方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結論から言うと，拍子抜けするぐらい簡単であった．AppStoreで適当にクリックするとすぐにMojaveがダウンロードされて，インストーラーが起動した．これをクリックしてインストールを始めると，此処から先は完全自動状態で，ひたすら待った．というか，違うことをしていた．何回も再起動していたようだが，実際には1時間ぐらいで終了したような気がする．手間いらずであった．R, Rstudio, ImageJ, Emacs, LaTeXが動いて画像編集，動画編集ができれば，とりあえず文句はないので，まずそのあたりをチェックしてみると，R, Rstudio, ImageJ, 画像編集，動画編集は問題なく動いた．EmacsとLaTeXについては以下に述べる．&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-xcode-10-dot-2-dot-1&#34;&gt;Upgrade to Xcode 10.2.1&lt;/h2&gt;

&lt;p&gt;早速brewでemacsをupgradeしようとしたのだが，xcodeが古いと叱られたので，まず，xcodeをApp Storeからupgradeした．そして &lt;strong&gt;brew install&lt;/strong&gt; すると以下のようなエラーが出る．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install hogehoge
.........
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは，「&lt;a href=&#34;https://gotohayato.com/content/487&#34; target=&#34;_blank&#34;&gt;macOS を Mojave にあげた後に Homebrew を使うとエラーが出る問題&lt;/a&gt;」にあるようにcommand line developer toolsを再インストールすれば直る．同サイトに詳細が記載されている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さぁ，これでようやくと思って，再度 &lt;strong&gt;brew install&lt;/strong&gt; すると，またもエラーである&amp;hellip;..(ToT)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install hogehoge
..........
Error: parent directory is world writable but not sticky
Please report this bug:
https://docs.brew.sh/Troubleshooting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;調べてみるとpermissionの問題で，tmp directoryの状態を調べれば良いことがわかった．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref 1:&lt;/strong&gt; &lt;a href=&#34;https://qiita.com/analsky/items/20755a3ba10119e9a4b6&#34; target=&#34;_blank&#34;&gt;brew で `Error: parent directory is world writable but not sticky`&lt;/a&gt; &lt;br /&gt;
&lt;strong&gt;Ref 2:&lt;/strong&gt; &lt;a href=&#34;https://stackoverflow.com/questions/42893700/error-parent-directory-is-world-writable-but-not-sticky&#34; target=&#34;_blank&#34;&gt;Error: parent directory is world writable but not sticky&lt;/a&gt; &lt;br /&gt;
上記サイトの記載に従って，ls -ld /tmpを行うと以下のようになる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls -ld /tmp
lrwxr-xr-x@ 1 root  wheel  11  4 27 18:45 /tmp@ -&amp;gt; private/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは，tmp directoryはprivate/tmpを使用しているということであり，以下のようにしてpermissionを付与する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo chmod +t /private/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私の場合はこれでbrewが働くようになった．これらの操作は，今後のmajor upgradeの際にはまた必要になりそうなので，ここにまとめておく．&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-emacs-26-dot-2-from-26-dot-1&#34;&gt;Upgrade to Emacs 26.2 from 26.1&lt;/h2&gt;

&lt;p&gt;ようやくEmacsのupgradeである．mojaveにupgradeした直後にemacs26.1を起動してみるとキーが効かなかったような気がするが，26.2にupgradeするので，気にせず先に進んだ&amp;hellip;..(^^;;;　以前の記事（&lt;a href=&#34;../emacs_install&#34;&gt;Emacsのインストール&lt;/a&gt;）に書いたようにhomebrewでemacs-macを入れればよいのだが，念の為に単なるupgradeは避けて，Emacs 26.1をuninstallし，~/.emac.dも退避させてから，インストールし直すことにした．&lt;a href=&#34;https://github.com/railwaycat/homebrew-emacsmacport&#34; target=&#34;_blank&#34;&gt;Emacs Mac Port&lt;/a&gt;の最終更新はわずか2週間前でありいろいろな問題が解決されていると期待してのupgradeである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd
$ mv .emacs.d .emac.d.old  # change name of old .emacs.d
$ brew tap railwaycat/emacsmacport
$ brew uninstall emacs-mac  # uninstall old emacs-mac
$ brew install emacs-mac --with-modern-icon --with-imagemagick  # install new emacs-mac
$ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで，&lt;br /&gt;
&lt;strong&gt;/usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1 (4,009 files, 114.6MB)&lt;/strong&gt; &lt;br /&gt;
から &lt;br /&gt;
&lt;strong&gt;/usr/local/Cellar/emacs-mac/emacs-26.2-z-mac-7.6 (4,010 files, 114.8MB)&lt;/strong&gt;  &lt;br /&gt;
へのupgradeが終了した．&lt;/p&gt;

&lt;p&gt;あとは，以前に書いた以下の記事に従ってセットアップした．&lt;br /&gt;
&lt;a href=&#34;../prelude_install&#34;&gt;Emacsの設定（その1）Preludeの導入（2018年10月9日修正）&lt;/a&gt; &lt;br /&gt;
&lt;a href=&#34;../init_org&#34;&gt;Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&#34;../japanese_setup&#34;&gt;Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;latex&#34;&gt;LaTeX&lt;/h2&gt;

&lt;p&gt;これについては，以前の記事「&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）&lt;/a&gt;」で書いたとおり &lt;strong&gt;MacTeX 2018&lt;/strong&gt; のままである．正確に言うと，mojaveにupgradeする直前に以下のようにして最新版にアップデートしておいた．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;400個ぐらいのパッケージのアップデートに30-40分を要した．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ヒラギノフォントの埋め込み&lt;/strong&gt; についても上述の記事に書いたように，既に，&lt;a href=&#34;https://github.com/munepi/bibunsho7-patch/releases&#34; target=&#34;_blank&#34;&gt;bibunsho7-patch&lt;/a&gt;を適応済みなので，問題ないと考えた．&lt;/p&gt;

&lt;p&gt;mojaveにupgradeしてから，latexmkによるcompileやorg-modeからのlatex exportなどを試してみたが，pdfの生成に特に問題なく，また，pdfへのヒラギノフォントの埋め込みも問題なくできていた．&lt;/p&gt;

&lt;h3 id=&#34;pdfにフォントが埋め込まれているかどうかを確認する方法&#34;&gt;pdfにフォントが埋め込まれているかどうかを確認する方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ref:&lt;/strong&gt;&lt;a href=&#34;https://qiita.com/Aqua%5Fix/items/d277fb7e4667d6616c1e&#34; target=&#34;_blank&#34;&gt; PDFのフォント埋め込み&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下のようにhomebrewでpopplerをインストールすれば，その中の &lt;strong&gt;pdffonts&lt;/strong&gt; というコマンドを使って確認することができる．このpopplerは以前の記事（&lt;a href=&#34;../pdf-tools&#34;&gt;Emacsでpdfを読む (pdf-tools)&lt;/a&gt;）で既にインストールしているが，もう一度書いておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install poppler
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;たとえば，latexで生成したhogehoge.pdfのフォントの埋め込みを調べるためには，pdffontsを以下のように使う． &lt;strong&gt;emb&lt;/strong&gt; の項目で埋め込みの有無がわかる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pdffonts hogehoge.pdf
name                                 type              encoding         emb sub
------------------------------------ ----------------- ---------------- --- ---
KQKHHV+LMSans10-Bold                 Type 1C           Custom           yes yes
JQHYHW+LMRoman17-Regular             Type 1C           Custom           yes yes
FENZQQ+HiraMinProN-W3-Identity-H     CID Type 0C       Identity-H       yes yes
ZHPQAJ+LMRoman12-Regular             Type 1C           Custom           yes yes
BMLTDB+HiraKakuProN-W6-Identity-H    CID Type 0C       Identity-H       yes yes
NOWECW+LMRoman12-Regular             Type 1C           Custom           yes yes
SIHLPZ+LMRoman8-Regular              Type 1C           Custom           yes yes
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;確かに，すべてのフォントは &lt;strong&gt;emb = yes&lt;/strong&gt; になっており，埋め込まれているのが確認できた．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;ネットでは，いろいろ問題ありとの情報が多く様子見をしていたのだが，待ってる間に色々と解決した部分も多いのか，ほとんど大きなトラブルもなくアップグレードできた．なお， &lt;strong&gt;Time Machine&lt;/strong&gt; によるバックアップも問題なくできている．「案ずるより産むが易し」であった．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法）</title>
      <link>/post/peep/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0900</pubDate>
      <guid>/post/peep/</guid>
      <description>

&lt;p&gt;最近Rネタばかり書いていたが，今回は久しぶりのEmacsネタである．org-modeで文書を書いているときに画像を貼り付けたいことがある．そのためには画像ファイルの名前とパスが必要となる．要するに毎回画像ファイルのパスを調べて/hoge/fuga/hogefuga/hugo.jpgというようなことをタイプしなければならず面倒である．そこで，peep-diredの出番である．peep-diredとは，diredでファイルにカーソルを持っていくと中身が見える，すなわち，画像ファイルなら画像が見え，テキストファイルならテキストが読めるというminor modeである．これが画像リンクの貼り付けに便利なのでまとめておく．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#peep-diredのインストールと設定&#34;&gt;peep-diredのインストールと設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#peep-diredの使い方&#34;&gt;peep-diredの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bjm-ivy-dired-recent-dirs-最近開けたdirectoryを一覧表示する方法-おまけ&#34;&gt;bjm/ivy-dired-recent-dirs -  最近開けたdirectoryを一覧表示する方法（おまけ）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asok/peep-dired&#34; target=&#34;_blank&#34;&gt;peep-dired&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/emacs/quickly-preview-images-and-other-files-with-peep-dired/&#34; target=&#34;_blank&#34;&gt;QUICKLY PREVIEW IMAGES AND OTHER FILES WITH PEEP-DIRED&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;peep-diredのインストールと設定&#34;&gt;peep-diredのインストールと設定&lt;/h2&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書けばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package peep-dired
  :ensure t
  :defer t ; don&#39;t access `dired-mode-map&#39; until `peep-dired&#39; is loaded
  :bind (:map dired-mode-map
              (&amp;quot;P&amp;quot; . peep-dired)))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定は上記参照サイトのパクリで，diredで&amp;rdquo;P&amp;rdquo;を打つとpeep-dired modeとなってdiredのリストの画像ファイルが見られるようになり，もう一度&amp;rdquo;P&amp;rdquo;と打つとpeep-dired modeは終了する．　&lt;/p&gt;

&lt;h2 id=&#34;peep-diredの使い方&#34;&gt;peep-diredの使い方&lt;/h2&gt;

&lt;p&gt;File viewerとしてだけなら，どうということはないのだが，org-modeと組み合わせて使うと便利さが増す．たとえば，下図のように画像をおいているdirectoryをdiredで開いて&amp;rdquo;P&amp;rdquo;を打ってpeep-dired modeに入り，画像を確かめながら文書に挿入する画像を決める．上段のdiredのバッファにおいてIMG_1996.jpgにカーソルがあり，下段のバッファにその画像が表示されている．画像が決まったらその画像ファイルにカーソルが合っていることを確認した上で，C-c lを打つ．これで，画像へのリンクがフルパスも含めてコピーされる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/peep-dired_ex1.jpeg&#34; &gt;

&lt;img src=&#34;/img/peep-dired_ex1.jpeg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ついで，org-mode文書内の画像を挿入したいところにカーソルを持って行き，そこで，C-c C-lとすると，下部に新たなorg-insert-linkのウィンドウが開いて下図のように先程コピーしたリンクが一番上にフルパスでハイライトされて表示される．ここでリターンすればフルパスのリンクがorg-mode文書内に挿入される．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/peep-dired_ex3.jpg&#34; &gt;

&lt;img src=&#34;/img/peep-dired_ex3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;文章で説明すると複雑だが，実際にやってみると実に簡単で有用である．このやり方に気がつくまでは，いちいちフルパスを手入力したり，コピペしたりしていたが，その必要がなくなり非常に楽になった．&lt;/p&gt;

&lt;h2 id=&#34;bjm-ivy-dired-recent-dirs-最近開けたdirectoryを一覧表示する方法-おまけ&#34;&gt;bjm/ivy-dired-recent-dirs -  最近開けたdirectoryを一覧表示する方法（おまけ）&lt;/h2&gt;

&lt;p&gt;diredでdirectoryを開けるときにその名前を入力する必要があるが，これが結構面倒である．特に深いところにあるファイルはフルパスを書くのが大変である．どうせ，同じファイルに何回も行くことが多いので，「最近訪れたdirectoryの履歴」みたいなのが一覧表示されると嬉しい．まさに，こんなのぞみにピッタリのものが，bjm/ivy-dired-recent-dirsである．これについては，以前に書いたのでそちらを参考にしていただきたい．というか，以前に書いた事自体を忘れていたので，自分への戒めとして記録しておく．．．(^^;;;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://taipapamotohus.com/post/swiper%5Fmigemo/#最近開いたディレクトリを開く&#34; target=&#34;_blank&#34;&gt;最近開いたディレクトリを開く&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to add different segment, annotation and color to each facet in ggplot</title>
      <link>/post/different-segment-to-each-facet-in-ggplot/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0900</pubDate>
      <guid>/post/different-segment-to-each-facet-in-ggplot/</guid>
      <description>

&lt;p&gt;今回もRネタである．論文の図を作成していて，ggplot2のfacetを使用して作成した図の中のfacet毎に異なる有意差を示す群を線分で結んで，その上にasteriskを色を変えてつけようとしたところ，結構苦労したので忘れないうちにまとめておく．annotate()というのもあるが，これだとすべてのfacetに同じ内容が入ってしまう．今回の目的であるfacetによって異なる内容の注釈を入れるためには，geom_segmentやgeom_textを使う．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-preparation&#34;&gt;Data Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tukey-multiple-comparison&#34;&gt;Tukey multiple comparison&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tukeyhsd&#34;&gt;TukeyHSD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#テューキーの方法による多重比較&#34;&gt;テューキーの方法による多重比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boxplot-by-ggplot2&#34;&gt;Boxplot by ggplot2&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#calculate-mean-and-se&#34;&gt;Calculate mean and SE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geom-jitter&#34;&gt;geom_jitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geom-point&#34;&gt;geom_point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-mean-bar&#34;&gt;Add mean bar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-segment-and-asterisk-to-drug2-facet-of-boxplot&#34;&gt;Add segment and asterisk to Drug2 facet of boxplot&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dataframe-for-annotation&#34;&gt;Dataframe for annotation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-segment-with-geom-segment-and-asterisk-with-geom-text--black&#34;&gt;Add segment with geom_segment and asterisk with geom_text (black)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-segment-with-geom-segment-and-asterisk-with-geom-text--color&#34;&gt;Add segment with geom_segment and asterisk with geom_text (color)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#barplot-by-ggplot2&#34;&gt;Barplot by ggplot2&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#barplot&#34;&gt;Barplot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-segment-and-asterisk-to-drug2-facet-of-barplot&#34;&gt;Add segment and asterisk to Drug2 facet of barplot&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dataframe-for-annotation&#34;&gt;Dataframe for annotation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-segment-with-geom-segment-and-asterisk-with-geom-text--color&#34;&gt;Add segment with geom_segment and asterisk with geom_text (color)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combine-boxplot-and-barplot-into-the-same-graphic&#34;&gt;Combine boxplot and barplot into the same graphic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mukkujohn.hatenablog.com/entry/2016/09/29/212901&#34; target=&#34;_blank&#34;&gt;ggplot2を使って、注釈を入れる-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://buzzrbeeline.blog/2018/11/06/adding-different-annotation-to-each-facet-in-ggplot/&#34; target=&#34;_blank&#34;&gt;Adding different annotation to each facet in ggplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/24578352/add-a-segment-only-to-one-facet-using-ggplot2&#34; target=&#34;_blank&#34;&gt;Add a segment only to one facet using ggplot2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-preparation&#34;&gt;Data Preparation&lt;/h2&gt;

&lt;p&gt;まず，架空のデータを作成する．Drug1とDrug2を投与して１日後と７日後の物質Xの血中濃度変化を対照，つまり投与前と比較するという実験において，Drug1では差がなく，Drug2では差があるという結果にする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;set.seed(100)
data.df1 &amp;lt;- data.frame(Control = rnorm(20, mean = 5, sd = 1),
                       Day1 = rnorm(20, mean = 5, sd = 1.5),
                       Day7 = rnorm(20, mean = 5, sd = 2))
library(reshape)
data_melt.df1 &amp;lt;- melt(data.df1)

data.df2 &amp;lt;- data.frame(Control = rnorm(20, mean = 5, sd = 1.8),
                       Day1 = rnorm(20, mean = 10, sd = 5),
                       Day7 = rnorm(20, mean = 20, sd = 7))
data_melt.df2 &amp;lt;- melt(data.df2)

data_melt.df &amp;lt;- cbind.data.frame(data_melt.df1, data_melt.df2$value)
colnames(data_melt.df) &amp;lt;- c(&amp;quot;Day&amp;quot;,&amp;quot;Drug1&amp;quot;,&amp;quot;Drug2&amp;quot;) # chage column name of dataframe
head(data_melt.df)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;Using  as id variables
Using  as id variables
      Day    Drug1    Drug2
1 Control 4.497808 4.528408
2 Control 5.131531 4.876081
3 Control 4.921083 4.318010
4 Control 5.886785 9.647526
5 Control 5.116971 5.233701
6 Control 5.318630 3.716555
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで解析用のデータが出来上がった．一応，差を確認してみる．&lt;/p&gt;

&lt;h2 id=&#34;tukey-multiple-comparison&#34;&gt;Tukey multiple comparison&lt;/h2&gt;

&lt;p&gt;Tukeyの多重比較試験を行う．２つの方法で確認しておく．&lt;/p&gt;

&lt;h3 id=&#34;tukeyhsd&#34;&gt;TukeyHSD&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TukeyHSD(aov(data_melt.df$Drug1~data_melt.df$Day))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;  Tukey multiple comparisons of means
    95% family-wise confidence level

Fit: aov(formula = data_melt.df$Drug1 ~ data_melt.df$Day)

$`data_melt.df$Day`
                    diff       lwr      upr     p adj
Day1-Control  0.03086351 -1.274284 1.336011 0.9982163
Day7-Control -0.14426065 -1.449408 1.160887 0.9617765
Day7-Day1    -0.17512416 -1.480272 1.130023 0.9442066
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TukeyHSD(aov(data_melt.df$Drug2~data_melt.df$Day))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;  Tukey multiple comparisons of means
    95% family-wise confidence level

Fit: aov(formula = data_melt.df$Drug2 ~ data_melt.df$Day)

$`data_melt.df$Day`
                  diff       lwr       upr     p adj
Day1-Control  4.874433  1.128239  8.620628 0.0076229
Day7-Control 15.114597 11.368403 18.860791 0.0000000
Day7-Day1    10.240164  6.493970 13.986358 0.0000000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テューキーの方法による多重比較&#34;&gt;&lt;a href=&#34;http://aoki2.si.gunma-u.ac.jp/R/tukey.html&#34; target=&#34;_blank&#34;&gt;テューキーの方法による多重比較&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;source(&amp;quot;http://aoki2.si.gunma-u.ac.jp/R/src/tukey.R&amp;quot;, encoding=&amp;quot;euc-jp&amp;quot;)
tukey(data_melt.df$Drug1, data_melt.df$Day)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;$result1
        n     Mean Variance
Group1 20 5.107867 0.516335
Group2 20 5.138731 1.188671
Group3 20 4.963606 7.119660

$Tukey
             t         p
1:2 0.05690583 0.9982163
1:3 0.26598637 0.9617765
2:3 0.32289220 0.9442066

$phi
[1] 57

$v
[1] 2.941555
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;tukey(data_melt.df$Drug2, data_melt.df$Day)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;$result1
        n      Mean Variance
Group1 20  4.811422  4.07251
Group2 20  9.685855 32.74563
Group3 20 19.926019 35.88609

$Tukey
           t            p
1:2 3.131158 7.622857e-03
1:3 9.709065 1.156397e-11
2:3 6.577907 4.783876e-08

$phi
[1] 57

$v
[1] 24.23474
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で，Drug1では物質Xの濃度はコントロールと差がないこと，Drug2ではコントロール，Day1，Day7の間に有意差が認められることが確認された．そのようにデータを作ったので当たり前である．．．(^^;;;;;&lt;/p&gt;

&lt;h2 id=&#34;boxplot-by-ggplot2&#34;&gt;Boxplot by ggplot2&lt;/h2&gt;

&lt;p&gt;ようやくここから上記のデータを使って，ggplot2でboxplotを描いてみる．まずはmeltを用いてwide formatからlong formatへのデータの整形を行う．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;DataM &amp;lt;- melt(data_melt.df, id = &amp;quot;Day&amp;quot;)
head(DataM)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;      Day variable    value
1 Control    Drug1 4.497808
2 Control    Drug1 5.131531
3 Control    Drug1 4.921083
4 Control    Drug1 5.886785
5 Control    Drug1 5.116971
6 Control    Drug1 5.318630
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;calculate-mean-and-se&#34;&gt;Calculate mean and SE&lt;/h3&gt;

&lt;p&gt;平均とSEも求めておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(plyr)
DataM_summary &amp;lt;- ddply(DataM, .(variable, Day), summarise, N = length(value), mean = mean(value), sd = sd(value), se = sd(value)/sqrt(length(value)))
DataM_summary
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;  variable     Day  N      mean        sd        se
1    Drug1 Control 20  5.107867 0.7185645 0.1606759
2    Drug1    Day1 20  5.138731 1.0902617 0.2437899
3    Drug1    Day7 20  4.963606 2.6682692 0.5966431
4    Drug2 Control 20  4.811422 2.0180460 0.4512488
5    Drug2    Day1 20  9.685855 5.7223794 1.2795629
6    Drug2    Day7 20 19.926019 5.9904997 1.3395165
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついで，ggplot2のggplotでboxplotを描く．個々のデータをgeom_jitter，あるいは，geom_pointを用いて重ねてプロットしておく．どちらの方法でも下記のように同じ図になる．&lt;/p&gt;

&lt;h3 id=&#34;geom-jitter&#34;&gt;geom_jitter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(ggplot2)
TestBoxPlot &amp;lt;- ggplot(DataM, aes(x = Day, y = value, colour = Day, fill = Day)) +
    geom_boxplot(alpha = 0.40) +
    facet_wrap(~variable, ncol = 3, scales=&amp;quot;fixed&amp;quot;) +
    coord_cartesian(ylim = c(0,38)) +
    theme_bw() +
    theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
    theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
    xlab(&amp;quot;&amp;quot;) +
    ylab(&amp;quot;Relative value to control&amp;quot;) +
    theme(legend.position = &amp;quot;none&amp;quot;) +   # delete legend
    geom_jitter(shape=16, size=2, position=position_jitter(0.1))  # plot individual point with jittering

TestBoxPlot
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Boxplot1.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Boxplot1.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h3 id=&#34;geom-point&#34;&gt;geom_point&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TestBoxPlot2 &amp;lt;- ggplot(DataM, aes(x = Day, y = value, colour = Day, fill = Day)) +
    geom_boxplot(alpha = 0.40) +
    facet_wrap(~variable, ncol = 3, scales=&amp;quot;fixed&amp;quot;) +
    coord_cartesian(ylim = c(0,38)) +
    theme_bw() +
    theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
    theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
    xlab(&amp;quot;&amp;quot;) +
    ylab(&amp;quot;Relative value to control&amp;quot;) +
    theme(legend.position = &amp;quot;none&amp;quot;) +   # delete legend
    geom_point(aes(fill = Day), size = 2, shape = 16, position = position_jitterdodge())  # plot individual point with jittering

TestBoxPlot2
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Boxplot2.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Boxplot2.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h3 id=&#34;add-mean-bar&#34;&gt;Add mean bar&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://stackoverflow.com/questions/45617136/combine-ggplot-facet-wrap-with-geom-segment-to-draw-mean-line-in-scatterplot&#34; target=&#34;_blank&#34;&gt;combine ggplot facet_wrap with geom_segment to draw mean line in scatterplot&lt;/a&gt;   &lt;br /&gt;
平均値のバーを書き込む．これはgeom_segmentを使うが，すべてのfacetに書き込むので，単純である．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TestBoxPlot3 &amp;lt;- TestBoxPlot +
    geom_segment(data = DataM_summary, aes(x=as.numeric(as.factor(Day)) - 0.5,
                                           xend=as.numeric(as.factor(Day)) + 0.5,
                                           yend=mean,
                                           y=mean,
                                           colour=Day,
                                           alpha=0.7),
                 size = 1.5, linetype = 1)

TestBoxPlot3
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Boxplot1mean.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Boxplot1mean.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;add-segment-and-asterisk-to-drug2-facet-of-boxplot&#34;&gt;Add segment and asterisk to Drug2 facet of boxplot&lt;/h2&gt;

&lt;h3 id=&#34;dataframe-for-annotation&#34;&gt;Dataframe for annotation&lt;/h3&gt;

&lt;p&gt;ここからが本番である．上記で作成したグラフを見ながら，どこからどこに線を引けばよいのか，どこにasteriskを置けばよいのか大体の見当をつけたうえで，注釈用のデータフレームを別途作成する．これは手作業でやらざるを得ない．できたグラフを見て微調整をしていく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;anno &amp;lt;- data.frame(
    x=c(0.9, 0.9, 3.1, 1.1, 1.1, 1.9, 2.1, 2.1, 2.9),
    y=c(10.5, 37, 37, 10.5, 26, 26, 23.5, 34, 34),
    xend=c(0.9, 3.1, 3.1, 1.1, 1.9, 1.9, 2.1, 2.9, 2.9),
    yend=c(37, 37, 32.5, 26, 26, 23.5, 34, 34, 32.5),
    variable=&amp;quot;Drug2&amp;quot;,
    xstar = c(1.5, 2, 2.5, NA, NA, NA, NA, NA, NA),
    ystar = c(27, 38, 35, NA, NA, NA, NA, NA, NA),
    lab = c(&amp;quot;**&amp;quot;, &amp;quot;***&amp;quot;, &amp;quot;***&amp;quot;, NA, NA, NA, NA, NA, NA),
    ast.color = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;, NA, NA, NA, NA, NA, NA))

anno
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;    x    y xend yend variable xstar ystar  lab ast.color
1 0.9 10.5  0.9 37.0    Drug2   1.5    27   **       red
2 0.9 37.0  3.1 37.0    Drug2   2.0    38  ***      blue
3 3.1 37.0  3.1 32.5    Drug2   2.5    35  ***     green
4 1.1 10.5  1.1 26.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
5 1.1 26.0  1.9 26.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
6 1.9 26.0  1.9 23.5    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
7 2.1 23.5  2.1 34.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
8 2.1 34.0  2.9 34.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
9 2.9 34.0  2.9 32.5    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;x, y, xend, yendは各線分の始点と終点で，xstar, ystarは注釈，今回はasteriskの位置を示す．labはasteriskそのものを指示し，colorはasteriskの色を指定している．&lt;/p&gt;

&lt;h3 id=&#34;add-segment-with-geom-segment-and-asterisk-with-geom-text--black&#34;&gt;Add segment with geom_segment and asterisk with geom_text (black)&lt;/h3&gt;

&lt;p&gt;geom_segmentで線を引いて，geom_textでasteriskをつける．まずは黒色でやってみる． &lt;strong&gt;inherit.aes=FALSE&lt;/strong&gt; をgeom_text()とgeom_segment()の内部に追加してggplot()内のfill=Dayを無視させる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TestBoxPlot3 +
    geom_text(data = anno, aes(x = xstar, y = ystar, label = lab, colour = NULL), size = 7, family = &amp;quot;Times New Roman&amp;quot;, inherit.aes = FALSE) +
    geom_segment(data = anno, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Boxplot1mean_anno.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Boxplot1mean_anno.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h3 id=&#34;add-segment-with-geom-segment-and-asterisk-with-geom-text--color&#34;&gt;Add segment with geom_segment and asterisk with geom_text (color)&lt;/h3&gt;

&lt;p&gt;asteriskに色をつける．データフレーム annoに書き込んだ色データを明示的に指示して利用する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TestBoxPlot3 +
    geom_text(data = anno, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = &amp;quot;Times New Roman&amp;quot;, inherit.aes = FALSE) +
    geom_segment(data = anno, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Boxplot1mean_anno_color.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Boxplot1mean_anno_color.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;問題はここである．どうしても， &lt;strong&gt;colour = anno$ast.color&lt;/strong&gt; とデータフレームと変数を明示的に指示しないと色がおかしくなるか，エラーになってしまう．もっとうまくggplotにデータを読ませる方法をどなたかご教示いただければ幸甚である．&lt;/p&gt;

&lt;h2 id=&#34;barplot-by-ggplot2&#34;&gt;Barplot by ggplot2&lt;/h2&gt;

&lt;p&gt;次にbarplotを描いて同じことをやってみる．エラーバーは慣例通りSEにする．&lt;/p&gt;

&lt;h3 id=&#34;barplot&#34;&gt;Barplot&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TestBarPlot &amp;lt;- ggplot(DataM_summary, aes(x = Day, y = mean, colour = Day, fill=Day)) +
    geom_errorbar(aes(ymin = mean, ymax = mean + se), width = 0.2) +
    geom_bar(position=position_dodge(), stat=&amp;quot;identity&amp;quot;, alpha=1/2, width=0.5) +
    facet_wrap(~variable, scales = &amp;quot;fixed&amp;quot;, ncol=3) +
    coord_cartesian(ylim = c(0,30)) +
    theme_bw() +
    theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
    theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
    xlab(&amp;quot;&amp;quot;) +
    ylab(&amp;quot;Relative value to control&amp;quot;) +
    theme(legend.position = &amp;quot;none&amp;quot;)   # delete legend

TestBarPlot
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Barplot1.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Barplot1.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;add-segment-and-asterisk-to-drug2-facet-of-barplot&#34;&gt;Add segment and asterisk to Drug2 facet of barplot&lt;/h2&gt;

&lt;h3 id=&#34;dataframe-for-annotation-1&#34;&gt;Dataframe for annotation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;anno2 &amp;lt;- data.frame(
    x=c(0.9, 0.9, 3.1, 1.1, 1.1, 1.9, 2.1, 2.1, 2.9),
    y=c(6.5, 29, 29, 6.5, 17, 17, 12.5, 25, 25),
    xend=c(0.9, 3.1, 3.1, 1.1, 1.9, 1.9, 2.1, 2.9, 2.9),
    yend=c(29, 29, 22.5, 17, 17, 12.5, 25, 25, 22.5),
    variable=&amp;quot;Drug2&amp;quot;,
    xstar = c(1.5, 2, 2.5, NA, NA, NA, NA, NA, NA),
    ystar = c(17.5, 29.5, 25.5, NA, NA, NA, NA, NA, NA),
    lab = c(&amp;quot;**&amp;quot;, &amp;quot;***&amp;quot;, &amp;quot;***&amp;quot;, NA, NA, NA, NA, NA, NA),
    ast.color = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;, NA, NA, NA, NA, NA, NA))

anno2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;    x    y xend yend variable xstar ystar  lab ast.color
1 0.9  6.5  0.9 29.0    Drug2   1.5  17.5   **       red
2 0.9 29.0  3.1 29.0    Drug2   2.0  29.5  ***      blue
3 3.1 29.0  3.1 22.5    Drug2   2.5  25.5  ***     green
4 1.1  6.5  1.1 17.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
5 1.1 17.0  1.9 17.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
6 1.9 17.0  1.9 12.5    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
7 2.1 12.5  2.1 25.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
8 2.1 25.0  2.9 25.0    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
9 2.9 25.0  2.9 22.5    Drug2    NA    NA &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-segment-with-geom-segment-and-asterisk-with-geom-text--color-1&#34;&gt;Add segment with geom_segment and asterisk with geom_text (color)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;TestBarPlot +
    geom_text(data = anno2, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = &amp;quot;Times New Roman&amp;quot;, inherit.aes = FALSE) +
    geom_segment(data = anno2, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Barplot1_anno_color.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Barplot1_anno_color.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;barplotでも全く同様のグラフを作成することができた．&lt;/p&gt;

&lt;p&gt;なお，通常のグラフをpdfで出力して，それをOmniGraffleなどのお絵かきソフトに持っていき，手作業で線やasteriskを描いて，再びpdfで出力する，という荒業も使えないことはない．しかし，ggplotの中で完結できるので，余分で面倒な手作業が不要になった．まぁ，上記の作業も面倒ではあるが，再現性があり，他の人にも渡せるというところが重要であると思う．&lt;/p&gt;

&lt;h2 id=&#34;combine-boxplot-and-barplot-into-the-same-graphic&#34;&gt;Combine boxplot and barplot into the same graphic&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref1:&lt;/strong&gt; &lt;a href=&#34;https://github.com/thomasp85/patchwork&#34; target=&#34;_blank&#34;&gt;patchwork&lt;/a&gt;   &lt;br /&gt;
&lt;strong&gt;Ref2:&lt;/strong&gt; &lt;a href=&#34;https://qiita.com/nozma/items/4512623bea296ccb74ba&#34; target=&#34;_blank&#34;&gt;patchworkを使って複数のggplotを組み合わせる&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;patchworkを使えば，上記の２種のグラフを簡単に一つの図にできる．比較しやすいようにbarplotのy軸のスケールをboxplotと同じに修正しておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# Boxplot
P1 &amp;lt;- TestBoxPlot3 +
    geom_text(data = anno, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = &amp;quot;Times New Roman&amp;quot;, inherit.aes = FALSE) +
    geom_segment(data = anno, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)

# Barplot
TestBarPlot2 &amp;lt;- ggplot(DataM_summary, aes(x = Day, y = mean, colour = Day, fill=Day)) +
    geom_errorbar(aes(ymin = mean, ymax = mean + se), width = 0.2) +
    geom_bar(position=position_dodge(), stat=&amp;quot;identity&amp;quot;, alpha=1/2, width=0.5) +
    facet_wrap(~variable, scales = &amp;quot;fixed&amp;quot;, ncol=3) +
    coord_cartesian(ylim = c(0,38)) +
    theme_bw() +
    theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
    theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
    xlab(&amp;quot;&amp;quot;) +
    ylab(&amp;quot;Relative value to control&amp;quot;) +
    theme(legend.position = &amp;quot;none&amp;quot;)   # delete legend
P2 &amp;lt;- TestBarPlot2 +
    geom_text(data = anno2, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = &amp;quot;Times New Roman&amp;quot;, inherit.aes = FALSE) +
    geom_segment(data = anno2, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)

library(patchwork)
P1 + P2
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/Combined.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/Combined.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;このpatchworkは足し算だけで２つの図の合体ができてしまうすぐれもの．ちゃんと位置合わせなども自動的にしてくれる．素晴らしい．&lt;/p&gt;

&lt;p&gt;しかし，こうして並べて比べてみると，barplotが如何に情報量の少ないグラフであるかが一目瞭然である．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to automatically embed R plot in blog created by Hugo via ox-hugo</title>
      <link>/post/embedrplotinblog/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate>
      <guid>/post/embedrplotinblog/</guid>
      <description>

&lt;p&gt;（承前）前回（&lt;a href=&#34;../ExportRplot&#34;&gt;How to automatically embed R plot into html exported by org-mode with org-babel&lt;/a&gt;）はorg-babelを設定して，Rで描いたグラフを自動でhtmlやpdfに挿入するところまでまとめた．繰り返しになるが，本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成している．前々回の記事（&lt;a href=&#34;../prodlim&#34;&gt;How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)&lt;/a&gt;）を書いている際に，Rでplotしたgraphをブログ記事の中に自動ではめ込むよう設定するのに苦労した．前回でorg-babelの設定は終わっているので，今回は，Hugoやox-hugoの設定に関してまとめ，ブログ記事へのR plotの自動挿入ができるようにする．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuration-of-hugo-section&#34;&gt;Configuration of Hugo section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-of-hugo-section-and-hugo-base-dir-in-ox-hugo&#34;&gt;Setup of HUGO_SECTION &amp;amp; HUGO_BASE_DIR in ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references-to-files-outside-the-static-directory&#34;&gt;References to files outside the static directory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;HUGO&lt;/a&gt;  &lt;br /&gt;
Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. Hugoのsetupについてはネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ox-hugo.scripter.co&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;  &lt;br /&gt;
ox-hugo is an Org exporter backend that exports Org to Hugo-compatible Markdown (Blackfriday) and also generates the front-matter (in TOML or YAML format).&lt;/p&gt;

&lt;p&gt;要するに，Markdownを直接書くのではなく，org-modeで書いてしまおうというもので，私のようなorg-mode maniacにピッタリのパッケージである．ox-hugoのsetupについてもネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration-of-hugo-section&#34;&gt;Configuration of Hugo section&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://sfus.net/blog/2018/12/org-mode-with-ox-hugo/&#34; target=&#34;_blank&#34;&gt;Org-mode で記事を書いて Hugo 向け markdown を ox-hugo で自動生成する話&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そもそも，まず，Hugoのディレクトリ・ファイルの構成を把握する必要があった．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.org に書き込んでおり，directory/file構成は以下の通りである．上記参考サイトと同じく，/hogehoge/hogeblog/hogefugablog/，つまり，Hugo の content/ と同じ階層に hogefugablog.org ファイルを置いている．なお，themeは &lt;a href=&#34;https://themes.gohugo.io/academic/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;academic&lt;/strong&gt;&lt;/a&gt; を使用している．また，ox-hugoのdirectoryは今回の作業により新たに作成されたものであり，当初はなかった．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tree -L 2
.
├── config.toml
├── content
│   ├── home
│   ├── post
│   └── privacy.md
├── data
│   └── 6F
├── hogefugablog.org
├── layouts
│   ├── js
│   ├── partials
│   └── search
├── static
│   ├── css
│   ├── files
│   ├── img
│   └── ox-hugo
└── themes
    └── academic
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setup-of-hugo-section-and-hugo-base-dir-in-ox-hugo&#34;&gt;Setup of HUGO_SECTION &amp;amp; HUGO_BASE_DIR in ox-hugo&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://ox-hugo.scripter.co/doc/usage/#before-you-export&#34; target=&#34;_blank&#34;&gt;Before you export&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本サイトでは，HUGO_SECTIONは特に設定しておらず，C-h v org-hugo-default-section-directoryの値は default valueであるpostsになっている．&lt;/p&gt;

&lt;p&gt;また，hogefugablog.orgの文頭に以下のように記述して，HUGO_BASE_DIRを設定している．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+HUGO_BASE_DIR: ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでで，ox-hugoからのexportの準備が整った．&lt;/p&gt;

&lt;h2 id=&#34;references-to-files-outside-the-static-directory&#34;&gt;References to files outside the static directory&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://ox-hugo.scripter.co/doc/image-links/#references-to-files-outside-the-static-directory&#34; target=&#34;_blank&#34;&gt;References to files outside the static directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugoのstatic directory以外の場所にあるファイルへのreferenceを作成し，かつ，そのファイルが &lt;strong&gt;org-hugo-external-file-extensions-allowed-for-copying&lt;/strong&gt; のリストに挙げられている拡張子を有している場合は，そのファイルはox-hugoによりstatic directoryにコピーされる．ちなみに，C-h v org-hugo-external-file-extensions-allowed-for-copyingとすると，以下のような値を得る．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;org-hugo-external-file-extensions-allowed-for-copying is a variable defined in ‘ox-hugo.el’.
Its value is
(&amp;quot;jpg&amp;quot; &amp;quot;jpeg&amp;quot; &amp;quot;tiff&amp;quot; &amp;quot;png&amp;quot; &amp;quot;svg&amp;quot; &amp;quot;gif&amp;quot; &amp;quot;pdf&amp;quot; &amp;quot;odt&amp;quot; &amp;quot;doc&amp;quot; &amp;quot;ppt&amp;quot; &amp;quot;xls&amp;quot; &amp;quot;docx&amp;quot; &amp;quot;pptx&amp;quot; &amp;quot;xlsx&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://ox-hugo.scripter.co/doc/image-links/#source-path-does-not-contain-static&#34; target=&#34;_blank&#34;&gt;Source path does not contain &lt;code&gt;/static/&lt;/code&gt;&lt;/a&gt;    &lt;br /&gt;
このサイトの &lt;strong&gt;Table 2: Where files get copied to if their path does not contain static/&lt;/strong&gt; が本サイトに当てはまる．これが分かるまでに時間を要した．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.orgに書き込んでいる．この環境で，postの中にorg-babelを使ってRのcode blockを評価すると，Rにより作成されるplot（foo.png）は，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;/hogehoge/hogeblog/hogefugablog/foo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に作成される．そして，このファイルは，最終的に，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;/hogehoge/hogeblog/hogefugablog/static/ox-hugo/foo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;にコピーされ，ブログ記事に挿入されるということになる．なお，ox-hugo directoryはこの時に自動的に作成される．&lt;/p&gt;

&lt;p&gt;つまり，前回の記事（&lt;a href=&#34;../ExportRplot&#34;&gt;How to automatically embed R plot into html exported by org-mode with org-babel&lt;/a&gt;）のように，R plotのcode blockを含むorg ファイルを作成し，それをexportして，R plotが自動で組み込まれるようなら，そのorg-babelのcode blockをそのままox-hugoで書いたブログ記事のorg ファイルにコピペすれば，あとはox-hugoが良きにはからってくれるはずである．&lt;/p&gt;

&lt;p&gt;実は，できたグラフの画像を自分でいろいろな場所にコピーしては失敗していた．Hugoのroot directory，つまり，/hogehoge/hogeblog/hogefugablog/でRを動かして，できたグラフ画像に対して何もせずに放置しておけば，ox-hugoが全て面倒を見てくれるということに気がつかず，余計なことをしていたわけである．&lt;/p&gt;

&lt;p&gt;まとめとして，前回記事のcode blockをこの記事に挿入して試してみる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src R :session *R* :results output graphics :file test1.png :exports both
boxplot(islands)
#+end_src
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/test1.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/test1.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src R :session *R* :results output graphics :file test2.png :exports both
library(&amp;quot;ggplot2&amp;quot;)
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
geom_point()
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/test2.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/test2.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ちゃんとグラフが自動的に挿入されている．&lt;/p&gt;

&lt;p&gt;org-babelとRの組み合わせは強力で，ox-hugoも便利と改めて痛感．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to automatically embed R plot into html exported by org-mode with org-babel</title>
      <link>/post/exportrplot/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate>
      <guid>/post/exportrplot/</guid>
      <description>

&lt;p&gt;本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成しているが，前回の記事（&lt;a href=&#34;../prodlim&#34;&gt;How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)&lt;/a&gt;）を書いている際に，Rでplotしたgraphを記事の中に自動ではめ込むよう設定するのに苦労したので，これも忘れないうちにまとめておく．まず，今回はorg-babelの設定について書き，次回にHugoでの設定をまとめる．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org-babel-setup&#34;&gt;Org-babel setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use-org-babel&#34;&gt;How to use org-babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org-babel-evaluation-of-r-code-block&#34;&gt;Org-babel evaluation of R code block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;org-babel-setup&#34;&gt;Org-babel setup&lt;/h2&gt;

&lt;p&gt;org-babelとは，う～～～ん，なにもの？　ものすごく端折って言うと，Code blockを評価して結果を表示するorg-modeの拡張，といったところだろうか．．．実例を見たほうが早いと思う．今回，org-babelによる R code の評価について書こうとして，ふと，ブログを見直してみると，なんとorg-babelの設定をまとめた記事を投稿してない &amp;hellip;..(^^;;;&lt;/p&gt;

&lt;p&gt;ということで，org-babelの設定を改めて記しておく．例によって，init.orgに以下のように書き込んでおけばよい．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;http://doc.norang.ca/org-mode.html#OrgBabel&#34; target=&#34;_blank&#34;&gt;Org-babel Setup&lt;/a&gt;　ここからコピペ  (^^;;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (shell . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-use-org-babel&#34;&gt;How to use org-babel&lt;/h2&gt;

&lt;p&gt;以下のサイトを参考にした．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref 1:&lt;/strong&gt; Official manual &lt;a href=&#34;https://orgmode.org/manual/Working-with-Source-Code.html#Working-with-Source-Code&#34; target=&#34;_blank&#34;&gt;14 Working with Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref 2:&lt;/strong&gt; &lt;a href=&#34;http://misohena.jp/blog/2017-10-26-how-to-use-code-block-of-emacs-org-mode.html&#34; target=&#34;_blank&#34;&gt;org-modeのコードブロック(Babel)の使い方&lt;/a&gt;   &lt;br /&gt;
このサイトが分かりやすい．特に， &lt;strong&gt;ヘッダー引数&lt;/strong&gt; と &lt;strong&gt;言語毎の書き方&lt;/strong&gt; の &lt;strong&gt;R&lt;/strong&gt; の項は必読．&lt;/p&gt;

&lt;h2 id=&#34;org-babel-evaluation-of-r-code-block&#34;&gt;Org-babel evaluation of R code block&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.neuwirth.priv.at/software/2012/03/28/r-and-emacs-with-org-mode/&#34; target=&#34;_blank&#34;&gt;R and Emacs with org mode&lt;/a&gt;   &lt;br /&gt;
org-babelによるR codeの評価とhtmlへのgraph plotの自動埋め込みは，このサイトが分かりやすい．ここに有る”Using org mode with R”というサンプルを参考に，以下のようなorgファイルを/Data/hogehoge/hogefugaに作成する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+TITLE: R-test
#+AUTHOR: taipapa

* Test

  #+begin_src R :session *R* :results output graphics :file test1.png :exports both
  boxplot(islands)
  #+end_src

  #+begin_src R :session *R* :results output graphics :file test2.png :exports both
  library(&amp;quot;ggplot2&amp;quot;)
  ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
  geom_point()
  #+END_SRC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C-c C-e h oとしてhtmlにexportすると，以下のように簡単にグラフがプロットされたhtmlが作成される．いちいちできたグラフ画像を挿入する必要はなく，自動で挿入される．便利である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/R-test-html.png&#34; &gt;

&lt;img src=&#34;/img/R-test-html.png&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;　　注意点としては，C-c C-e hoとしたときに， &lt;strong&gt;R starting project directory？&lt;/strong&gt; と尋ねられるはずで，defaultの値として　/Data/hogehoge/hogefuga/ が既に表示されているはずである．これをそのままリターンすれば同じdirectoryにグラフが作成されて良きにはからってくれる．この際に異なるdirectoryを選んだりするとうまくいかないので注意．&lt;/p&gt;

&lt;p&gt;また，C-c C-e loとすると，自動でR plotの挿入されたpdfが作成されオープンする．&lt;/p&gt;

&lt;p&gt;これで準備が整った．次回はHugoで作成したブログにR plotを自動で差し込む方法をまとめる予定である．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)</title>
      <link>/post/prodlim/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0900</pubDate>
      <guid>/post/prodlim/</guid>
      <description>

&lt;p&gt;Rを用いて生存分析を行う際に， &lt;strong&gt;Kaplan-Meier curve&lt;/strong&gt; に打ち切りのマークを入れたり，number at risk (at risk table)を併記する方法はすぐに見つかるが（&lt;a href=&#34;http://rstudio-pubs-static.s3.amazonaws.com/5588%5F72eb65bfbe0a4cb7b655d2eee0751584.html&#34; target=&#34;_blank&#34;&gt;Drawing survival curves in R&lt;/a&gt;, &lt;a href=&#34;https://github.com/michaelway/ggkm&#34; target=&#34;_blank&#34;&gt;ggkm&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/web/packages/survminer/vignettes/Informative%5FSurvival%5FPlots.html&#34; target=&#34;_blank&#34;&gt;Survival plots have never been so informative&lt;/a&gt;），competing riskのplotの場合はあまり情報がない．prodlimを使えば簡単なので，まとめておく．&lt;/p&gt;

&lt;p&gt;なお， &lt;strong&gt;competing risk&lt;/strong&gt; については以下を参照．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nature.com/articles/1705727&#34; target=&#34;_blank&#34;&gt;Competing risk analysis using R: an easy guide for clinicians&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nature.com/articles/bmt2009359&#34; target=&#34;_blank&#34;&gt;Regression modeling of competing risk using R: an in depth guide for clinicians&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rstudio-pubs-static.s3.amazonaws.com/6600%5Fe6703101eb7441ccb792000f4193b3b9.html&#34; target=&#34;_blank&#34;&gt;Competing risk analysisのデモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rpubs.com/alecri/258589&#34; target=&#34;_blank&#34;&gt;A not so short review on survival analysis in R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#prepare-dataset-melanoma-from-riskregression-package&#34;&gt;Prepare dataset &amp;ldquo;Melanoma&amp;rdquo; from &amp;ldquo;riskRegression&amp;rdquo; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#competing-risk-analysis-with-cuminc-of-cmprsk-package&#34;&gt;Competing risk analysis with cuminc of &amp;ldquo;cmprsk&amp;rdquo; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#competing-risk-analysis-with-prodlim&#34;&gt;Competing risk analysis with prodlim&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#days&#34;&gt;Days&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#years&#34;&gt;Years&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plot-survival-curve-of-competing-risk-analysis-with-prodlim--default&#34;&gt;Plot survival curve of competing risk analysis with prodlim (default)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plot-survival-curve-of-competing-risk-analysis-with-prodlim--modified&#34;&gt;Plot survival curve of competing risk analysis with prodlim (modified)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;prepare-dataset-melanoma-from-riskregression-package&#34;&gt;Prepare dataset &amp;ldquo;Melanoma&amp;rdquo; from &amp;ldquo;riskRegression&amp;rdquo; package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(riskRegression)
data(Melanoma)
head(Melanoma)
summary(Melanoma)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  time status                    event invasion ici      epicel       ulcer
1   10      2       death.other.causes  level.1   2     present     present
2   30      2       death.other.causes  level.0   0 not present not present
3   35      0                 censored  level.1   2 not present not present
4   99      2       death.other.causes  level.0   2 not present not present
5  185      1 death.malignant.melanoma  level.2   2     present     present
6  204      1 death.malignant.melanoma  level.2   2 not present     present
  thick    sex age   logthick
1  6.76   Male  76  1.9110229
2  0.65   Male  56 -0.4307829
3  1.34   Male  41  0.2926696
4  2.90 Female  71  1.0647107
5 12.08   Male  52  2.4915512
6  4.84   Male  28  1.5769147
      time          status                            event        invasion
 Min.   :  10   Min.   :0.0000   censored                :134   level.0:99
 1st Qu.:1525   1st Qu.:0.0000   death.malignant.melanoma: 57   level.1:77
 Median :2005   Median :0.0000   death.other.causes      : 14   level.2:29
 Mean   :2153   Mean   :0.4146
 3rd Qu.:3042   3rd Qu.:1.0000
 Max.   :5565   Max.   :2.0000
 ici             epicel            ulcer         thick           sex
 0: 17   not present:116   not present:115   Min.   : 0.10   Female:126
 1: 59   present    : 89   present    : 90   1st Qu.: 0.97   Male  : 79
 2:107                                       Median : 1.94
 3: 22                                       Mean   : 2.92
                                             3rd Qu.: 3.56
                                             Max.   :17.42
      age           logthick
 Min.   : 4.00   Min.   :-2.30259
 1st Qu.:42.00   1st Qu.:-0.03046
 Median :54.00   Median : 0.66269
 Mean   :52.46   Mean   : 0.61817
 3rd Qu.:65.00   3rd Qu.: 1.26976
 Max.   :95.00   Max.   : 2.85762
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;competing-risk-analysis-with-cuminc-of-cmprsk-package&#34;&gt;Competing risk analysis with cuminc of &amp;ldquo;cmprsk&amp;rdquo; package&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cuminc is used to investigate whether a statistically significant difference is present between the groups (see &amp;ldquo;Tests:&amp;rdquo; below).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(cmprsk)
Results_cmprsk &amp;lt;- with(Melanoma, cuminc(time, event, group = sex, cencode = &amp;quot;censored&amp;quot;))
Results_cmprsk
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Tests:
                          stat        pv df
death.malignant.melanoma 5.8140209 0.0158989  1
death.other.causes       0.8543656 0.3553203  1
Estimates and Variances:
$est
                                  1000       2000       3000       4000
Female death.malignant.melanoma 0.08730159 0.18077594 0.23565169 0.28424490
Male death.malignant.melanoma   0.19237175 0.31009828 0.42453587 0.42453587
Female death.other.causes       0.03174603 0.03983516 0.05220642 0.08538385
Male death.other.causes         0.03814124 0.06693942 0.06693942 0.13474271
                                  5000
Female death.malignant.melanoma 0.28424490
Male death.malignant.melanoma           NA
Female death.other.causes       0.08538385
Male death.other.causes                 NA

$var
                                    1000         2000         3000
Female death.malignant.melanoma 0.0006378135 0.0012450462 0.0018102025
Male death.malignant.melanoma   0.0020223293 0.0028196248 0.0042695603
Female death.other.causes       0.0002459647 0.0003073878 0.0004529114
Male death.other.causes         0.0004727379 0.0008614343 0.0008614343
                                   4000        5000
Female death.malignant.melanoma 0.002755577 0.002755577
Male death.malignant.melanoma   0.004269560          NA
Female death.other.causes       0.001528480 0.001528480
Male death.other.causes         0.002950698          NA
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;competing-risk-analysis-with-prodlim&#34;&gt;Competing risk analysis with prodlim&lt;/h2&gt;

&lt;h3 id=&#34;days&#34;&gt;Days&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;CompRskAnalysis &amp;lt;- prodlim(Hist(time, status, cens.code=0) ~ sex, data = Melanoma)
summary(CompRskAnalysis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;

----------&amp;gt; Cause:  1

sex=Female :
  time n.risk n.event n.lost cuminc se.cuminc  lower upper
1   10    126       0      0  0.000    0.0000 0.0000 0.000
2 1513    104       0      0  0.127    0.0297 0.0688 0.185
3 2006     67       0      0  0.181    0.0351 0.1120 0.250
4 3042     34       0      0  0.236    0.0423 0.1528 0.318
5 5565      1       0      1  0.284    0.0519 0.1826 0.386

sex=Male :
  time n.risk n.event n.lost cuminc se.cuminc lower upper
1   10     79       0      0  0.000    0.0000 0.000 0.000
2 1513     51       0      0  0.270    0.0503 0.171 0.368
3 2006     35       0      0  0.310    0.0527 0.207 0.413
4 3042     18       0      0  0.425    0.0644 0.298 0.551
5 5565      0       0      0     NA        NA    NA    NA



----------&amp;gt; Cause:  2

sex=Female :
  time n.risk n.event n.lost cuminc se.cuminc   lower  upper
1   10    126       0      0 0.0000    0.0000 0.00000 0.0000
2 1513    104       0      0 0.0317    0.0156 0.00113 0.0624
3 2006     67       0      0 0.0398    0.0175 0.00562 0.0741
4 3042     34       0      0 0.0522    0.0212 0.01073 0.0937
5 5565      1       0      1 0.0854    0.0383 0.01027 0.1605

sex=Male :
  time n.risk n.event n.lost cuminc se.cuminc   lower  upper
1   10     79       1      0 0.0127    0.0126 0.00000 0.0373
2 1513     51       0      0 0.0510    0.0248 0.00230 0.0996
3 2006     35       0      0 0.0669    0.0291 0.00992 0.1240
4 3042     18       0      0 0.0669    0.0291 0.00992 0.1240
5 5565      0       0      0     NA        NA      NA     NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;years&#34;&gt;Years&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;CompRskAnalysis2 &amp;lt;- prodlim(Hist(time/365.25, event, cens.code=&amp;quot;censored&amp;quot;) ~ sex, data = Melanoma)
summary(CompRskAnalysis2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;

----------&amp;gt; Cause:  death.malignant.melanoma

sex=Female :
     time n.risk n.event n.lost cuminc se.cuminc  lower upper
1  0.0274    126       0      0  0.000    0.0000 0.0000 0.000
2  4.1424    104       0      0  0.127    0.0297 0.0688 0.185
3  5.4921     67       0      0  0.181    0.0351 0.1120 0.250
4  8.3272     34       0      0  0.236    0.0423 0.1528 0.318
5 15.2361      1       0      1  0.284    0.0519 0.1826 0.386

sex=Male :
     time n.risk n.event n.lost cuminc se.cuminc lower upper
1  0.0274     79       0      0  0.000    0.0000 0.000 0.000
2  4.1424     51       0      0  0.270    0.0503 0.171 0.368
3  5.4921     35       0      0  0.310    0.0527 0.207 0.413
4  8.3272     18       0      0  0.425    0.0644 0.298 0.551
5 15.2361      0       0      0     NA        NA    NA    NA



----------&amp;gt; Cause:  death.other.causes

sex=Female :
     time n.risk n.event n.lost cuminc se.cuminc   lower  upper
1  0.0274    126       0      0 0.0000    0.0000 0.00000 0.0000
2  4.1424    104       0      0 0.0317    0.0156 0.00113 0.0624
3  5.4921     67       0      0 0.0398    0.0175 0.00562 0.0741
4  8.3272     34       0      0 0.0522    0.0212 0.01073 0.0937
5 15.2361      1       0      1 0.0854    0.0383 0.01027 0.1605

sex=Male :
     time n.risk n.event n.lost cuminc se.cuminc   lower  upper
1  0.0274     79       1      0 0.0127    0.0126 0.00000 0.0373
2  4.1424     51       0      0 0.0510    0.0248 0.00230 0.0996
3  5.4921     35       0      0 0.0669    0.0291 0.00992 0.1240
4  8.3272     18       0      0 0.0669    0.0291 0.00992 0.1240
5 15.2361      0       0      0     NA        NA      NA     NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plot-survival-curve-of-competing-risk-analysis-with-prodlim--default&#34;&gt;Plot survival curve of competing risk analysis with prodlim (default)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# Default plot
plot(CompRskAnalysis2)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/DefaultPlot.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/DefaultPlot.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;plot-survival-curve-of-competing-risk-analysis-with-prodlim--modified&#34;&gt;Plot survival curve of competing risk analysis with prodlim (modified)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;adjust legend&lt;/li&gt;
&lt;li&gt;add tick-mark at right censoring times&lt;/li&gt;
&lt;li&gt;rotate labels of y-axis&lt;/li&gt;
&lt;li&gt;add statistical significance from results of cuminc described above&lt;/li&gt;

&lt;li&gt;&lt;p&gt;etc&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# Plot with modification
plot(CompRskAnalysis2,
 cause = &amp;quot;death.malignant.melanoma&amp;quot;,
 xlim=c(0, 15),
 legend.x=&amp;quot;topleft&amp;quot;, # position of legend
 legend.cex=1.5, # font size of legend
 marktime = TRUE, # the curves are tick-marked at right censoring times by invoking the function markTime.
 legend.title=&amp;quot;&amp;quot;,
 atrisk.title=&amp;quot;&amp;quot;,
 axis2.at=seq(0,1,0.2),
 background.horizontal=seq(0,1,0.2),
 axis2.las=2,                            # rotate labels of y-axis
 percent = FALSE,
 confint = FALSE,
 atrisk.col=&amp;quot;black&amp;quot;,
 xlab=&amp;quot;Time to primary outcome (years)&amp;quot;
 )
text(6.5,0.85,adj=0,paste(&amp;quot;Gray&#39;s test: p-value=&amp;quot;, round(Results_cmprsk$Tests[1,2],3)), cex = 1.2)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/ModifiedPlot.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/ModifiedPlot.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;今回は，学会発表用のグラフ作成に必要であった．忘れないうちにまとめておく．以前は，at risk tableを別途作成してグラフに合体させるという荒業を行っていたが，これで非常に楽になった．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの長い行を折り返して見やすくするが実際の行は変えない．adaptive-wrap —Correct indentation for wrapped lines</title>
      <link>/post/adaptive-wrap/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0900</pubDate>
      <guid>/post/adaptive-wrap/</guid>
      <description>

&lt;p&gt;Emacsで長い行を書いていると，デフォルトの状態ではどんどん横に伸びていく．後で読み返そうと思うと横にスクロールしないといけなくて，非常に不便である．M-qでauro-fillをやればよいと言われそうだが，そうすると改行されてしまい，これまた不便である．そこで，なんとかならないかと探してみると，ちゃんとそういうモノがあったので，まとめておく．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#adaptive-wrap&#34;&gt;adaptive-wrap&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#インストールと設定&#34;&gt;インストールと設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実際の使用例&#34;&gt;実際の使用例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;adaptive-wrap&#34;&gt;adaptive-wrap&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照1：&lt;a href=&#34;https://elpa.gnu.org/packages/adaptive-wrap.html&#34; target=&#34;_blank&#34;&gt;adaptive-wrap&lt;/a&gt;　ご本家&lt;/li&gt;
&lt;li&gt;参照2：&lt;a href=&#34;https://emacs.stackexchange.com/questions/14589/correct-indentation-for-wrapped-lines&#34; target=&#34;_blank&#34;&gt;Correct indentation for wrapped lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照3：&lt;a href=&#34;http://alainmathematics.blogspot.com/2013/07/emacs.html&#34; target=&#34;_blank&#34;&gt;Emacsの折り返しの挙動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照4：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/1kw7ip/emacs%5Fsettings%5Floading%5Fissue/&#34; target=&#34;_blank&#34;&gt;.emacs settings loading issue&lt;/a&gt;　&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;長い行をワープロのようにword-wrapしてくれるパッケージである．Emacsのバッファ上では折り返されているように見えるが，実際は長い横1行のままである．&lt;/p&gt;

&lt;h3 id=&#34;インストールと設定&#34;&gt;インストールと設定&lt;/h3&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書けばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package adaptive-wrap
  :ensure t
  :config
  (setq-default adaptive-wrap-extra-indent 1)
  (add-hook &#39;visual-line-mode-hook #&#39;adaptive-wrap-prefix-mode)
  (global-visual-line-mode +1)
  (add-hook &#39;org-mode-hook &#39;visual-line-mode)  ;; For org macros
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお，最後の行を入れておかないと，org-mode fileに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+setupfile: /Sources/org-mode-folder/org-macros-master/org-macros.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加してマクロのパッケージを使用する場合（&lt;a href=&#34;../html_export&#34;&gt;Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）&lt;/a&gt;を参照のこと）に，adaptive-wrapが効かなくなる．&lt;/p&gt;

&lt;h3 id=&#34;実際の使用例&#34;&gt;実際の使用例&lt;/h3&gt;

&lt;p&gt;adaptive-wrapをインストールしていない場合が上図，インストールして設定すれば下図のように見える．あくまで，Emacsの画面上でword-wrapしているように見えるだけで，実際のファイルではなが～い横１行のままの状態が維持されている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Before_adaptive.jpg&#34; &gt;

&lt;img src=&#34;/img/Before_adaptive.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;








&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/After_adaptive.jpg&#34; &gt;

&lt;img src=&#34;/img/After_adaptive.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これも一度使い始めると，無くてはならないモノとなるパッケージである．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする</title>
      <link>/post/auto_html_export/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0900</pubDate>
      <guid>/post/auto_html_export/</guid>
      <description>

&lt;p&gt;org-modeで文書を書いていてhtmlにexportする際は，C-e h oとするわけだが，段々とこれが面倒になってくることがある．そこで，ネットを探ってみると，やはり，なんでも載ってるredditにhtml exportを自動化する関数の記事があった．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#toggle-org-html-export-on-save&#34;&gt;toggle-org-html-export-on-save&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#directoryの内容が変更されると-自動でhtmlを再読込する&#34;&gt;directoryの内容が変更されると，自動でhtmlを再読込する．&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用方法&#34;&gt;使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;toggle-org-html-export-on-save&#34;&gt;toggle-org-html-export-on-save&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;情報元：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/4golh1/how%5Fto%5Fauto%5Fexport%5Fhtml%5Fwhen%5Fsaving%5Fin%5Forgmode/?sort=old&#34; target=&#34;_blank&#34;&gt;How to auto export html when saving in org-mode?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例によって，下記のようにinit.orgに書き込めばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(defun toggle-org-html-export-on-save ()
  (interactive)
  (if (memq &#39;org-html-export-to-html after-save-hook)
      (progn
        (remove-hook &#39;after-save-hook &#39;org-html-export-to-html t)
        (message &amp;quot;Disabled org html export on save for current buffer...&amp;quot;))
    (add-hook &#39;after-save-hook &#39;org-html-export-to-html nil t)
    (message &amp;quot;Enabled org html export on save for current buffer...&amp;quot;)))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで，toggle-org-html-export-on-saveで，htmlを自動で出力するかどうかを切り替え可能となる．しかし，これだけでは，org文書を保存するたびにブラウザーを手動でreloadしないといけなくなり，面倒である．自動でreloadしてくれるコマンドがあれば便利である．探してみると，これもネットに転がっていた．&lt;/p&gt;

&lt;h2 id=&#34;directoryの内容が変更されると-自動でhtmlを再読込する&#34;&gt;directoryの内容が変更されると，自動でhtmlを再読込する．&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;情報元：&lt;a href=&#34;http://brettterpstra.com/2011/03/07/watch-for-file-changes-and-refresh-your-browser-automatically/&#34; target=&#34;_blank&#34;&gt;Watch for file changes and refresh your browser automatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記サイトに有るrubyのスクリプトが使えそうなので，頂いた．&lt;/li&gt;
&lt;li&gt;rubyのインストールについては，以下のようなサイトを参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shinkuFencer/items/3679cfd966f6a61ccd1b&#34; target=&#34;_blank&#34;&gt;MacにHomeBrew,rbenv,bundlerをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/prgseek/items/ff037cc6134ff9303c67&#34; target=&#34;_blank&#34;&gt;Ruby入門 01.導入（Macに最新版のRubyを入れる）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/TAByasu/items/47c6cfbeeafad39eda07&#34; target=&#34;_blank&#34;&gt;Ruby初学者のRuby On Rails 環境構築【Mac】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;しかし，上記サイトのスクリプトをそのまま使用するとと，reloadの際にページの先頭まで戻ってしまい不便！&lt;/li&gt;

&lt;li&gt;&lt;p&gt;結局，上記サイトのFirefox用のスクリプトを参考に少し書き換えた下記のSafari用のスクリプトを使用すると，reloadの際に先頭まで戻らないので，こちらを使用することとした．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/usr/bin/env ruby
# watch.rb by Brett Terpstra, 2011 &amp;lt;http://brettterpstra.com&amp;gt;
# with credit to Carlo Zottmann &amp;lt;https://github.com/carlo/haml-sass-file-watcher&amp;gt;

trap(&amp;quot;SIGINT&amp;quot;) { exit }

if ARGV.length &amp;lt; 2
puts &amp;quot;Usage: #{$0} watch_folder keyword&amp;quot;
puts &amp;quot;Example: #{$0} . mywebproject&amp;quot;
exit
end

dev_extension = &#39;dev&#39;
filetypes = [&#39;css&#39;,&#39;html&#39;,&#39;htm&#39;,&#39;php&#39;,&#39;rb&#39;,&#39;erb&#39;,&#39;less&#39;,&#39;js&#39;]
watch_folder = ARGV[0]
keyword = ARGV[1]
puts &amp;quot;Watching #{watch_folder} and subfolders for changes in project files...&amp;quot;

while true do
     files = []
     filetypes.each {|type|
files += Dir.glob( File.join( watch_folder, &amp;quot;**&amp;quot;, &amp;quot;*.#{type}&amp;quot; ) )
                    }
     new_hash = files.collect {|f| [ f, File.stat(f).mtime.to_i ] }
     hash ||= new_hash
     diff_hash = new_hash - hash

     unless diff_hash.empty?
     hash = new_hash

     diff_hash.each do |df|
         puts &amp;quot;Detected change in #{df[0]}, refreshing&amp;quot;
     %x{osascript&amp;lt;&amp;lt;ENDGAME
            tell app &amp;quot;Safari&amp;quot; to activate
            tell app &amp;quot;System Events&amp;quot;
                 keystroke &amp;quot;r&amp;quot; using command down
            end tell
ENDGAME
       }
     end
     end

     sleep 1
     end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;このスクリプトにwatch_safari.rbという名前をつけてパスが通っている/usr/local/binに保存し，chomod a+x watch_safari.rbとして実行権限を付けた．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usage: /usr/local/bin/watch_safari.rb watch_folder keyword&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;パスを通しておけば，watch_safari.rb watch_folder keyword で大丈夫&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/Data/Hoge/Fuga/hogefuga.orgを書いているとすると以下のようにそのディレクトリをみはらせておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/Hoge
$ watch_safari.rb Hoge hogefuga.html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;org-modeでhogefuga.orgを書きはじめるときに，M-x toggle-org-html-export-on-save として保存するたびに自動的に新たなhtmlがexportされるようにする．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最初だけは，C-e h oでhtmlをexportして，safariでhogefuga.htmlを開いておく．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以降は，hogefuga.org文書を保存するたびに，現在見ている場所に戻った状態で最新のhtmlに更新されるようになる．便利である．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上はOSX上のSafariを使用している場合であるが，他のブラウザーでも少し変更するだけで同じことができるはずである．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Org-modeで再帰的にsubtreeを絞ったり広げたりする（recursive-narrow）</title>
      <link>/post/org-mode_recursive-narrow/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-mode_recursive-narrow/</guid>
      <description>

&lt;p&gt;org-modeで文章を書いているときに，他のsubtreeが邪魔で消したくなることがある．そして必要になれば，また，もとに戻すことができれば便利である．これを実現してくれるパッケージが&lt;a href=&#34;https://github.com/nflath/recursive-narrow&#34; target=&#34;_blank&#34;&gt;recursive-narrow&lt;/a&gt;である．&lt;/p&gt;

&lt;h2 id=&#34;インストールと設定&#34;&gt;インストールと設定&lt;/h2&gt;

&lt;p&gt;インストールは例によって，init.orgに以下のように書き込むだけである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package recursive-narrow
  :ensure t)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでインストールと設定は終了である．&lt;/p&gt;

&lt;h2 id=&#34;使用法&#34;&gt;使用法&lt;/h2&gt;

&lt;p&gt;使い方も実に簡単であり，&amp;rdquo;C-x n n&amp;rdquo;で現在カーソルがあるsubtree以下のみが表示されるようになり，&amp;rdquo;C-x n w&amp;rdquo;で元の表示に戻る．これではよくわからないので，実際の画像を示す．まず，最初の画像では全体の画面が表示されており，1951行目の「Org-modeで再帰的に」の行にカーソルがある．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/narrow-1.jpg&#34; &gt;

&lt;img src=&#34;/img/narrow-1.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ここで，&amp;rdquo;C-x n n&amp;rdquo;とやると，次の画面のようになる．つまり，1951行目以降のsubtreeのみが表示される．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/narrow-2.jpg&#34; &gt;

&lt;img src=&#34;/img/narrow-2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;次にカーソルを1962行目の「インストールと設定」に移動する（画像ではすでに移動済み）．そして，再度&amp;rdquo;C-x n n&amp;rdquo;とやると，以下の画像のようになる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/narrow-3.jpg&#34; &gt;

&lt;img src=&#34;/img/narrow-3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;つまり，「インストールと設定」のsubtreeのみの表示となるわけである．集中したい領域だけが表示されて，効率よく入力できる．&lt;/p&gt;

&lt;p&gt;広い領域の表示が必要となれば，&amp;rdquo;C-x n w&amp;rdquo;とやると，1つ前の画像の状態に戻る．そして，もう一度&amp;rdquo;C-x n w&amp;rdquo;とやると，最初の状態に戻る．なんということはないのであるが，便利である．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Org-modeでhtml exportの際のthemeについて</title>
      <link>/post/org-html-export-theme/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-html-export-theme/</guid>
      <description>

&lt;p&gt;org-modeで文書を書いてhtmlにexportすると，素のままでは，なんの愛想もない．特にいくつかの項目をまとめた要約などを並べていくときは，side columnなどがあって，すぐに行きたいところに飛べるようになっていると嬉しい．ということで，今回はorg-modeをhtmlにexportするときのthemeがテーマである．．．．．&lt;/p&gt;

&lt;p&gt;とにかく，たくさんのthemesが存在する．まずは以下のサイトをチェック，というか以下を読めばこのブログは読まなくても良いような．．．(^^;;;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sambatriste/items/2dc9f81cbf1e82d7429a&#34; target=&#34;_blank&#34;&gt;org-modeのHTMLテーマ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sambatriste/items/c8e70368ee5fd092096b&#34; target=&#34;_blank&#34;&gt;org-modeのHTMLテーマ第2弾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fniessen/org-html-themes#how-to-export-org-mode-files-into-awesome-html-in-2-minutes&#34; target=&#34;_blank&#34;&gt;How to export Org mode files into awesome HTML in 2 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thi-ng/org-spec&#34; target=&#34;_blank&#34;&gt;org-spec&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私のお気に入りは，ReadTheOrg（上記の1, 3にある）とorg-spec（上記の4）である．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;readtheorg&#34;&gt;ReadTheOrg&lt;/h2&gt;

&lt;p&gt;これは&lt;a href=&#34;https://docs.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34;&gt;Read the Docs&lt;/a&gt;で使われているthemeのcloneである．一番簡単な使い方は，3にあるようにsetup fileをorg fileのpreambleに書いておくことである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あるいは，3からOrg-HTML themes projectをダウンロードしてきて解凍しローカルの&amp;rdquo;setup file&amp;rdquo;へのパスを書き込めば，ネットの接続に依存せずにexportできるようになる．たとえば，/Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setupに設定ファイルがあるとすると以下のようにすれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+SETUPFILE: /Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下に研究会で発表するスライド原稿を作る下準備として，実際に10個の論文をまとめたorg fileの一部を掲示しておく．左に論文のタイトルが並び，見ている論文の小見出しが自動的に展開される．subheadの色も設定されており，読みやすい．デザインもプロっぽい印象である．書いた内容にかかわらず，なんとなく賢くなったような気分になれる（笑）．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/ReadTheOrg.jpg&#34; &gt;

&lt;img src=&#34;/img/ReadTheOrg.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;org-spec&#34;&gt;&lt;a href=&#34;https://github.com/thi-ng/org-spec&#34; target=&#34;_blank&#34;&gt;org-spec&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;An Org-mode template for technical specification documents and HTML publishing. とのことで，技術よりのthemeである．特徴としては，Ditaa, Graphviz &amp;amp; PlantUMLなどによりテキストベースで図が書ける．表に対応，自動的にアップデートするフィールド，PDF生成にも対応，コードブロックの基本的なsyntax highlightingなどがある．実際の例として&lt;a href=&#34;https://demo.thi.ng/org-spec/&#34; target=&#34;_blank&#34;&gt;https://demo.thi.ng/org-spec/&lt;/a&gt;がある．&lt;/p&gt;

&lt;p&gt;こちらの使い方は少しだけ面倒である．リンク先からorg-specをダウンロードして解凍する．ここで，style.cssが/Hoge/Fuga/org-spec-master/css/style.cssに保存されたとする．ダウンロードして来たファイルに含まれているindex.orgに全て書いてあるので，それを真似てorg fileのpreambleに次のように書いておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+HTML_HEAD: &amp;lt;link href=&amp;quot;http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
#+HTML_HEAD: &amp;lt;link href=&amp;quot;/Hoge/Fuga/org-spec-master/css/style.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
#+AUTHOR: taipapa
#+EMAIL: your@mail.address

#+HTML: &amp;lt;div class=&amp;quot;outline-2&amp;quot; id=&amp;quot;meta&amp;quot;&amp;gt;
| *Author* | {{{author}}} ({{{email}}})    |
| *Date*   | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: &amp;lt;/div&amp;gt;

#+TOC: headlines 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下に前述の論文のまとめをこのcssでexportしたものを掲示しておく．印象がかなり変わると思う．subheadなどは最初から展開されている．ReadTheOrgよりもビジネスライクな感じであるが，よりスマートな気もする．その日の気分によって，この2つを使い分けている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-spec.png&#34; &gt;

&lt;img src=&#34;/img/org-spec.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;以上あげた2つ以外にも無数のthemeが存在する．また，自分でthemeを作ってしまう剛の者もいらっしゃるので，あちこちを探してみるのも一興．．．(^o^)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）</title>
      <link>/post/html_export/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0900</pubDate>
      <guid>/post/html_export/</guid>
      <description>

&lt;p&gt;学会発表や論文作成にあたっては，当然のことながら，その分野の他の研究者の論文を読んでまとめるなどの作業を行う．そこで，論文の要旨などをorg-modeにざっとまとめておくと，pdfにもhtmlにもtextにもexport出来て便利である．pdfは印刷に向いているが，htmlは多くの論文をいっぺんに見るのに向いており，また，compileの時間もpdfより圧倒的に速い．また，色を変えたり，ハイライトしたりするのもhtmlなら容易である．そこで，今回は，org-modeからhtmlへexportする際の有用な小技について書いてみたい．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;org-macros&#34;&gt;&lt;a href=&#34;https://github.com/fniessen/org-macros&#34; target=&#34;_blank&#34;&gt;Org Macros&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;フォントの色を変更する方法はいろいろあるが，ハイライトや背景の色の変更までできるこの &lt;a href=&#34;https://github.com/fniessen/org-macros&#34; target=&#34;_blank&#34;&gt;Org Macros&lt;/a&gt;が一番便利である．内容は，org-modeの便利なマクロ集である．リンク先からダウンロードして，適当なところに保存し，解凍しておく．ここでは，/Users/taipapa/hoge/fuga/org-macros.setupに置くことにする．使い方は簡単で上記のwebsiteに書いてあるとおり，各org fileの先頭に以下のように記述してorg-macros.setupの場所を教えてやれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+INCLUDE: /Users/taipapa/hoge/fuga/org-macros.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけである．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;注意事項としては，このブログはox-hugoで書いているが，ox-hugoの場合は文書の先頭に上記を書いても効かない．各ポストのpropertyのあとに書いておけば効く．各ポストごとに設定するようになっているらしい．．．．．（全国15人？ぐらいの人にしか意味のない注意書きである）&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;上記に関しては-ox-hugoの作者であるkaushal-modi氏から以下のような指摘を頂いた-12月19日追記&#34;&gt;上記に関しては，ox-hugoの作者であるKaushal Modi氏から以下のような指摘を頂いた．（12月19日追記）&lt;/h3&gt;

&lt;div class=&#34;panel&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;Can you try using #+setupfile instead of #+include? As an example, here is my blog Org source that I export using ox-hugo ( &lt;a href=&#34;https://gitlab.com/kaushalm&#34; target=&#34;_blank&#34;&gt;https://gitlab.com/kaushalm&lt;/a&gt;&amp;hellip; ), and here is the setup file tha t I &amp;ldquo;include&amp;rdquo; using the more appropriate #+setupfile ( &lt;a href=&#34;https://gitlab.com/kaushalm&#34; target=&#34;_blank&#34;&gt;https://gitlab.com/kaushalm&lt;/a&gt;&amp;hellip; ).&lt;/p&gt;

&lt;p&gt;As you see, I use a lot of Org macros, and they all work in my &amp;ldquo;one post per subtree&amp;rdquo; flow.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ということで，ox-hugoの場合は，以下のように文書の先頭に書いておけば，one-post per subtreeの投稿全てにorg-macroが効くことを確認した．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+setupfile: /Users/taipapa/hoge/fuga/org-macros.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんなブログにまで目を通してコメントしてくれるのには驚いた．親切な方である．日本語が読める人なのかとも思ったが，どうやらGoogleの翻訳を利用されているようだ．このページだと，&lt;a href=&#34;https://translate.google.com/translate?depth=1&amp;amp;sl=auto&amp;amp;sp=nmt4&amp;amp;tl=en&amp;amp;u=https://taipapamotohus.com/post/html%5Fexport/&amp;amp;xid=17259,1500004,15700019,15700124,15700149,15700186,15700190,15700201,15700237,15700242#comment-4245099680&#34; target=&#34;_blank&#34;&gt;A Perfect Autumn Day&lt;/a&gt;に行くと翻訳版を見ることができる．その翻訳レベルにも今更ながら感心した．．．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;残念ながら，LaTeXへのexportでは，この方法による色の変更などは（現在のところ）効かない．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いくつか使い方の例をあげておく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;{{{color(blue, 青くなるかな？)}}}
*{{{color(blue, ボールドで青くなるかな？)}}}*
{{{highlight(yellow, 黄色にハイライトされるかな？)}}}
*{{{highlight(yellow, 黄色にハイライトされて文字はボールドになるかな？)}}}*
{{{bgcolor(cyan, 背景がシアンになるかな？)}}}
*{{{bgcolor(cyan, 背景がシアンになって文字はボールドになるかな？)}}}*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが以下のように表示される．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color: blue&#34;&gt; 青くなるかな？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span style=&#34;color: blue&#34;&gt; ボールドで青くなるかな？&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;background-color: yellow;&#34;&gt; 黄色にハイライトされるかな？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span style=&#34;background-color: yellow;&#34;&gt; 黄色にハイライトされて文字はボールドになるかな？&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&#34;background-color: cyan;&#34;&gt; 背景がシアンになるかな？&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;div style=&#34;background-color: cyan;&#34;&gt; 背景がシアンになって文字はボールドになるかな？&lt;/div&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記以外にも多くのマクロが含まれており，そちらも人によっては有用かもしれない．少しだけ例をあげておく．以下はパネルの例．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;{{{begin_panel}}} Panel example This is a formatted block of text… {{{end_panel}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが，
&lt;div class=&#34;panel&#34;&gt;&lt;p&gt; Panel example This is a formatted block of text… &lt;/p&gt;&lt;/div&gt;
  となる．マニュアルでは以下の使い方を薦めている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_panel
*Panel example* \\
This is a formatted block of text...
#+end_panel
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;panel&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Panel example&lt;/strong&gt; &lt;br /&gt;
 This is a formatted block of text&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;なお，org-modeのマクロ自体に関しては，org-modeのマニュアルの &lt;strong&gt;12.5 Macro replacement&lt;/strong&gt; を参考にしていただきたい．&lt;/p&gt;

&lt;h2 id=&#34;exporting-org-mode-to-html-in-place-coloring&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/21340380/exporting-org-mode-to-html-in-place-coloring&#34; target=&#34;_blank&#34;&gt;Exporting org-mode to HTML: In-place coloring&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;フォントの色を変える別の方法である．リンク先にある通り，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;     この文章は， *@@html:&amp;lt;font color = &amp;quot;blue&amp;quot;&amp;gt;@@青のボールド@@html:&amp;lt;/font&amp;gt;@@*になって欲しい！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが以下のように表示される．&lt;br /&gt;
この文章は， &lt;strong&gt;&lt;font color = &#34;blue&#34;&gt;青のボールド&lt;/font&gt;&lt;/strong&gt; になって欲しい！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;org-modeのマニュアルの &lt;strong&gt;12.9.5 Quoting HTML tags&lt;/strong&gt; も参考のこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらは設定を必要としないが，やはり，最初に説明したマクロの方がいろいろ出来て便利である．&lt;/p&gt;

&lt;p&gt;次回は，htmlをexportする際のCSSについてまとめてみたい．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tufte-LaTeXとtufte-org-modeについて</title>
      <link>/post/tufte/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0900</pubDate>
      <guid>/post/tufte/</guid>
      <description>

&lt;p&gt;以前の記事（&lt;a href=&#34;../org-mode_paper_1&#34;&gt;Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）&lt;/a&gt;）にも書いたが，Tufte−LaTeXなるものを愛用している．今回はこれについてもう少し詳しく書いてみたい．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;tufte-latex&#34;&gt;&lt;a href=&#34;https://tufte-latex.github.io/tufte-latex/&#34; target=&#34;_blank&#34;&gt;Tufte-LaTeX&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.edwardtufte.com/tufte/index&#34; target=&#34;_blank&#34;&gt;Edward R. Tufte&lt;/a&gt;によって作られたページレイアウトのためのlatex packageである．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．&lt;/li&gt;
&lt;li&gt;さて，このスタイルが何の役に立つかというと，報告書の作成の際に図を入れたりするときに，latexのfloatを使うと案外思うところに挿入されないことがある．このスタイルだと，図は少し小さくなるが，きちんと横に納まってくれるのがよい．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tufte-latex.github.io/tufte-latex/&#34; target=&#34;_blank&#34;&gt;Tufte-LaTeX&lt;/a&gt;のサイトには，&amp;rdquo;the style of Edward R. Tufte and Richard Feynman&amp;rdquo;と書かれている．ん，と思って調べてみると，やはり，あの物理学者のファインマンのことであった．興味のある方は，The Feynman-Tufte Principleでググってみると面白いかもしれない．&lt;/li&gt;
&lt;li&gt;以前の記事（&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）&lt;/a&gt;）に書いたようにtexliveをインストールしてあれば，tufte-latexは一緒にインストールされているので，新たにインストールする必要はない．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tufte-org-mode&#34;&gt;&lt;a href=&#34;https://github.com/tsdye/tufte-org-mode&#34; target=&#34;_blank&#34;&gt;tufte-org-mode&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tsdye/tufte-org-mode/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;tufte-org-mode&lt;/a&gt;は，上述のlatexのtufte classをorg-modeから使えるようにした有り難いパッケージである．このおかげでlatexの記法を意識することなく，org-modeで普通に文章を書いていき，最後に後述する如く，オマジナイを唱えればTufte styleのpdfができあがる．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;下記の2つの設定で使えるようになる．init.orgでの設定の順番はどちらが先でも動く．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tufte-org-modeのインストールと設定&#34;&gt;tufte-org-modeのインストールと設定&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;以下のようにinit.orgに書き込んで設定する．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ox-tufte-latex.elは上記の &lt;a href=&#34;https://github.com/tsdye/tufte-org-mode&#34; target=&#34;_blank&#34;&gt;tufte-org-mode&lt;/a&gt;からダウンロードしてローカルに置いてインストールしている．パスは各自の環境に合わせて変更していただきたい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(quelpa
 &#39;(ox-tufte-latex :fetcher file :path &amp;quot;/path/to/ox-tufte-latex.el&amp;quot;)
 )
(use-package ox-tufte-latex)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;quelpaは，use-packageでうまくインストール出来ないときに重宝する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;quelpaについては以下を参照&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/quelpa/quelpa&#34; target=&#34;_blank&#34;&gt;Quelpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emacs.rubikitch.com/quelpa/&#34; target=&#34;_blank&#34;&gt;quelpa.el : 【本邦初公開】MELPAを改善した新しいパッケージ管理システム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tadsan/items/99bd9a5bbdb36def13e2&#34; target=&#34;_blank&#34;&gt;CaskからQuelpaに移行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;org-modeでtufte-latexの設定&#34;&gt;org-modeでtufte-latexの設定&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ox-latexの設定などは以前の記事（&lt;a href=&#34;../org-mode_paper_1&#34;&gt;Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）&lt;/a&gt;）に書いたようにinit.orgに記述しておく．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下のようにinit.orgに書き込んで設定する．これは以前の記事（&lt;a href=&#34;../org-mode_paper_1&#34;&gt;Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）&lt;/a&gt;）と重複するが，念のためにここにも書いておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
;; tufte-handout class for writing classy handouts and papers
(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;tufte-handout&amp;quot;
               &amp;quot;\\documentclass[twoside,nobib]{tufte-handout}
                                   [NO-DEFAULT-PACKAGES]
                                                                    \\usepackage{zxjatype}
                                                                    \\usepackage[hiragino-dx]{zxjafont}&amp;quot;
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)))
;; tufte-book class
(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;tufte-book&amp;quot;
               &amp;quot;\\documentclass[twoside,nobib]{tufte-book}
                                  [NO-DEFAULT-PACKAGES]
                                                                   \\usepackage{zxjatype}
                                                                    \\usepackage[hiragino-dx]{zxjafont}&amp;quot;
               (&amp;quot;\\part{%s}&amp;quot; . &amp;quot;\\part*{%s}&amp;quot;)
               (&amp;quot;\\chapter{%s}&amp;quot; . &amp;quot;\\chapter*{%s}&amp;quot;)
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)
               (&amp;quot;\\paragraph{%s}&amp;quot; . &amp;quot;\\paragraph*{%s}&amp;quot;)))
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-C-c-C-e.jpg&#34; &gt;

&lt;img src=&#34;/img/org-C-c-C-e.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ここで，l oと打つと普通（Tufte styleではない）のpdfがオープンされてしまう．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tufte styleのpdfを得るためには，T pと打って，Export to Tufte LaTeX の中からAs PDF file and openを選択しなければならない．これで，原稿が得られ，skimでオープンされる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tufteの使用の実例&#34;&gt;tufteの使用の実例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;それでは実例を示してみる．以下のような書類を作成し，Tufte_test.orgとして保存する．hoge_fuga.jpgなどの画像は全てTufte_test.orgファイルと同じdirectoryにあるものとする．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略&amp;hellip;..(^^;;;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;:offset -8inによって，図の位置を上にずらしてバランスをとるようにしているのにご注意いただきたい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_CLASS: tufte-handout
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=0.6in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+LINK_UP:
#+LINK_HOME:
#+OPTIONS: author:nil date:nil

#+begin_fullwidth
\centering
#+LATEX: \huge{\textbf{hoge/fugaによる相補的な治療における高難度症例の治療と成績}}
\vspace{0.5cm}\\
#+LATEX: \normalsize{taipapa, 織田信長, 豊臣秀吉, 徳川家康}\\
\vspace{0.5cm}\\
#+LATEX: \normalsize{hogefuga大学大学院 hogefuga研究科 hogefuga分野}
#+end_fullwidth

* *背景と目的*
hogeとfugaを比較し，治療成績を比較する．
​* *結果*
まず，hogefugaの軽症例の画像を呈示する (*Fig. [[hoge_fuga2]]*)．

\vspace{0.25cm}

そのころわたくしは、モリーオ市の博物局に勤めて居りました。

十八等官でしたから役所のなかでも、ずうっと下の方でしたし俸給もほんのわずかでしたが、受持ちが標本の採集や整理で生れ付き好きなことでしたから、わたくしは毎日ずいぶん愉快にはたらきました。殊にそのころ、モリーオ市では競馬場を植物園に拵え直すというので、その景色のいいまわりにアカシヤを植え込んだ広い地面が、切符売場や信号所の建物のついたまま、わたくしどもの役所の方へまわって来たものですから、わたくしはすぐ宿直という名前で月賦で買った小さな蓄音器と二十枚ばかりのレコードをもって、その番小屋にひとり住むことになりました。わたくしはそこの馬を置く場所に板で小さなしきいをつけて一疋の山羊を飼いました。毎朝その乳をしぼってつめたいパンをひたしてたべ、それから黒い革のかばんへすこしの書類や雑誌を入れ、靴もきれいにみがき、並木のポプラの影法師を大股にわたって市の役所へ出て行くのでした。

あのイーハトーヴォのすきとおった風、夏でも底に冷たさをもつ青いそら、うつくしい森で飾られたモリーオ市、郊外のぎらぎらひかる草の波。

またそのなかでいっしょになったたくさんのひとたち、ファゼーロとロザーロ、羊飼のミーロや、顔の赤いこどもたち、地主のテーモ、山猫博士のボーガント・デストゥパーゴなど、いまこの暗い巨きな石の建物のなかで考えていると、みんなむかし風のなつかしい青い幻燈のように思われます。では、わたくしはいつかの小さなみだしをつけながら、しずかにあの年のイーハトーヴォの五月から十月までを書きつけましょう。

\vspace{0.25cm}

ついで，hogefugaの重症例の画像を呈示する (*Fig. [[hoge_fuga]]*)．

#+NAME: hoge_fuga2
#+caption: hoge-fuga（軽症例である）
#+attr_latex: :float margin :width 2.8in :offset -8in
#+attr_latex: :vertical-alignment t
[[./hoge_fuga2.jpg]]

#+NAME: hoge_fuga
#+caption: hoge-fuga（重症例である）
#+attr_latex: :float margin :width 2.8in :offset -2in
#+attr_latex: :vertical-alignment t
[[./hoge_fuga.jpg]]


* *結論*
hogefugaによる治療は有効である．
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e T pと打てば，以下のようなpdfがskimで開かれる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Tufte_test_v5.jpg&#34; &gt;

&lt;img src=&#34;/img/Tufte_test_v5.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上述のように，:offset の部分で図の位置を調整している．これなしだと，かなり下の方に位置してしまう．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なかなか良い感じになっている．(^o^)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;今回は，Tufte styleの紹介であった．実は，このスタイルを手術所見を書くのに使用している．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RをMac OSX (Sierra)にbrewでinstallしていて，upgradeしてハマったときの対処法</title>
      <link>/post/r_homebrew_update_error/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0900</pubDate>
      <guid>/post/r_homebrew_update_error/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.r-project.org&#34; target=&#34;_blank&#34;&gt;R&lt;/a&gt;とは，オープンソース・フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である（Wikipediaより）．org-modeと同じくらい必要不可欠なRではあるが，定期的にupdateする必要がある．いや，まぁ，したほうが良い，というか，しないと新しいパッケージが試せなかったりするので，しないではいられない．しかし，updateすると，たいていどこかでハマる．そこで，今回は，ハマったときの対処法を自分のためにまとめておくことにする．ハマるのはbioconductorの方が多いような気がする．ちなみに当方の環境は，MacBook Pro (15-inch, Late 2016) macOS Sierra 10.12.6である．先日もRを3.5.1にupdateしてハマったばかりである&amp;hellip;..(^^;;;&lt;/p&gt;

&lt;h2 id=&#34;gccのリンク絡みのトラブル&#34;&gt;gccのリンク絡みのトラブル&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;大体は以下で直ることが多い（&lt;a href=&#34;https://github.com/Homebrew/homebrew-science/issues/5587&#34; target=&#34;_blank&#34;&gt;r has dependency on gcc@6, but only lists gcc (which has updated to 7) #5587&lt;/a&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew link --overwrite gcc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xmlが入らない&#34;&gt;XMLが入らない&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;XMLを入れるのが目的ではなく，なにか別のパッケージをインストールしようとして，それがXMLに依存しており，XMLを入れようとしてハマることが多いと思う．エラーメッセージは，configure: error: “libxml not found”である．しかし，homebrewで，brew listしてみると，libxml2はインストールされている．このあたりは，&lt;a href=&#34;https://medium.com/biosyntax/installing-r-package-xml-on-macos-10-13-6-1738146d4ee0&#34; target=&#34;_blank&#34;&gt;Installing R package XML on MacOS 10.13.6&lt;/a&gt;と同じである．対処法は，同サイトや引用元の&lt;a href=&#34;https://stackoverflow.com/questions/40682615/cannot-install-xml-package-in-r&#34; target=&#34;_blank&#34;&gt;Cannot install XML package in r&lt;/a&gt;にある通り，以下のようにコンパイラーに正しいxml2-configの場所を教えてやれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Sys.setenv(XML_CONFIG = &amp;quot;/usr/local/Cellar/libxml2/2.9.7/bin/xml2-config&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお，上記を入力するのはRのコンソールである．通常のterminalにexportで入力しても効かないので注意すること！（これでどれだけ時間を無駄にしたことか．．．(ToT)）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cairoなどのインストール時に-include-and-lt-x11-xlib-dot-h-and-gt-でハマる&#34;&gt;Cairoなどのインストール時に，#include &amp;lt;X11/Xlib.h&amp;gt; でハマる．&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;lsquo;X11/Xlib.h&amp;rsquo; file not found, #include &amp;lt;X11/Xlib.h&amp;gt; のようなエラーが出てコンパイルできないことがある（例えば，&amp;rdquo;Cairo&amp;rdquo; packageなど）．要するにXlib.hの在り処が分からんということである．mdfind（Mac版のlocate）で探してみると，以下のような結果が得られる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mdfind -name Xlib.h | grep X11
/opt/X11/include/cairo/cairo-xlib.h
/opt/X11/include/X11/Xlib.h
/System/Library/Frameworks/Tk.framework/Versions/8.4/Headers/X11/Xlib.h
/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そこで，目的のXlib.hは，/opt/X11/include/X11/Xlib.hと分かるので，include directoryにこれを含めるように指示すれば良い．これも，前項と同じく，Rのコンソールに入力すること！（これでどれだけ．．．以下同文）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Sys.setenv(C_INCLUDE_PATH = &amp;quot;/opt/X11/include&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで，コンパイルできるようになるはずである．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;どこにX11/Xlib.hが入っているかは，インストールの仕方により色々であろうから，場所を確認してから上記の操作を行うようにする．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なお，ネットのあちこちに，Xquartzをdowngradeすればコンパイルできる，みたいなことが書いてあったが，あれはなんなのだろうか．．．？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rsvgのインストール時に-xcb-shm-dot-pcがないと怒られる&#34;&gt;rsvgのインストール時に，xcb-shm.pcがないと怒られる．&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;こんな感じである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; biocLite(&amp;quot;rsvg&amp;quot;)
...................................
Package xcb-shm was not found in the pkg-config search path.
Perhaps you should add the directory containing `xcb-shm.pc&#39;
to the PKG_CONFIG_PATH environment variable
Package &#39;xcb-shm&#39;, required by &#39;cairo&#39;, not found
Found INCLUDE_DIR and/or LIB_DIR!
Using PKG_CFLAGS=-I/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig/librsvg-2.0.pc
Using PKG_LIBS=-L/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig -lrsvg
------------------------- ANTICONF ERROR ---------------------------
Configuration failed because librsvg-2.0 was not found. Try installing:
​* deb: librsvg2-dev (Debian, Ubuntu, etc)
​* rpm: librsvg2-devel (Fedora, EPEL)
​* csw: librsvg_dev, sunx11_devel (Solaris)
​* brew: librsvg (OSX)
If librsvg-2.0 is already installed, check that &#39;pkg-config&#39; is in your
PATH and PKG_CONFIG_PATH contains a librsvg-2.0.pc file. If pkg-config
is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:
R CMD INSTALL --configure-vars=&#39;INCLUDE_DIR=... LIB_DIR=...&#39;
--------------------------------------------------------------------
ERROR: configuration failed for package ‘rsvg’
​* removing ‘/usr/local/Cellar/r/3.5.1/lib/R/library/rsvg’

The downloaded source packages are in
‘/private/var/folders/rq/hj_634613dbfzs41djqt52y80000gn/T/RtmpzsGqp0/downloaded_packages’
Updating HTML index of packages in &#39;.Library&#39;
Making &#39;packages.html&#39; ... done
警告メッセージ:
install.packages(pkgs = doing, lib = lib, ...) で:
installation of package ‘rsvg’ had non-zero exit status
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;要するに，xcb-shm.pcのあるディレクトリをPKG＿CONFIG＿DIRに追加しろと言ってるので，xcb-shm.pcがどこにあるかをmdfindで探してから，言われるとおり追加する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mdfind -name xcb-shm.pc
/opt/X11/lib/pkgconfig/cairo-xcb-shm.pc
/opt/X11/lib/pkgconfig/xcb-shm.pc
/usr/local/Cellar/cairo/1.14.8/lib/pkgconfig/cairo-xcb-shm.pc
/usr/local/Cellar/cairo/1.14.10/lib/pkgconfig/cairo-xcb-shm.pc
/usr/local/Cellar/cairo/1.14.12/lib/pkgconfig/cairo-xcb-shm.pc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記のように，/opt/X11/lib/pkgconfig/xcb-shm.pcとなっているので，これを追加する．このときも上述のごとく，RのコンソールでSys.setenvを使う．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; Sys.setenv(PKG_CONFIG_PATH = &amp;quot;/opt/X11/lib/pkgconfig&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，rsvgはうまくコンパイルされる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はいきなりのRネタになってしまった．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swiper, ivy, avy, migemoによるEmacsの検索強化</title>
      <link>/post/swiper_migemo/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0900</pubDate>
      <guid>/post/swiper_migemo/</guid>
      <description>

&lt;p&gt;文章を書いている際に，ある単語を検索したくなるようなことがよくある．Emacsでのデフォルトはisearchであるが，今回は，これを強化するpackageを紹介する．また，最近開いたディレクトリ directory をまた開きたいこともよくあることである．これについてもivyによる検索が便利であるので紹介する．例によってネタ元を見たほうが早いかもしれない．．．(^^;;;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;swiper-dot-el&#34;&gt;swiper.el&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照1：&lt;a href=&#34;https://github.com/abo-abo/swiper&#34; target=&#34;_blank&#34;&gt;swiper&lt;/a&gt;  ご本家&lt;/li&gt;
&lt;li&gt;参照2：&lt;a href=&#34;http://emacs.rubikitch.com/swiper/&#34; target=&#34;_blank&#34;&gt;swiper.el: 一覧付き正規表現isearch！C-sを置き換えろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照3：&lt;a href=&#34;https://qiita.com/blue0513/items/c0dc35a880170997c3f5&#34; target=&#34;_blank&#34;&gt;Emacsの補完&amp;amp;検索を超強化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacsでは，C-sに割り当てられたisearchによる正規表現検索がデフォルトで存在する．これをivyを用いて一覧を付加するようにした強化版である．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-and-setup&#34;&gt;Install &amp;amp; setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下を，int.orgに書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package swiper
:ensure t
:config
(defun isearch-forward-or-swiper (use-swiper)
(interactive &amp;quot;p&amp;quot;)
;; (interactive &amp;quot;P&amp;quot;) ;; 大文字のPだと，C-u C-sでないと効かない
(let (current-prefix-arg)
  (call-interactively (if use-swiper &#39;swiper &#39;isearch-forward))))
(global-set-key (kbd &amp;quot;C-s&amp;quot;) &#39;isearch-forward-or-swiper)
)

(use-package ivy
:ensure t
;; :config
;; (fset &#39;ivy--regex &#39;identity)
)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ivyのコメントアウトしている部分については後述する．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使い方&#34;&gt;使い方&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;現在開いているEmacsのバッファで，C-sとするだけでよい．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下図は，ivyを検索しているところだが，下に&amp;rdquo;Swiper&amp;rdquo;と表示されるバッファが表示され，そこに”ivy”と打つと，上の本文の中のivyは黄色でハイライトされる．同時に下のバッファでは，現在見ているivyのある行に下線が引かれ，行数が横に示される．上下のArrow Keyでivyのある行から次の行に飛べる．リターンすれば本文のその行に行ける．非常に便利である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-1a.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-1a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;migemo&#34;&gt;migemo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照1：&lt;a href=&#34;http://0xcc.net/migemo/&#34; target=&#34;_blank&#34;&gt;Migemo: ローマ字のまま日本語をインクリメンタル検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照2：&lt;a href=&#34;https://www.yokoweb.net/2017/03/05/emacs-macos-migemo/&#34; target=&#34;_blank&#34;&gt;【Emacs/macOS】migemoを有効にし、ローマ字のまま日本語検索する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;migemoとは，「ローマ字のまま日本語をインクリメンタル検索するため のツールです。かな漢字変換をすることなく日本語のインクリメン タル検索を快適に行うことができます。」&lt;/li&gt;
&lt;li&gt;一度使い始めるとやみつきになるので，オススメ！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cmigemoのinstall&#34;&gt;cmigemoのinstall&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まず，C言語で再実装されたcmigemoをインストールする．homebrewで簡単にインストールできる．&amp;ndash;HEADのオプションが必要との記載もあるが，なくても同じであった．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew install cmigemo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;migemo-dot-elのinstall-and-setup&#34;&gt;migemo.elのInstall &amp;amp; setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下を，int.orgに書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+BEGIN_SRC emacs-lisp
(use-package migemo
:ensure t
:config
;; C/Migemo を使う場合は次のような設定を .emacs に加えます．
(setq migemo-command &amp;quot;cmigemo&amp;quot;)
(setq migemo-options &#39;(&amp;quot;-q&amp;quot; &amp;quot;--emacs&amp;quot; &amp;quot;-i&amp;quot; &amp;quot;\a&amp;quot;))
(setq migemo-dictionary &amp;quot;/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict&amp;quot;)  ;; 各自の辞書の在り処を指示
(setq migemo-user-dictionary nil)
(setq migemo-regex-dictionary nil)
;; charset encoding
(setq migemo-coding-system &#39;utf-8-unix))
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;avy-migemo-swiperのmigemo対応&#34;&gt;avy-migemo（swiperのmigemo対応）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照１：&lt;a href=&#34;https://github.com/momomo5717/avy-migemo/blob/master/README.jp.org&#34; target=&#34;_blank&#34;&gt;avy-migemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照２：&lt;a href=&#34;https://dev.classmethod.jp/tool/emacs-avy-migemo/&#34; target=&#34;_blank&#34;&gt;avy と migemo を組み合わせたパッケージ avy-migemo.el のご紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照３：&lt;a href=&#34;https://qiita.com/ballforest/items/7810e229d6f771d0ab16&#34; target=&#34;_blank&#34;&gt;avyのmigemo対応およびswiperのmigemo対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記のswiperだけでも十分に便利であるが，swiperをmigemoに対応させることで，更に便利になる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;前述したswiper.elでのコメントアウトした設定部分，つまり，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (fset &#39;ivy--regex &#39;identity)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は，コメントアウトしておかないと，migemo化を無効にしてしまうので注意。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-and-setup-1&#34;&gt;Install &amp;amp; setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下を，int.orgに書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package avy-migemo
:ensure t
:config
(avy-migemo-mode 1)
(setq avy-timeout-seconds nil)
(require &#39;avy-migemo-e.g.swiper)
(global-set-key (kbd &amp;quot;C-M-;&amp;quot;) &#39;avy-migemo-goto-char-timer)
;;  (global-set-key (kbd &amp;quot;M-g m m&amp;quot;) &#39;avy-migemo-mode)
)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使い方-1&#34;&gt;使い方&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;現在開いているEmacsのバッファで，C-sとするだけでよい．&lt;/li&gt;
&lt;li&gt;下図は，&amp;rdquo;taiou&amp;rdquo;，つまり，「対応」を検索しているところである．migemo化する前と同じようにローマ字で日本語が検索できる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当たり前だが，漢字を入力しても検索できる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-2a.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-2a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;最近開いたディレクトリを開く&#34;&gt;最近開いたディレクトリを開く&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照：&lt;a href=&#34;http://pragmaticemacs.com/emacs/open-a-recent-directory-in-dired-revisited/&#34; target=&#34;_blank&#34;&gt;OPEN A RECENT DIRECTORY IN DIRED: REVISITED&lt;/a&gt;　ネタ元&lt;/li&gt;
&lt;li&gt;ivyを使って最近開いたディレクトリを動的に探索する方法をコード化してくれているので紹介する．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下のコードをinit.orgに書き込めば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(defun bjm/ivy-dired-recent-dirs ()
  &amp;quot;Present a list of recently used directories and open the selected one in dired&amp;quot;
  (interactive)
  (let ((recent-dirs
         (delete-dups
          (mapcar (lambda (file)
                    (if (file-directory-p file) file (file-name-directory file)))
                  recentf-list))))

    (let ((dir (ivy-read &amp;quot;Directory: &amp;quot;
                         recent-dirs
                         :re-builder #&#39;ivy--regex
                         :sort nil
                         :initial-input nil)))
      (dired dir))))

(global-set-key (kbd &amp;quot;C-x C-d&amp;quot;) &#39;bjm/ivy-dired-recent-dirs)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-x C-dすれば，下図のように，最近開いたディレクトリが表示され，その中から行きたいディレクトリを選んで，リターンすれば良い．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/directory-1a.jpg&#34; &gt;

&lt;img src=&#34;/img/directory-1a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上，今回は小ネタだが非常に有用なものばかりを紹介した．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsとskimで，latexのソースとpdfの間を行ったり来たり</title>
      <link>/post/synchronization/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0900</pubDate>
      <guid>/post/synchronization/</guid>
      <description>

&lt;p&gt;以前の記事（&lt;a href=&#34;../beamer&#34;&gt;beamerでスライド原稿用pdfを作成する（その１）&lt;/a&gt;）で，Emacsでbeamerを用いてlatexのソースを書いてコンパイルし，スライド原稿としてpdfを出力する方法をまとめた．この際に，pdfの特定の箇所がlatexのソースでどこに当たるのかがわかったり，逆に，latexのソースの特定の箇所がpdf上のどこに当たるのかがわかったりすると便利である．今回はそれについてまとめる．なお，auctexの全般的な設定については，TeXWikiの&lt;a href=&#34;https://texwiki.texjp.org/?AUCTeX#h32722ec&#34; target=&#34;_blank&#34;&gt;macOS での設定例&lt;/a&gt; を参照していただきたい．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://ryogan.org/blog/2015/12/30/mac-os-x-el-capitan-の-auctex-の設定/&#34; target=&#34;_blank&#34;&gt;Mac OS X El Capitan の AUCTeX の設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://texwiki.texjp.org/?Emacs#e9c08b3d&#34; target=&#34;_blank&#34;&gt;skimとの連携&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/&#34; target=&#34;_blank&#34;&gt;AUCTeX の設定と便利な機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://sourceforge.net/p/skim-app/wiki/TeX%5Fand%5FPDF%5FSynchronization/&#34; target=&#34;_blank&#34;&gt;TeX_and_PDF_Synchronization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;backward-search&#34;&gt;backward search&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;こちらのほうが便利なので最初に説明する．&lt;/li&gt;
&lt;li&gt;skimで表示されたpdf上の特定の箇所に該当するLaTeX文書の箇所を探して示してくれる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この機能を可能にするには，skimの環境設定を開いて「同期する」の初期値を「カスタム」とし，コマンドのところに以下のように打ち込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ /usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1/bin/emacsclient
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;defaultでは初期値に「Emacs」となっており，本来ならこれで動くはずだが，homebrewで最新のEmacsをinstallしたために，もともと入っているemacsとはversionが異なる．つまり，サーバーとして起動しているEmacsと、使用するEmacsClientのバージョンが異なることになり，このままでは動かない．そこで，homebrewでインストールした方をfull pathで明示的に指示する必要がある．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;引数のところには，以下のように打ち込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ --no-wait +%line &amp;quot;%file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;つまりこうなる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/skim-1.jpg&#34; &gt;

&lt;img src=&#34;/img/skim-1.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一方，Emacsのinit.orgには以下のように記述して，Emacs serverを立ち上げておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
;; Starts the Emacs server
(server-start)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，pdf上の任意の箇所で，Shift-Command-Clickすると，該当するlatex documentの箇所に飛ぶ．&lt;del&gt;もし，Emacsが立ち上がっていなければ，Emacsを立ち上げるところからやってくれる．素晴らしい！&lt;/del&gt; これは確かめてみると勘違いであった．Emacsは立ち上げておかないといけない．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この機能は知ってしまうと，無くてはならないほど便利に感じる機能である．pdfで間違いを見つけたときに，それがlatexソースのどこに相当するかを同定するのは結構面倒であるが，この機能により一発で同定することができる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;該当箇所が少しずれることがあるのが欠点であるが，それでも十分に役に立つ．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;forward-search&#34;&gt;forward search&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;こちらも，backward searchほどではないが，役に立つ．&lt;/li&gt;
&lt;li&gt;Emacs上のlatex document上の特定の箇所に該当するpdfの箇所を探して示してくれる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この機能を可能にするには，init.orgに以下のように記述する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(add-hook &#39;LaTeX-mode-hook
          (function (lambda ()
                      (add-to-list &#39;TeX-command-list
                                   &#39;(&amp;quot;displayline&amp;quot;
                                     &amp;quot;/Applications/Skim.app/Contents/SharedSupport/displayline %n %s.pdf \&amp;quot;%b\&amp;quot;&amp;quot;
                                     TeX-run-discard-or-function t t :help &amp;quot;Forward search with Skim&amp;quot;))
                      )))
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，C-c C-c displayline により，Emacsのlatex document上の特定の箇所に該当するpdfの箇所に飛んでくれる．pdfの該当するところが赤丸で示される（数秒で消える）．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ただし，該当する箇所が結構ずれてしまうことが多い．最近は，beamerでしか使わないので，もしかすると，通常のlatex 文書だと狂いなく示すのかもしれない．まぁ，backward searchと違って， なくても困らない機能である．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeで論文を書く（その4：pandocを利用してorg-modeからword [docx]を文献付きでexportする）</title>
      <link>/post/org-mode_paper_4/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-mode_paper_4/</guid>
      <description>

&lt;p&gt;医学系の多くのジャーナルでは，論文投稿の際のフォーマットを Microsoft Word と指定しているところが多い．．．．．&lt;/p&gt;

&lt;p&gt;いま，一瞬，憤りのあまり意識を失いかけたが，気を取り直して続ける．実際のところ，仕事でもしばしばword文書を要求される．イチからwordで文書を書くのはやりたくないわけで，ふと，org-modeからexportできないかと調べてみた．やはり，同じようなことを考える人はいるもので，エライ人はそれを実現させるべく色々な方法を開発していた．それらの中から，自分で試してみてうまく行った方法をまとめておく．使用するのは， &lt;strong&gt;pandoc&lt;/strong&gt; とそれをorg−modeから利用するための &lt;strong&gt;ox-pandoc&lt;/strong&gt; である．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;ox-pandoc&#34;&gt;ox-pandoc&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照サイト1：本家　&lt;a href=&#34;https://github.com/kawabata/ox-pandoc&#34; target=&#34;_blank&#34;&gt;ox-pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照サイト2：&lt;a href=&#34;http://kitchingroup.cheme.cmu.edu/blog/2015/06/11/ox-pandoc-org-mode-+-org-ref-to-docx-with-bibliographies/&#34; target=&#34;_blank&#34;&gt;ox-pandoc - org-mode + org-ref to docx with bibliographies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照サイト3：もっと本家　&lt;a href=&#34;https://pandoc.org&#34; target=&#34;_blank&#34;&gt;Pandoc   a universal document converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pandoc自体の説明は略．ご存知，フォーマット変換のスイスアーミーナイフ．&lt;/li&gt;
&lt;li&gt;ox-pandocは，pandocを介してorg-mode fileを様々なフォーマットに変換する新しいexporterであり，40種ものフォーマットに変換できる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pandoc 2.0 (or later version)と，bibliography featureを使うならpandoc-citeproc 0.3 (or later)が必要なので，homebrewでインストールする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$  brew install pandoc
$  brew install pandoc-citeproc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.orgには以下のように書き込んで，ox-pandocをインストールし，設定する．use-packageを使うと両方がいっぺんにできて便利である．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package ox-pandoc
  :ensure t
  :config
  ;; default options for all output formats
  (setq org-pandoc-options &#39;((standalone . t)))
  ;; cancel above settings only for &#39;docx&#39; format
  (setq org-pandoc-options-for-docx &#39;((standalone . nil)))
  ;; special settings for beamer-pdf and latex-pdf exporters
  (setq org-pandoc-options-for-beamer-pdf &#39;((pdf-engine . &amp;quot;xelatex&amp;quot;)))
  (setq org-pandoc-options-for-latex-pdf &#39;((pdf-engine . &amp;quot;xelatex&amp;quot;)))
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;latex engineにxelatex以外を使っている場合は，上記の設定をそちらに変更する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以上でorg-mode自体の基本的な設定は終了である．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文書の中で実際に引用された論文のみからなる文献リストを生成する方法&#34;&gt;文書の中で実際に引用された論文のみからなる文献リストを生成する方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;このリスト（bib ファイル）を作成しておかないと，Wordをexportする際にうまくいかない．&lt;/li&gt;
&lt;li&gt;reftex-create-bibtex-fileとbibexportの２つの方法がある．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;reftex-create-bibtex-file&#34;&gt;reftex-create-bibtex-file&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参照サイト：&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html%5Fnode/reftex/BibTeX-Database-Subsets.html&#34; target=&#34;_blank&#34;&gt;reftex-create-bibtex-file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacsの中に最初から入っているコマンドである．&lt;/li&gt;
&lt;li&gt;前回の記事（&lt;a href=&#34;../org-mode_paper_3&#34;&gt;Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化&lt;/a&gt;）の際に作成したhogefuga.orgからpdfをexportした際に同じdirectory内にhogefuga.texも保存されているはずである．これをEmacsでオープンし, &lt;strong&gt;M-x reftex-create-bibtex-file&lt;/strong&gt; と打つ．すると，実際に引用された論文のみからなる文献リストを生成してくれる．この際に名前をどうするかを聞かれるので，適当につける．今回は，extract.bibとした．&lt;/li&gt;
&lt;li&gt;しかし，たまに，reftex-create-bibtex-fileで引用された論文の一部が欠けてしまうことがある．そのようなときは，第２の方法であるbibexportが役に立つ．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bibexport&#34;&gt;bibexport&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト1：&lt;a href=&#34;https://ctan.org/pkg/bibexport&#34; target=&#34;_blank&#34;&gt;bibexport – Extract a BibTEX file based on a .aux file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト2：&lt;a href=&#34;https://tex.stackexchange.com/questions/41821/creating-bib-file-containing-only-the-cited-references-of-a-bigger-bib-file&#34; target=&#34;_blank&#34;&gt;Creating .bib file containing only the cited references of a bigger .bib file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;texliveに含まれているshell script&lt;/li&gt;
&lt;li&gt;文書の中の &lt;strong&gt;\cite&lt;/strong&gt; で引用された文献のみを抽出する．上記のreftex-create-bibtex-fileはtex ファイルが有れば抽出できたが，こちらはaux ファイルを必要とする．したがって，まず，org-modeからpdfをexportし，tex ファイルを作成し，次いで，tex ファイルをlatex でコンパイルしてaux ファイルを作成し，そのaux ファイルに対してbibexportを用いるというややこしいことをする必要がある．&lt;/li&gt;
&lt;li&gt;しかし，reftex-create-bibtex-fileでうまく抽出できないときも，bibexportならうまくいくことが多いので，知っておいて損はない．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使い方は以下を参考&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bibexport --help
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bibexport: a tool to extract BibTeX entries out of .bib files.
usage: bibexport [-h|v|n|c|a|d|s|t] [-b|e|es|ec|o|r file] file...

Basic options:
--------------
 -a, --all                  export the entire .bib files
 -o bib, --output-file bib  write output to file       [default: bibexport.bib]
 -t, --terse                operate silently
 -h, --help                 print this message and exit
 -v, --version              print version number and exit

Advanced options:
-----------------
 -b bst, --bst bst          specifies the .bst style file [default: export.bst]
 -c, --crossref             preserve crossref field               [default: no]
 -n, --no-crossref          remove crossref&#39;d entries             [default: no]
 -e bib, --extra bib        extra .bib file to be used (crossrefs and strings)
 -es bib, --extras bib      extra .bib file to be used (for strings)
 -ec bib, --extrac bib      extra .bib file to be used (for crossrefs)
 -p, --preamble             write a preamble at beginning of output
 -r bib, --replace bib      replace .bib file(s) in the .aux file
 -d, --debug                create intermediate files but don&#39;t run BibTeX
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例えばこんなふうにshellで打つ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bibexport -o extract2.bib hogefuga_English.aux
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pandocのための設定&#34;&gt;pandocのための設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;word fileとして出力しても，スタイルが気に入らない可能性は高い．そこで，予めスタイルファイルを自分好みにしておく．&lt;/li&gt;
&lt;li&gt;参考サイト1：&lt;a href=&#34;https://github.com/jgm/pandoc/wiki/Defining-custom-DOCX-styles-in-LibreOffice-(and-Word)&#34; target=&#34;_blank&#34;&gt;Defining custom DOCX styles in LibreOffice (and Word)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト2：&lt;a href=&#34;https://support.office.com/en-us/article/Customize-styles-in-Word-for-Mac-1ef7d8e1-1506-4b21-9e81-adc5f698f86a&#34; target=&#34;_blank&#34;&gt;Customize styles in Word for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト3：&lt;a href=&#34;https://qiita.com/sky%5Fy/items/5fd5c9568ea550b1d7af&#34; target=&#34;_blank&#34;&gt;ドキュメント変換ツールPandoc：ユーザーズガイドを熟読して分かったマニアックな使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記のサイトを参考にスタイルファイルを作成し，~/.pandocにword用に &lt;strong&gt;reference.docx&lt;/strong&gt; として置く．このテンプレートのフォーマットに従ってword fileが出力される．&lt;/li&gt;
&lt;li&gt;しかし，実は，これが結構面倒くさいのである．念のため自作のものを&lt;a href=&#34;/files/reference.docx&#34;&gt;ここ&lt;/a&gt;に置いておく．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;citation-style-language--csl--の設定&#34;&gt;Citation Style Language (CSL)の設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト1：&lt;a href=&#34;https://citationstyles.org&#34; target=&#34;_blank&#34;&gt;Citation Style Language&lt;/a&gt;  ご本家&lt;/li&gt;
&lt;li&gt;参考サイト2：&lt;a href=&#34;https://github.com/citation-style-language/styles&#34; target=&#34;_blank&#34;&gt;citation-style-language/styles&lt;/a&gt; スタイルの在り処&lt;/li&gt;
&lt;li&gt;参考サイト3：&lt;a href=&#34;https://github.com/citation-style-language/styles/blob/master/stroke.csl&#34; target=&#34;_blank&#34;&gt;citation-style-language/styles/stroke.csl&lt;/a&gt;  今回使用するスタイル&lt;/li&gt;
&lt;li&gt;CSLは学術出版の引用と文献スタイルの書式自動化を促進することを目的としたオープンソースプロジェクト．ありがたく使わせていただく．&lt;/li&gt;
&lt;li&gt;上記の&lt;a href=&#34;https://github.com/citation-style-language/styles/blob/master/stroke.csl&#34; target=&#34;_blank&#34;&gt;参考サイト3&lt;/a&gt;からstroke.cslをダウンロードする．&lt;/li&gt;
&lt;li&gt;stroke.cslをexportの対象のorg fileと同じdirectoryに置いておく．&lt;/li&gt;
&lt;li&gt;これで，&lt;a href=&#34;https://www.ahajournals.org/journal/str&#34; target=&#34;_blank&#34;&gt;Stroke&lt;/a&gt; という雑誌の引用書式に従ったスタイルになってword fileがexportされる．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;英語論文の場合のorg-fileの設定&#34;&gt;英語論文の場合のorg fileの設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ここからは，個々のorg-mode file側の設定である．&lt;/li&gt;
&lt;li&gt;英語の場合は殆どなんの問題もなくexportされる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;早速実例を見てみる．まず下のorg fileをhogefuga_English.orgとして保存する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_CLASS: koma-article
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil
#+LINK_UP:
#+LINK_HOME:

#+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease
#+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa

 \vspace*{-1.5cm}

      \hspace{2.5cm} Department of Hogefuga, Hogefuga University

,* Introduction

Stroke is estimated to be ranked as the second leading cause of death and the third most common cause of permanent disability around the world.\cite{Donnan:2008ax} The proportion of ischemic stroke is more than 90% in all stroke. The underlying metabolomic pathophysiology of ischemic stroke, however, remains poorly understood.

Recently, metabolome analysis using “omics” method has developed. Mass spectrometry (MS) and nuclear magnetic resonance (NMR) spectroscopy have garnered the most use for profiling a large number of metabolites simultaneously.\cite{Lewis:2008uq} These technologies offer comprehensive information about thousands of low-molecular mass compounds (less than 2kDa) including lipids, amino acids, peptides, nucleic acids, organic acids, vitamins, thiols and carbohydrates. Metabolomics renders the metabolic profile of a system, the end points of biological events, and reflect the state of a cell or group of cells at a given time.\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry (GC/MS) is one of the wide-spread techniques, which enables researchers to determine analyte masses with such high precision and accuracy that peptides and metabolites can be identified unambiguously even in complex fluids.\cite{Lewis:2010oq}

The profiling of low molecular weight biochemicals that serve as substrates and products in metabolic pathways is particularly relevant to cardiovascular diseases.\cite{Lewis:2008uq} At present, however, very few studies have been reported on metabolic profiling of stroke. Unlike myocardial infarction, metabolomic changes in the brain are not sufficiently reflected by blood biomarkers due to the presence of the blood-brain barrier and dilution by peripheral blood.\cite{kim2013biomarkers} In addition, most of the studies focused on acute stage of stroke.\cite{Jiang:2011uq,Jung:2011fk,Kimberly:2013mq

#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_6-authors.bst option:-a limit:t

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;何故か *Introductionの前に２つコンマを打たないとうまくhugoでブログにexportされない（理由は不明，ご教示を乞う）．このために画面上 *Introduction の前にコンマが一つ残っているが，もしコピーして試して見るなら，この余分なコンマは除かないとうまくいかないので注意していただきたい．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Emacsで上記のhogefuga_English.orgを開いた状態で，C-c C-e l oとすると，pdfが作成され，下図のようにskimで開かれる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/hogefuga_English-pdf.jpg&#34; &gt;

&lt;img src=&#34;/img/hogefuga_English-pdf.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．&lt;/li&gt;
&lt;li&gt;何故pdfを作成するかというと， &lt;strong&gt;文書の中で実際に引用された論文のみからなる文献リストを生成する&lt;/strong&gt; ためである．pdfと一緒にできたtex ファイルで，reftex-create-bibtex-file もしくは bibexportを使って抽出された文献リストであるextract.bibを作成する．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;実際に行った手順は以下の通りである．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;pdfのexportの際に一緒に生成された &lt;strong&gt;hogefuga_English.tex&lt;/strong&gt; をEmacsで開く．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;M-x reftex-create-bibtex-file&lt;/strong&gt; する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;抽出された文献ファイルをextract.bibと命名し保存&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;しかし，extract.bibは何故か引用された8つの文献のうちの6つしか含まれていなかった．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;そこで，上述のように &lt;strong&gt;bibexport&lt;/strong&gt; を利用することにした．texファイルをxelatexでコンパイルし，できたaux ファイルにbibexportを適用した．&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）&lt;/a&gt;のlatexmkの項を参照のこと．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ latexmk -pvc -pdf -view=none hogefuga_English.tex
$ bibexport -o extract2.bib hogefuga_English.aux
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，８つの文献をすべて含むextract2.bibが生成された．&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;英語論文のword-fileのexport&#34;&gt;英語論文のWord fileのexport&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ようやくWord fileへexportできる段階となった．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記で作成したhogefuga_Engolish.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．多分パスも効くが，この原稿専用のリストなので，同じdirectoryの方が混乱することがないであろう．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl
#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
#+BIBLIOGRAPHY: extract2.bib
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さらに，最後の文献についての以下の部分は削除する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以上で，下図のようになるので，hogefuga_English_WORD.org として保存する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_CLASS: koma-article
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil
#+PANDOC_OPTIONS: csl:/Data/Stroke2018/Survival_CEA_CAS-MN/stroke.csl
#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
#+BIBLIOGRAPHY: extract2.bib
#+LINK_UP:
#+LINK_HOME:

#+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease
#+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa.

         \vspace*{-1.5cm}

              \hspace{3cm} Department of Hogefuga, Hogefuga University

,* Introduction
  Stroke is estimated to be ranked as the second leading cause of
  death and the third most common cause of permanent disability
  around the world.\cite{Donnan:2008ax} The proportion of ischemic
  stroke is more than 90% in all stroke. The underlying metabolomic
  pathophysiology of ischemic stroke, however, remains poorly
  understood.

  Recently, metabolome analysis using “omics” method has
  developed. Mass spectrometry (MS) and nuclear magnetic resonance
  (NMR) spectroscopy have garnered the most use for profiling a large
  number of metabolites simultaneously.\cite{Lewis:2008uq} These
  technologies offer comprehensive information about thousands of
  low-molecular mass compounds (less than 2kDa) including lipids,
  amino acids, peptides, nucleic acids, organic acids, vitamins,
  thiols and carbohydrates. Metabolomics renders the metabolic profile
  of a system, the end points of biological events, and reflect the
  state of a cell or group of cells at a given
  time.\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry
  (GC/MS) is one of the wide-spread techniques, which enables
  researchers to determine analyte masses with such high precision and
  accuracy that peptides and metabolites can be identified
  unambiguously even in complex fluids.\cite{Lewis:2010oq}

  The profiling of low molecular weight biochemicals that serve as
  substrates and products in metabolic pathways is particularly
  relevant to cardiovascular diseases.\cite{Lewis:2008uq} At present,
  however, very few studies have been reported on metabolic profiling
  of stroke. Unlike myocardial infarction, metabolomic changes in the
  brain are not sufficiently reflected by blood biomarkers due to the
  presence of the blood-brain barrier and dilution by peripheral
  blood.\cite{kim2013biomarkers} In addition, most of the studies
  focused on acute stage of
  stroke.\cite{Jiang:2011uq, Jung:2011fk, Kimberly:2013mq}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;*Introductionの前のコンマについては前述のとおりである．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;org-modeからword-fileへのexportの方法&#34;&gt;org-modeからWord fileへのexportの方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, &lt;strong&gt;export via pandoc&lt;/strong&gt; のメニューが見える．そこで，p xとして，export via pandoc &amp;mdash;&amp;gt; to docx and openを選択する．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-C-c-C-e.jpg&#34; &gt;

&lt;img src=&#34;/img/org-C-c-C-e.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;暫く待つと，下図のようにWordが立ち上がって，docx file（ &lt;strong&gt;hogefuga_English_WORD.docx&lt;/strong&gt; ）が開かれる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/hogefuga_English-WORD.jpg&#34; &gt;

&lt;img src=&#34;/img/hogefuga_English-WORD.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全体的なスタイルはまずまずである．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;文献リストの体裁はインデントに問題ありだが，これは手作業でやっても苦痛でないレベルである．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;org-modeのオプションが見えてしまっているが，この程度であれば僅かな手作業で消去できる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;英語に関しては，pdfと比べると多少見劣りがするが，まず問題ないレベルのWord fileが出力できた．&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;日本語論文の場合のorg-fileの設定&#34;&gt;日本語論文の場合のorg fileの設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前回の記事（&lt;a href=&#34;../org-mode_paper_3&#34;&gt;Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化&lt;/a&gt;）の際に作成したhogefuga.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl
#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
#+BIBLIOGRAPHY: extract.bib
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さらに，最後の文献についての以下の部分は削除する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以上で，下図のようになるので，hogefuga_WORD.org として保存する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_CLASS: koma-jarticle
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: date:nil
#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl
#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
#+BIBLIOGRAPHY: extract.bib
#+LINK_UP:
#+LINK_HOME:

#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
\vspace*{-1.5cm}

\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

* 背景と目的
hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
* 結果
hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\cite{Cosentino:2011dn}

#+NAME: hoge_fuga
#+caption: hoge-fuga（重症例である）
#+attr_latex: :float t :width 3in  :align center
#+ATTR_HTML: :width 500  :float: wrap :align center
[[./hoge_fuga.jpg]]

* 結論
hogefugaによる治療は有効である．

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;org-modeからword-fileへのexportの方法-1&#34;&gt;org-modeからWord fileへのexportの方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, &lt;strong&gt;export via pandoc&lt;/strong&gt; のメニューが見える．そこで，p xとして，export via pandoc &amp;mdash;&amp;gt; to docx and openを選択する．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-C-c-C-e.jpg&#34; &gt;

&lt;img src=&#34;/img/org-C-c-C-e.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;暫く待つと，下図のようにWordが立ち上がって，docx file（ &lt;strong&gt;hogefuga_WORD.docx&lt;/strong&gt; ）が開かれる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/word-1.jpg&#34; &gt;

&lt;img src=&#34;/img/word-1.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Figureのキャプションが消えているが，通常，論文投稿時には，本文と画像は別々になるので，画像自体を本文から削除できるため，問題無しとする．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;しかし，英語の場合には見られなかった大きな問題が発覚した！　本文が,  &lt;strong&gt;濁点分離&lt;/strong&gt; してしまっている．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;word-file-の濁点分離を修正する方法&#34;&gt;Word file の濁点分離を修正する方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;濁点分離&lt;/strong&gt; したままでは使いものにならないので，修正する必要がある．しかし，Word fileの内容を点検して，いちいち手作業をやっていては堪らない．そこで，一気に濁点分離を修正する方法はないものかといろいろ探ってみた．&lt;/li&gt;
&lt;li&gt;参考サイト1：&lt;a href=&#34;https://ja.stackoverflow.com/questions/36762/wordで文書内の文字をunicode-nfc正規化する方法&#34; target=&#34;_blank&#34;&gt;Wordで文書内の文字をUnicode NFC正規化する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト2：&lt;a href=&#34;http://labs.timedia.co.jp/2018/04/post-57.html&#34; target=&#34;_blank&#34;&gt;あらゆる文字に濁点と半濁点を付けてみよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト3：&lt;a href=&#34;http://ikeikeikeike.hatenablog.com/entry/2013/11/20/121930&#34; target=&#34;_blank&#34;&gt;Macの濁点問題を解決するPython unicodedataモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト4：&lt;a href=&#34;http://emasaka.blog65.fc2.com/blog-entry-1407.html&#34; target=&#34;_blank&#34;&gt;濁点問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト5：&lt;a href=&#34;https://www.slideshare.net/emasaka/ss-82692529&#34; target=&#34;_blank&#34;&gt;濁点の話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト6：&lt;a href=&#34;https://github.com/emasaka/docx-normarize-nfc&#34; target=&#34;_blank&#34;&gt;docx-normarize-nfc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記の参考サイト4, 5, 6では，emasaka氏により，pythonを用いた方法が報告されており，&lt;a href=&#34;https://github.com/emasaka/docx-normarize-nfc&#34; target=&#34;_blank&#34;&gt;docx-normarize-nfc&lt;/a&gt; としてGithubにアップされている．これはpython scriptであり，.docxファイルをZIPアーカイブとして開き、文書本体のXMLテキストを開いてNFC正規化し、ZIPアーカイブに書き戻すというものであり，これを使わせてもらうことにした．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;pythonの導入&#34;&gt;Pythonの導入&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;https://www.python.org&#34; target=&#34;_blank&#34;&gt;Welcome to Python.org&lt;/a&gt; （本家）ご存知いま一番アツい言語．それしか知らなくても下記のようにして使える（笑）&lt;/li&gt;
&lt;li&gt;まず下準備としてpythonを入れる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;homebrew でpython3をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew install python3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;docx-normarize-nfcの導入&#34;&gt;docx-normarize-nfcの導入&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emasaka/docx-normarize-nfc&#34; target=&#34;_blank&#34;&gt;docx-normarize-nfc&lt;/a&gt; からダウンロードして，/usr/local/bin/ にコピーする．（/usr/local/binにパスが通っているものとする）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;濁点分離の修正&#34;&gt;濁点分離の修正&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;これでWord fileに対して上記のスクリプトを使用すれば良い．&lt;/li&gt;
&lt;li&gt;念のために，Word fileの名前を，hogefuga_WORD_濁点分離修正済み.docxに変更し新規保存しておく．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;そのうえで，shellで以下の操作を行う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docx-normarize-nfc hogefuga_WORD_濁点分離修正済み.docx
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一瞬で修正は終わるので，ファイルをオープンして確かめてみると，下図のように修正されている．素晴らしい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/word-fixed.jpg&#34; &gt;

&lt;img src=&#34;/img/word-fixed.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ようやく，使い物になる日本語のWord fileを作成することができた．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，英語でも日本語でも，pdfからWordにコピペして修正するという難行苦行から解放される．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;しかし，co-authorとのすり合わせやrevisionの際は，まだ，Wordでの作業が必要とされる．苦行は続くのである．．．．．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化）</title>
      <link>/post/org-mode_paper_3/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-mode_paper_3/</guid>
      <description>

&lt;p&gt;前回（&lt;a href=&#34;../org-mode_paper_2&#34;&gt;Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理）&lt;/a&gt;）は，BibDeskを用いて文献情報をbibtex ファイルとして収集する方法についてまとめた．今回は，この文献情報を利用した引用をEmacsのorg-modeでどのように自動化するかについてまとめる．早い話が，org-modeからlatexのbibtexとreftexの機能を利用するということになる．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;org-mode-reftex-setup&#34;&gt;org-mode-reftex-setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照サイト：&lt;a href=&#34;http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/&#34; target=&#34;_blank&#34;&gt;Using Emacs Org-mode to Draft Papers&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RefTex-ModeというものがEmacsには含まれている．文献や引用の管理のためのパッケージである．詳細はC-h iでマニュアルを見れば分かる，と言いたいところだが，このマニュアルが膨大である．そこで，RefTeX in a Nutshellという2ページほどの要約を読めば，使うのには十分であるとマニュアル自体に書いてある（笑）．実は私はそれすらろくに読んでいないが，以下のように設定すれば，十分に使える．設定方法は，以前の記事（&lt;a href=&#34;../init_org&#34;&gt;Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する&lt;/a&gt;）に記載したとおり，init.orgに書き込めば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(defun org-mode-reftex-setup ()
  (load-library &amp;quot;reftex&amp;quot;)
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all))
  (define-key org-mode-map (kbd &amp;quot;C-c )&amp;quot;) &#39;reftex-citation)
  )
(add-hook &#39;org-mode-hook &#39;org-mode-reftex-setup)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記の設定により，参照サイトの説明のように，org-modeの中でreftex-citationの機能が働くようになる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;org-mode-reftex-setupの使用方法&#34;&gt;org-mode-reftex-setupの使用方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;org-modeで文書を書いている最中に文献を引用したい箇所で，C-c ) と打つ&lt;/li&gt;
&lt;li&gt;すると，まず，どの文献リストを使うかを聞いてくるので，hogefuga-reference.bibなど使いたいリストの名前を打つ．前回説明した方法で収集した文献のbib ファイルが有るはずである．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;次に，文献を絞り込むためにキーワードを打つように催促されるので，それを打つ．すると，そのキーワードを有する文献のリストがずらずらと並ぶ．下図の例では，stetler と著者名を打ったときの結果が下のバッファに表示されている．該当する文献にカーソルを持ってくるか，クリックして選択し，リターンを押せば決定され，本文の該当箇所にその論文の cite-key，つまり，\cite{Stetler:2012jt} が入力される．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/reftex.jpg&#34; &gt;

&lt;img src=&#34;/img/reftex.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上図の下のバッファ内でも，C-sの検索機能は使えるので，さらに絞り込みが必要な際は便利である．以前の記事（&lt;a href=&#34;../prelude_install&#34;&gt;Emacsの設定（その1）Preludeの導入&lt;/a&gt;）で述べたようにpreludeを導入して，かつ，helmを有効にしておけば，下図のようにC-sでswiperが使えて更に便利である．（なお，下図では，まず，heat shock proteinと打ち，ズラッと並んだ真ん中のバッファでC-sとやってstetlerと打ったところである．一番下のバッファにstetlerで絞り込まれた候補が並んでいる）&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/reftex-2.jpg&#34; &gt;

&lt;img src=&#34;/img/reftex-2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ox-bibtex-dot-el&#34;&gt;&lt;a href=&#34;https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ox-bibtex.el&#34; target=&#34;_blank&#34;&gt;ox-bibtex.el&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;https://aliquote.org/post/org-and-bibtex/&#34; target=&#34;_blank&#34;&gt;Org and Bibtex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上述の作業で，文献を本文中にcite-keyとして引用することはできた．次に必要なのはorg-modeからpdfやhtmlにexportする際に，cite-keyをもとに，文献が雑誌の規定の様式で引用され，最後に文献リストが規定の様式で記述されるようにすることである．この面倒をみてくれるのが，&lt;a href=&#34;https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ox-bibtex.el&#34; target=&#34;_blank&#34;&gt;ox-bibtex.el&lt;/a&gt; である．&lt;/li&gt;
&lt;li&gt;ox-bibtex.elは，org-plus-contrib packageの中に含まれているので，まず，org-plus-contribをインストールする．これは，&lt;a href=&#34;http://emacs-jp.github.io/packages/package-management/package-el.html&#34; target=&#34;_blank&#34;&gt;package.el&lt;/a&gt; を使えば簡単である．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;次いで，use-packageを使って，ox-bibtexを設定する．と言っても以下のようにinit.orgに書くだけである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(use-package ox-bibtex)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なお，use-packageを使ってox-bibtexを設定する際に，defer t にすると，htmlへの文献のexportができなくなるので注意！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use-packageは非常に便利．emacsの新しいパッケージの導入と管理はこれでいいと思う．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参照サイト1：&lt;a href=&#34;https://github.com/jwiegley/use-package&#34; target=&#34;_blank&#34;&gt;use-package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照サイト2：&lt;a href=&#34;https://qiita.com/kai2nenobu/items/5dfae3767514584f5220&#34; target=&#34;_blank&#34;&gt;use-packageで可読性の高いinit.elを書く&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ox-bibtex.elはbibtexをLaTeX, html, asciiにexportしてくれる．HTMLへのexportには，&lt;a href=&#34;https://www.lri.fr/~filliatr/bibtex2html/&#34; target=&#34;_blank&#34;&gt;bibtex2html&lt;/a&gt; が使われる．そこで，bibtex2htmlをインストールしておく．homebrewがインストールされていれば以下のようにすれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install bibtex2html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ox-bibtexの使い方はソースの最初に書いてあるとおりである．すなわち，文献をexportするためには，org-mode文書の冒頭に例えば以下を追加し，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後に，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-references.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;#+LaTeX_HEADER: の行の最後の&lt;a href=&#34;https://ctan.org/pkg/natbib&#34; target=&#34;_blank&#34;&gt;natbib&lt;/a&gt; は，texliveに含まれる文献サポートのパッケージであり，1, 2, 3,&amp;hellip;.というような番号付タイプの文献引用や author-yearタイプの文献引用の両方に（それ以外にも）対応している．その手前はnatbibのオプションである．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;#+BIBLIOGRAPHY: のあとにfoo.bibを書くわけだが，この部分はフルパスで書いて良い．その後にはスタイルを書く．上記のStroke_3-authors_alphabetical.bstは自作だが，これは投稿ジャーナルの規定に合わせて作成する．ジャーナルによってはbst ファイルを用意してあるかもしれない．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;option: -foobar はbibtex2htmlに &amp;lsquo;foobar&amp;rsquo; を渡す．つまり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;option:-d    sort by date
option:-a    sort as BibTeX (usually by author) *default*
option:-u    unsorted i.e. same order as in .bib file
option:-r    reverse the sort
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;複数のオプションを使用することも可能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;option:-d option:-r
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上述のように， &lt;strong&gt;limit:t&lt;/strong&gt; とすることにより，引用された文献のみのリストになる．これをしないと bib ファイルの中のすべての論文がリストになってしまう．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bst-ファイルについて&#34;&gt;bst ファイルについて&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;bibtexにおいて引用のスタイルを決めているファイルであり，これを目指すジャーナルの投稿規定に合わせる．既にそのようなbst ファイルがあれば極楽だが，ない場合は大変である．この辺は以下のサイトを参照．

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ketsuago.com/entry/2015/03/16/231806&#34; target=&#34;_blank&#34;&gt;LaTeXで参考文献の形式を変更する方法（bstファイルの編集）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.med.osaka-u.ac.jp/pub/anes/www/html/manual/bibtex.html&#34; target=&#34;_blank&#34;&gt;BibTeXのドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bst-ファイルの置き場所&#34;&gt;bst ファイルの置き場所&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;これにはかなり悩まされたが，なんのことはないMacTeXのFAQサイトに書いてあった．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.tug.org/mactex/2013/faq/#qm05&#34; target=&#34;_blank&#34;&gt;The Most Frequently Asked Questions (FAQ)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QM.06 :&lt;/strong&gt; Why can&amp;rsquo;t the latest MacTeX find my local BibTeX files? Earlier versions of MacTeX worked correctly.  &lt;br /&gt;
&lt;br /&gt;
 &lt;strong&gt;AM.06 :&lt;/strong&gt; TeX Live is slightly pickier about placement of these files. &amp;ldquo;.bib&amp;rdquo; files go in &lt;br /&gt;
 &lt;strong&gt;~/Library/texmf/bibtex/bib&lt;/strong&gt; &lt;br /&gt;
 or subfolders of this directory, and &amp;ldquo;.bst&amp;rdquo; files go in &lt;br /&gt;
 &lt;strong&gt;~/Library/texmf/bibtex/bst&lt;/strong&gt; &lt;br /&gt;
 or subfolders of this directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ここにおいておけば，パスを指定することなく，どこからでもbstファイルを指定してスタイルを決められる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文献を引用したorg-modeからのexportの実例&#34;&gt;文献を引用したorg-modeからのexportの実例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ようやく，これで準備が整ったので，実例を示す．以下のファイルを作成し，hogefuga.orgとして保存する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_CLASS: koma-jarticle
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: date:nil
#+LINK_UP:
#+LINK_HOME:

#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
\vspace*{-1.5cm}

\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

* 背景と目的
hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
* 結果
hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\cite{Cosentino:2011dn}

#+NAME: hoge_fuga
#+caption: hoge-fuga（重症例である）
#+attr_latex: :float t :width 3in  :align center
#+ATTR_HTML: :width 500  :float: wrap :align center
[[./hoge_fuga.jpg]]

* 結論
hogefugaによる治療は有効である．

#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hogefuga-References.bibの部分やbstの部分は，それぞれ該当するファイルに置き換えていただきたい．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;\cite{Stetler:2012jt,Cosentino:2011dn} の部分は私のbibファイルにおけるcite-keyである．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C-c C-e l o で，文献が番号付きで引用されたpdfが作成され，skimで開く．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．また，このbstでは著者名のアルファベット順を指定しているので，最初にでてきた文献が2に，二番目にでてきた文献が1になっていることに注意してほしい．さらに，著者名は3人までは全員記載し，4人以上の論文では4人目以降はet alになっている．bibtexの活用により，これらのことが自動的になされている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/ref-pdf.jpg&#34; &gt;

&lt;img src=&#34;/img/ref-pdf.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついで，htmlである．C-c C-e h o で，文献が番号付きで引用されたhtmlが作成され，browserで開く．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．その他もpdfと同様であるが，文献リストにはabstractやDOIも追加される．投稿する際はpdfか，別記事のようにwordにしてしまうので，html出力の設定はこれ以上触っていない．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/ref-html.jpg&#34; &gt;

&lt;img src=&#34;/img/ref-html.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ようやく，文献付きの原稿の出力の設定にまでたどり着くことができた．次回はpandocを利用して，org-modeからword ファイルを出力する方法をまとめる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理）</title>
      <link>/post/org-mode_paper_2/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-mode_paper_2/</guid>
      <description>

&lt;p&gt;さて，前回（&lt;a href=&#34;../org-mode_paper_1&#34;&gt;Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）&lt;/a&gt;）はorg-modeによる論文本体の執筆に付いてまとめたわけだが，今回は論文引用の方法についてまとめる．と思ったのだが，論文を引用するためには，当然のことながら論文を収集しなければならない．そのうち膨大な数の論文の海に溺れることになる．そこで，収集した論文，つまり，pdfの整理をするソフトが必要になってくる．その引用も，書式や番号付を雑誌の規定に合わせて自動化してくれれば言うことはない．ということで，そのようなソフトについて書くことにする．有料ソフトの定番としては，EndoNoteがあるし，フリーソフトでは，&lt;a href=&#34;https://www.zotero.org&#34; target=&#34;_blank&#34;&gt;zotero&lt;/a&gt;や&lt;a href=&#34;https://www.mendeley.com/?switchedFrom=&#34; target=&#34;_blank&#34;&gt;Mendeley&lt;/a&gt;が有名である．私自身は，LaTeXを利用することが多い関係上，&lt;a href=&#34;https://bibdesk.sourceforge.io&#34; target=&#34;_blank&#34;&gt;BibDesk&lt;/a&gt;というこれまた老舗のソフトをもっぱら利用している．ネット上でもzoteroやmendeleyについての情報は豊富だが，BibDeskについてはそれほど見られないので，まとめておくことは多少の意味があるであろうと考え，BibDeskによる論文収集を説明することにした．&lt;/p&gt;

&lt;h2 id=&#34;bibdesk&#34;&gt;&lt;a href=&#34;https://bibdesk.sourceforge.io&#34; target=&#34;_blank&#34;&gt;BibDesk&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;texliveをインストールすればその中に入っているが，最新版はリンク先にあるので，そちらを落とすほうが良い．&lt;/li&gt;
&lt;li&gt;文献をbibtexのファイルとして管理する．pdfとの関連付けができるので，書誌事項とpdfが一体化して管理できる．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bibtex.org&#34; target=&#34;_blank&#34;&gt;bibtex&lt;/a&gt;に関しては，&lt;a href=&#34;https://qiita.com/SUZUKI%5FMasaya/items/14f9727845e020f8e7e9&#34; target=&#34;_blank&#34;&gt;BiBTeXとは&lt;/a&gt; を参照&lt;/li&gt;
&lt;li&gt;bibtexファイルなので，当然，latexの機能を用いて，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．これが便利！&lt;/li&gt;

&lt;li&gt;&lt;p&gt;見た目はこんな感じ&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/bibdesk.jpg&#34; &gt;

&lt;img src=&#34;/img/bibdesk.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;医学系の論文となると，やはり，&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pubmed&#34; target=&#34;_blank&#34;&gt;PubMed&lt;/a&gt;などネットでの連携が重要である．下図のごとく，BibDeskではSearches menuからPubMedを選ぶことにより，BibDeskの中からPubMedを検索できる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/bibdesk-pubmed.jpg&#34; &gt;

&lt;img src=&#34;/img/bibdesk-pubmed.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;検索欄に，例えば，&amp;rdquo;heat shock protein&amp;rdquo;と打つと，下図のように検索結果が50編ずつ並ぶが，50編以上ある場合は，Searchを繰り返しクリックすることにより，100編と150編とどんどんリストに取り込まれていく．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/bibdesk-pubmed2.jpg&#34; &gt;

&lt;img src=&#34;/img/bibdesk-pubmed2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上図のごとく，検索結果欄の左端に&amp;rdquo;Import&amp;rdquo; ボタンがあるが，これをクリックするとその論文の書誌事項が取り込まれる．その際に，自分の文献リストの名前を，&amp;rdquo;hogefuga-reference.bib&amp;rdquo; など適当に決めれば良い．以後はそのリストに追加していくことになる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;また，取り込まれる際にcite-keyをBibDeskが自動的に決めてくれる．このcite-keyは次回の記事で述べる「引用の自動化」の際にreftexに使用される．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なお，PubMedの番号，つまり，Pmidが分かっていれば，それを打ち込めば一発で書誌事項を検索できる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リストの中から興味のある論文をクリックして選択し，グレーにハイライトさせると，下図のごとく右側のサイドパネルに，その論文のあるサイトを示すアイコンが表示される．これをクリックすれば，ブラウザーが開いてそのサイトに飛ぶ．もし，その論文がオープンアクセスであれば，あるいは，所属する組織が出版社と契約を交わしていれば，その論文のpdfを落とせる．落としたpdfをドラッグしてその論文に該当するリストのラインにドロップすれば，その書誌事項とpdfはリンクし，以降はその論文のサイドパネルにpdfのアイコンが表示され，ダブルクリックによりオープンするようになる．さらに言えば，pdfではなく，パワポやワードのファイルとして文献が存在することもある．同じようにドラッグ＆ドロップすれば，これまたリンクする．しかも一つの文献にいくつものpdfやその他のファイルをリンクできる．非常に便利である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/bibdesk-pubmed3.jpg&#34; &gt;

&lt;img src=&#34;/img/bibdesk-pubmed3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;また，下図のごとく，左のサイドパネルの一番上の方にある&amp;rdquo;Web BibDesk Web Group&amp;rdquo;をクリックして選択すれば，更にいろいろな文献ソースが表示される．医学系では，Google Scholarが有用なので，これをクリックすれば，BibDeskの中からGoogle Scholarを検索できるし，書誌事項も取り込める．pdfのリンクが存在すればBibDeskの中でpdfを落とすこともできる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/bibdesk-pubmed4.jpg&#34; &gt;

&lt;img src=&#34;/img/bibdesk-pubmed4.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;収集した文献の書誌事項はhogefuga-reference.bibにbibtex fileとしてまとめられているが，その中身は以下のような情報の集積である（下の例ではabstractなどは省略している）．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;@article{Rothwell:2018aa,

  Author = {Rothwell, Peter M and Cook, Nancy R and Gaziano, J Michael and Price, Jacqueline F and Belch, Jill F F and Roncaglioni, Maria Carla and Morimoto, Takeshi and Mehta, Ziyah},
  Date-Added = {2018-08-03 22:46:26 +0900},
  Date-Modified = {2018-08-03 22:46:26 +0900},
  Doi = {10.1016/S0140-6736(18)31133-4},
  Journal = {Lancet},
  Journal-Full = {Lancet (London, England)},
  Month = {Jul},
  Pmid = {30017552},
  Pst = {aheadofprint},
  Title = {Effects of aspirin on risks of vascular events and cancer according to bodyweight and dose: analysis of individual patient data from randomised trials},
  Year = {2018},
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;bibtexなので，前述のごとく，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Emacsのorg-modeと組み合わせて，どのように文献の引用を自動化するかについては次回の記事にまとめる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）</title>
      <link>/post/org-mode_paper_1/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-mode_paper_1/</guid>
      <description>

&lt;p&gt;私がEmacsを使用している理由の一番大きなものはorg-modeである．あらゆる文書作成にorg-modeを用いている．org-modeを使って論文を書くことに関しては，ググってもらえばおわかりのように，ネット上に山のように情報が存在する．「屋上屋を架してどうする」と言う自分の中の声を押し殺し，あくまで備忘録ということで，あえてここにまとめておく．なお，私はGTDのツールとしてはorg-modeを全く使用していないので，その種の情報はここにはまったくないことをお断りしておく．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;org-modeからlatex経由で，文献がnumberingされ文献リストも付いたpdfを出力できるようにする&lt;/li&gt;
&lt;li&gt;org-modeから，文献がnumberingされ文献リストも付いたhtmlを出力できるようにする&lt;/li&gt;
&lt;li&gt;org-modeから，文献がnumberingされ文献リストも付いたwordファイルを出力できるようにする&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;org-modeで論文を書く利点&#34;&gt;org-modeで論文を書く利点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;LaTeXのややこしいコマンドを覚えなくても普通に文章を書いていけば，pdfで出力できる．&lt;/li&gt;
&lt;li&gt;latexの力を借りることで，文献の引用やリストの作成を自動化できる．&lt;/li&gt;
&lt;li&gt;必要なら，htmlとしても出力できる．&lt;/li&gt;
&lt;li&gt;どうしても必要なら，pandocの力を借りて，なんとMicrosoft Wordのファイルとしても出力できてしまう．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;org-modeの設定-セットアップ-pdfとhtmlへの出力用&#34;&gt;org-modeの設定・セットアップ（pdfとhtmlへの出力用）&lt;/h2&gt;

&lt;p&gt;設定が最もよくまとまっているのは&lt;a href=&#34;https://texwiki.texjp.org/?Emacs%2FOrg%20mode&#34; target=&#34;_blank&#34;&gt;TeX Wiki Emacs/Org mode&lt;/a&gt; 設定例のmacOSの部分である．正統派の方は，こちらを参考にしていただきたい．&lt;/p&gt;

&lt;p&gt;私は，&lt;a href=&#34;https://ctan.org/pkg/koma-script&#34; target=&#34;_blank&#34;&gt;koma-script – A bundle of versatile classes and packages&lt;/a&gt; と &lt;a href=&#34;https://tufte-latex.github.io/tufte-latex/&#34; target=&#34;_blank&#34;&gt;Tufte-LaTeX&lt;/a&gt; を気に入っており，ほぼこれらしか使わないので，その設定を書いておく．その前に少し情報をまとめておく．&lt;/p&gt;

&lt;h3 id=&#34;koma-script-a-bundle-of-versatile-classes-and-packages&#34;&gt;&lt;a href=&#34;https://ctan.org/pkg/koma-script&#34; target=&#34;_blank&#34;&gt;koma-script – A bundle of versatile classes and packages&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１：&lt;a href=&#34;http://konoyonohana.blog.fc2.com/blog-category-12.html&#34; target=&#34;_blank&#34;&gt;Koma-Script 入門　～初歩の初歩～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト２：&lt;a href=&#34;https://ichiro-maruta.blogspot.com/2013/03/latex.html&#34; target=&#34;_blank&#34;&gt;使ってはいけない LaTeX のコマンド・パッケージ・作法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト３：&lt;a href=&#34;https://qiita.com/zr%5Ftex8r/items/297154ca924749e62471&#34; target=&#34;_blank&#34;&gt;LaTeX の「アレなデフォルト」 傾向と対策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アメリカ生まれのaritcleなどの欧文標準文書クラスはデフォルトがレターサイズで余白が広すぎてしまう．これに対して，ヨーロッパ生まれのkoma-scriptはa4がデフォルトで，余白も広すぎず，レイアウトもなんとなくオシャレ（笑）である．当然のことながら，texliveに含まれており，texliveをインストールした時点で，インストールされている．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tufte-latex&#34;&gt;&lt;a href=&#34;https://tufte-latex.github.io/tufte-latex/&#34; target=&#34;_blank&#34;&gt;Tufte-LaTeX&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１： &lt;a href=&#34;https://github.com/tsdye/tufte-org-mode/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;tufte-org-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.edwardtufte.com/tufte/index&#34; target=&#34;_blank&#34;&gt;Edward R. Tufte&lt;/a&gt;によって作られたページレイアウト．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．こういうスタイルはよく見かけるものだと思うが，作者がはっきりしているとは，恥ずかしながら全く知らなかった．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tsdye/tufte-org-mode/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;tufte-org-mode&lt;/a&gt;はこのtufte classをorg-modeから使えるようにした有り難いパッケージである．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;org-bullet&#34;&gt;org-bullet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１：&lt;a href=&#34;https://github.com/sabof/org-bullets&#34; target=&#34;_blank&#34;&gt;https://github.com/sabof/org-bullets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト２：&lt;a href=&#34;http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html&#34; target=&#34;_blank&#34;&gt;http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pdf出力とは関係ないが，ついでに触れておく．要するにorg-modeの見た目が良くなるパッケージである．星印が色付きの丸や二重丸になる．やる気に繋がるので，見た目は大事である．こんな感じになる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-bullet.jpg&#34; &gt;

&lt;img src=&#34;/img/org-bullet.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.elには以下のように&lt;a href=&#34;https://github.com/jwiegley/use-package&#34; target=&#34;_blank&#34;&gt;use-package&lt;/a&gt;を用いて記述してインストール兼設定となる．もちろん，これも以前の記事（&lt;a href=&#34;../init_org&#34;&gt;Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する&lt;/a&gt;）で説明したように，init.orgに書いたものから生成されたinit.elである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(use-package org-bullets
  :ensure t
  :config
  (add-hook &#39;org-mode-hook (lambda () (org-bullets-mode 1))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;org-modeのinit-dot-elの設定-pdf出力用&#34;&gt;org-modeのinit.elの設定（pdf出力用）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前述のごとく，koma-scriptとTufte-LaTeXについて設定する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;何回もしつこいようだが，これも以前の記事（&lt;a href=&#34;../init_org&#34;&gt;Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する&lt;/a&gt;）で説明したように，init.orgに書いたものから生成されたinit.elである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;ox-latex)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.org$&amp;quot; . org-mode))
(setq org-latex-default-class &amp;quot;bxjsarticle&amp;quot;)

(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;koma-article&amp;quot;
               &amp;quot;\\documentclass{scrartcl}&amp;quot;
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)
               (&amp;quot;\\subsubsection{%s}&amp;quot; . &amp;quot;\\subsubsection*{%s}&amp;quot;)
               (&amp;quot;\\paragraph{%s}&amp;quot; . &amp;quot;\\paragraph*{%s}&amp;quot;)
               (&amp;quot;\\subparagraph{%s}&amp;quot; . &amp;quot;\\subparagraph*{%s}&amp;quot;)))

(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;koma-jarticle&amp;quot;
               &amp;quot;\\documentclass{scrartcl}
               \\usepackage{amsmath}
               \\usepackage{amssymb}
               \\usepackage{xunicode}
               \\usepackage{fixltx2e}
               \\usepackage{zxjatype}
               \\usepackage[hiragino-dx]{zxjafont}
               \\usepackage{xltxtra}
               \\usepackage{graphicx}
               \\usepackage{longtable}
               \\usepackage{float}
               \\usepackage{wrapfig}
               \\usepackage{soul}
               \\usepackage{hyperref}&amp;quot;
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)
               (&amp;quot;\\subsubsection{%s}&amp;quot; . &amp;quot;\\subsubsection*{%s}&amp;quot;)
               (&amp;quot;\\paragraph{%s}&amp;quot; . &amp;quot;\\paragraph*{%s}&amp;quot;)
               (&amp;quot;\\subparagraph{%s}&amp;quot; . &amp;quot;\\subparagraph*{%s}&amp;quot;)))

;; tufte-handout class for writing classy handouts and papers
(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;tufte-handout&amp;quot;
               &amp;quot;\\documentclass[twoside,nobib]{tufte-handout}
                                 [NO-DEFAULT-PACKAGES]
                \\usepackage{zxjatype}
                \\usepackage[hiragino-dx]{zxjafont}&amp;quot;
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)))
;; tufte-book class
(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;tufte-book&amp;quot;
               &amp;quot;\\documentclass[twoside,nobib]{tufte-book}
                                [NO-DEFAULT-PACKAGES]
                 \\usepackage{zxjatype}
                 \\usepackage[hiragino-dx]{zxjafont}&amp;quot;
               (&amp;quot;\\part{%s}&amp;quot; . &amp;quot;\\part*{%s}&amp;quot;)
               (&amp;quot;\\chapter{%s}&amp;quot; . &amp;quot;\\chapter*{%s}&amp;quot;)
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)
               (&amp;quot;\\paragraph{%s}&amp;quot; . &amp;quot;\\paragraph*{%s}&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;私はxelatexを使っているので，compileは以下のように設定している．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-latex-pdf-process
      &#39;(&amp;quot;xelatex -interaction nonstopmode -output-directory %o %f&amp;quot;
        &amp;quot;bibtex %b&amp;quot;
        &amp;quot;xelatex -interaction nontopmode -output-directory %o %f&amp;quot;
        &amp;quot;xelatex -interaction nonstopmode -output-directory %o %f&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．なお，pandocやTufteの項は別途記事にするので，とりあえずは無視してほしい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-C-c-C-e.jpg&#34; &gt;

&lt;img src=&#34;/img/org-C-c-C-e.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pdfで出力したければ，さらに，l o と打つと，As PDF file and openを選択したことになり，原稿がpdfとして出力され，かつ，skimでそのpdfがオープンされる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;同じく，htmlで出力したければ，h o と打つと，As HTML file and openを選択したことになり，ブラウザーでそのhtmlがオープンされる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;org-modeで論文を書く-の実例&#34;&gt;「org-modeで論文を書く」の実例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;それでは実例を示してみる．以下のような書類を作成し，hogefuga.orgとして保存する．hoge_fuga.jpgはorg fileと同じdirectoryにあるものとする．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略&amp;hellip;..(^^;;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_CLASS: koma-jarticle
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: date:nil
#+LINK_UP:
#+LINK_HOME:

#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
\vspace*{-1.5cm}

\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

* 背景と目的
hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
* 結果
hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．

#+NAME: hoge_fuga
#+caption: hoge-fuga（重症例である）
#+attr_latex: :float t :width 3in  :align center
#+ATTR_HTML: :width 500  :float: wrap :align center
[[./hoge_fuga.jpg]]

* 結論
hogefugaによる治療は有効である．
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e l oと打てば，以下のようなpdfがskimで開かれる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/hogefuga_text.jpg&#34; &gt;

&lt;img src=&#34;/img/hogefuga_text.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;また，C-c C-e h oと打てば，以下のようなhtmlがbrowserで開かれる．latexのコマンドが見えてしまっているのがご愛嬌だが，htmlにしか出力しないのであれば，削除すればよい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/hogefuga_html.jpg&#34; &gt;

&lt;img src=&#34;/img/hogefuga_html.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;長くなったので，ここまでとし，文献の引用の設定は次回の記事にまとめることとする．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>beamerでスライド原稿用pdfを作成する（その3）動画が走るスライド原稿を作る（media9に関する追記）</title>
      <link>/post/beamer_movie2/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/beamer_movie2/</guid>
      <description>

&lt;p&gt;前回のポストを書いた後に，念のために調べてみると，どうやら，media9なるものが，いまやpdfに動画を埋め込むために普通に使われているようだということが判明してしまった！う〜む，勉強不足を痛感する．遅れを取り返すべく，早速やってみたので，それを追加報告とする．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;media9&#34;&gt;media9&lt;/h2&gt;

&lt;p&gt;media9はtexlive2018に含まれており，特に別途インストールする必要はなかった．media9については様々な情報があったが，多くはWindowsやLinuxに関してであり，そのままコピペして動くような極楽情報はなかなか見つからなかった．やはり，餅は餅屋で，OS X TeXにそのものズバリの情報があった．それが参考サイト５である．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１：&lt;a href=&#34;https://texwiki.texjp.org/?media9&#34; target=&#34;_blank&#34;&gt;TeXWiki media9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト２：&lt;a href=&#34;https://blog.tokor.org/2016/06/04/TeXでプレゼン-LaTeX-Beamerを使う人のためのTips集/&#34; target=&#34;_blank&#34;&gt;TeXでプレゼン - LaTeX Beamerを使う人のためのTips集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト３：&lt;a href=&#34;https://www.youtube.com/watch?v=HHzcrP27I08&#34; target=&#34;_blank&#34;&gt;How to embed video files in a PDF using LaTeX (a media9/beamer example)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト４：&lt;a href=&#34;http://empitsu.hatenablog.com/entry/2012/11/02/182722&#34; target=&#34;_blank&#34;&gt;Beamer で PDF ファイルに動画を埋め込む&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト５：&lt;a href=&#34;http://tug.org/pipermail/macostex-archives/2014-July/052673.html&#34; target=&#34;_blank&#34;&gt;media9 problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;beamerで動画が走るスライド原稿を作る-media9版&#34;&gt;beamerで動画が走るスライド原稿を作る（media9版）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;同一directoryにhogefuga.movがあるとすれば，以下のように書けば良い&lt;/li&gt;

&lt;li&gt;&lt;p&gt;preambleに，\usepackage{media9}を忘れずに追加しておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\newcommand{\showmovie}[1]{\includemedia[
  activate=pageopen,
  deactivate=pageclose,
  width=110mm, height=72mm,
  addresource=#1,
  flashvars={
    src=#1
    &amp;amp;loop=true
    &amp;amp;autoPlay=false
  }
  ]{}{StrobeMediaPlayback.swf}
}

\begin{frame}
  \frametitle{hogefugaの動画}
  \centering
  \showmovie{hogefuga.mov}
\end{frame}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;110mmと72mmの数値はフレーム内の動画の収まり具合により適宜調整する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;loopは，ループ再生するかどうか&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;autoplayは自動再生するかどうか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;media9を使用したときの利点&#34;&gt;media9を使用したときの利点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;なんと言ってもべた書きよりもelegant!&lt;/li&gt;
&lt;li&gt;スライドを開けたときに，何もしなくても動画の静止画が映るので，前回のやり方のように背景をべた書きしなくて良い．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;media9を使用したときの欠点&#34;&gt;media9を使用したときの欠点&lt;/h2&gt;

&lt;p&gt;もう完全にmedia9に乗り換えるつもりでいたが，以下に述べるようにいくつか欠点もあることが判明した．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;media9はpdf自体に動画を埋め込むようである．したがって，200MBの動画を走らせるとすると，pdf自体が200MB以上の大きさになってしまう．&lt;/li&gt;
&lt;li&gt;それだけでなく，200MB程度の動画になると，途中で固まってしまう！これでは使い物にならない．&lt;/li&gt;
&lt;li&gt;一方，前回記事のべた書き方式だと，pdf自体に動画を埋め込まないので，pdfは大きくならないし，動画指定のパスは効くし，200MBだろうともっと大きかろうと動画はガンガン動く．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;容量の小さな動画であれば，media9でも十分であろう．&lt;/li&gt;
&lt;li&gt;私のように，容量の大きな動画を使用するような場合は，べた書きを使用するほうが良いであろう．&lt;/li&gt;
&lt;li&gt;ということで，結局，元の木阿弥に戻ることとなった．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>beamerでスライド原稿用pdfを作成する（その2）動画が走るスライド原稿を作る</title>
      <link>/post/beamer_movie/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/beamer_movie/</guid>
      <description>

&lt;p&gt;実は，同じような内容について2010年に，&lt;a href=&#34;https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=399#p2100&#34; target=&#34;_blank&#34;&gt;TeX QA&lt;/a&gt; に投稿しているが，その後現在に至るまで使い続けることができており，一応，こちらでもまとめておくことにした．&lt;/p&gt;

&lt;h2 id=&#34;beamerで動画が走るスライド原稿を作る&#34;&gt;beamerで動画が走るスライド原稿を作る&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;前述した ，&lt;a href=&#34;https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=399#p2100&#34; target=&#34;_blank&#34;&gt;TeX QA&lt;/a&gt; に経緯は投稿してあるので，詳細はそちらを読んでいただきたい．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;参考にしたのは，Adobeのpdfのマニュアル（DVI specials for PDF generation） &lt;a href=&#34;https://www.tug.org/TUGboat/tb30-1/tb94cho.pdf&#34; target=&#34;_blank&#34;&gt;https://www.tug.org/TUGboat/tb30-1/tb94cho.pdf&lt;/a&gt; の以下の部分&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;3 Annotations

An annotation is considered as an object with a location on a page. The type of the object is given by the value of the key `/Subtype&#39;, for instance, `/Text&#39;, `/Link&#39;, `/Sound&#39;, `/Movie&#39;, etc. (See [1, p. 615] for the list of all annotation types.) The location is given by an array object associated to the key `/Rect&#39;. DVIPDFM(x) provides the following special command for annotations............

 The following example shows a movie annotation that enables us to run the movie file ‘mymovie.avi’ inside a PDF viewer program.

 \special{pdf:ann bbox 0 0 360 180 &amp;lt;&amp;lt;
 /Subtype /Movie /Border [1 0 0]
 /T (My Movie) /Movie &amp;lt;&amp;lt;
 /F (mymovie.avi) /Aspect [720 360]
 /Poster true &amp;gt;&amp;gt;
 /A &amp;lt;&amp;lt; /ShowControls false &amp;gt;&amp;gt; &amp;gt;&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アスペクト比やコントロールバーの有無，リピートするかどうかなども指示できる（下記参照）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;mymovie.aviのところに動かしたい動画を記入（パスも効く）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;私の作成したものは読んでいただければおわかりのように，非常にダサいベタ書きである．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最近の書き方は以下の通りで，もっぱら，mov形式の画像を使用している．コンテナがaviやwmvだと動かないが，Mac以外でどうなるのかは不明．そういえば，Windowsで試したことはなかった&amp;hellip;..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;{
    \usebackgroundtemplate{\put(20, -265){\includegraphics[scale=0.45]{/Data/.../..../Figures/hogefuga.pdf}}}
    \begin{frame}
    \frametitle{hogefugaの対策}
    \special{pdf:ann bbox -10 -130 320 90 &amp;lt;&amp;lt;
             /Subtype /Movie /Border [0 0 1]
             /T (My Movie) /Movie &amp;lt;&amp;lt;
             /F (/Data/.../hogefuga.mov)
             %/Aspect [720 480]
             /Aspect [640 480]
             /Poster false &amp;gt;&amp;gt;
             /A &amp;lt;&amp;lt; /ShowControls true /Mode /Repeat &amp;gt;&amp;gt; &amp;gt;&amp;gt;}
    \end{frame}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;\usebackgroundtemplateの部分には動画のキャプチャー画像を貼り付けておく．なにもないと，動画が動き出す前の画面が空白になってしまう（もっと良い方法があれば，どなたかご教示ください）．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;\putで背景画像（キャプチャー画像）の位置を直接指定し，\includegraphicsのscaleで倍率を指定して動画の大きさに合わせている．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，画像をクリックすると（ほぼ）同じ大きさの動画が（ほぼ）同じ位置で動くようになる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;動画の大きさはbboxで，かぶせる静止画の大きさはscaleで調整する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;プレゼンテーションにskimを使うと動画が動かないので注意．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;動画は同一directoryにある必要はなく，パスで指定すれば良い&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;動画自体はpdfの中に埋め込まれないので，pdfの容量がむやみに大きくならないという利点がある．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adobe Acrobat Readerでプレゼンすれば，動画は動くし，音もでる．コントロールバーにより早送りなども可能．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最初にpdfで動画をクリックすると「セキュリティ上の問題．．．」というメッセージが表示される．この横にあるオプションボタンをクリックして，信頼するを選択すれば，動画が動くようになる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>beamerでスライド原稿用pdfを作成する（その１）</title>
      <link>/post/beamer/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/beamer/</guid>
      <description>

&lt;p&gt;前回のポスト（&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）&lt;/a&gt;）により，既にLaTeXはインストールされたので，今回は学会発表向けのスライド原稿作成についてまとめる．ようやく実質的な話になる．
　&lt;/p&gt;

&lt;h2 id=&#34;beamerによるスライド原稿の作成&#34;&gt;beamerによるスライド原稿の作成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsのauctexを使うと補完などあり，便利である．&lt;/li&gt;
&lt;li&gt;下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う．&lt;/li&gt;
&lt;li&gt;なお， \usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えていただいた．参考：&lt;a href=&#34;https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=729&#34; target=&#34;_blank&#34;&gt;beamerでの数式フォントの変更&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;% -*-coding:utf-8-*-
\documentclass[svgnames, table, 14pt]{beamer}
\usepackage{zxjatype}
\usepackage[hiragino-dx]{zxjafont}

% ヒラギノ角ゴ Proを使う
\setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}
\setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}

% themeを指定する
\usetheme{Darmstadt}

\usefonttheme[onlylarge]{structurebold}
\setbeamerfont*{frametitle}{size=\large,series=\bfseries}
\setbeamertemplate{navigation symbols}{}

\usepackage[english]{babel}
\usepackage[latin1]{inputenc}
\usepackage{times}
\usepackage[T1]{fontenc}
\usepackage{hyperref}

% Setup TikZ
\usepackage{tikz}
\usetikzlibrary{arrows}
\tikzstyle{block}=[draw opacity=0.7,line width=1.4cm]
% Figure position
\usepackage[absolute,overlay]{textpos}
% math
\usepackage{mathabx}

\usefonttheme{professionalfonts}

% Author, Title, etc.
\title[hoge/fugaによる相補的な治療における高難度症例の治療と成績]
{hoge/fugaによる相補的な治療における高難度症例の治療と成績}
\author[taipapa]
{taipapa, 織田信長, 豊臣秀吉, 徳川家康}
\institute[hogefuga University]
{hogefuga大学大学院 hogefuga研究科　hogefuga分野}


\date[日本hogefuga外科学会 第??回学術総会　\hspace{2.4cm} 201X年X月XX日]
{\scriptsize{Symposium-02「とっーても難しいhogeとfuga」
\\ \vspace{0.15cm} 筆頭演者はhogefuga外科学会へ過去3年間のCOI自己申告を
完了しています．\\本演題の発表に関して開示すべきCOIはありません
}}

% 学会名，日付，スライド番号を挿入
\setbeamertemplate{footline}
{\color{gray} %
\hspace{.075cm}
\insertshortdate%
\hspace{4cm}
\insertframenumber{} / \inserttotalframenumber%
}

\begin{document}

\begin{frame}
\titlepage
\end{frame}

\section{Introduction}

\begin{frame}{背景と目的}
\begin{block}{}
\begin{itemize}
\item hogeとfugaを比較してみると，一方で難易度の高い症例で
も他方では容易に行える場合も多い.
\item 当施設では，一方に片寄ることなく，hogeとfugaを相補的に
用いることにより合併症の減少を目指す方針をとっている．
\item そこで，自験例から高難度のhogefuga症例についての
方針と成績を主にhogefuga surgeonの立場から検討した.
\end{itemize}
\end{block}
\end{frame}

\section{Results}
\begin{frame}
\frametitle{hogefuga症例の画像}
\centering
\includegraphics[width=3.5in]{hoge_fuga.pdf}
\end{frame}
\end{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ターミナルで，cdして上記のbeamer_test.texのあるdirectoryに移動し，shellで以下のように打ち込む．前回のポスト（&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする&lt;/a&gt;を参考　&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;latexmk -pvc -pdf -view=none beamer_test.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで下記のようなpdfが出来上がるはず．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/beamer_test.jpg&#34; &gt;

&lt;img src=&#34;/img/beamer_test.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;








&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/beamer_test2.jpg&#34; &gt;

&lt;img src=&#34;/img/beamer_test2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;画像の貼り付けが必要なら，上の文書にもあるように必要な箇所で，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;\includegraphics[width=2in]{/Data/hoge/fuga/......./hoge_fuga.pdf}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと打てばよい．以下のようなスライドが得られる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/beamer_test3.jpg&#34; &gt;

&lt;img src=&#34;/img/beamer_test3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なにもしなければ，画像は左寄せになる．中央に寄せたければ，上記の文書内にあるように，\centering を使用する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;次回は，beamerで動画を走らせる件について書く予定．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）</title>
      <link>/post/latexmk/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/latexmk/</guid>
      <description>

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;tex-live-2018のインストール&#34;&gt;TeX Live 2018のインストール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１：&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX Live&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト２：&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live%2FMac&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX LiveMac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト３：&lt;a href=&#34;http://www.tug.org/mactex/&#34; target=&#34;_blank&#34;&gt;The MacTeX-2018 Distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする．&lt;/li&gt;
&lt;li&gt;これでスライド作成ソフトであるbeamerも一緒にインストールされる．&lt;/li&gt;
&lt;li&gt;beamerに固有の設定は特に必要なし．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tex-live-2018のインストール-2018年9月1日追記&#34;&gt;TeX Live 2018のインストール（2018年9月1日追記）&lt;/h2&gt;

&lt;p&gt;大事なことを２つ忘れていたので追記する．&lt;/p&gt;

&lt;h3 id=&#34;ヒラギノフォントの埋め込みなど&#34;&gt;ヒラギノフォントの埋め込みなど&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;http://doratex.hatenablog.jp/entry/20180501/1525144736&#34; target=&#34;_blank&#34;&gt;MacTeX 2018のインストール&amp;amp;日本語環境構築法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;こんなところを読んでいないで，直ちに上記のサイトに飛んでいただきたい．&lt;/li&gt;
&lt;li&gt;マックユーザーにとっての最大の問題点は &lt;strong&gt;「macos標準添付のヒラギノフォントなど商用フォントに関する設定ファイル群が，TeX LiveからTLContriに移動になった」&lt;/strong&gt; ということである．この問題に対する対応方法は，すべて上記のサイトに記載されているので，そのとおりにすれば良い．実にありがたい．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストール後のパスの修正-symbolic-linkを張る&#34;&gt;インストール後のパスの修正（symbolic linkを張る）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live%2FMac&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX LiveMac&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MacTeX 2018を普通にインストールすると，/usr/local/texlive/2018/bin/x86_64-darwin/bibtexというふうにbinの下にx86_64-darwinというdirectoryが入って，tex関連のコマンドのパスが上手く通らなくなる．そこで，上記の&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live%2FMac&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX LiveMac&lt;/a&gt;に書いてあるように，/usr/local/binディレクトリの下にsymbolic linkを張る．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo /usr/local/texlive/????/bin/*/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記でうまくいかないときは下記のように具体的なディレクトリ名を指定する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo /usr/local/texlive/2018/bin/x86_64-darwin/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;auctexのインストールと設定&#34;&gt;auctexのインストールと設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見）&lt;/li&gt;
&lt;li&gt;preludeをインストールした時点で，auctexもインストールされる．&lt;/li&gt;
&lt;li&gt;auctexの設定などについては以下を参照（手抜き&amp;hellip;.. (^^;;; ）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/auctex/&#34; target=&#34;_blank&#34;&gt;AUCTEX – Sophisticated document creation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?AUCTeX&#34; target=&#34;_blank&#34;&gt;TeX Wiki AUCTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mytexpert.osdn.jp/index.php?Emacs/AUCTeX&#34; target=&#34;_blank&#34;&gt;Emacs/AUCTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/&#34; target=&#34;_blank&#34;&gt;AUCTeX の設定と便利な機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;しかし，org-modeを使うようになってからは直接latex文書を打つことはめっきり少なくなってしまった．それでも，学会発表用のスライドなどはlatexを直接打って，beamer文書を作成し，pdf原稿に変換している．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;latexmk&#34;&gt;latexmk&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacsでbeamerを使って，スライド原稿などを作成していると，C-c C-cするたびにtex文書がcompileされてpdf原稿が出来上がるのを待たなければならず，この待ち時間が結構辛い．そこで，tex ファイルの変更が保存されるたびに自動で裏でlatexmkがcompileしてくれるようにする．latexmkを使う．&lt;/li&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;https://texwiki.texjp.org/?Latexmk&#34; target=&#34;_blank&#34;&gt;TeX Wiki Latexmk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;texlive2018, MacTeXに入っているので，これらを入れていれば別途インストールする必要なし．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.latexmkrcの中に以下のように記述する（ちなみに私はxelatexを使用している）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;$pdflatex = &#39;xelatex -interaction=nonstopmode -synctex=1 %O %S&#39;;
$pdf_mode = 1;
$postscript_mode = $dvi_mode = 0;
$pdf_previewer  = &#39;open -a Skim&#39;;
$preview_continuous_mode = 1;  # equivalent to -pvc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;実際の作業&#34;&gt;実際の作業&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上記のようにセットアップしていることとする．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ターミナルで，texファイルが有るdirectoryに移動し，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;latexmk -pvc -pdf -view=none document.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，texファイルへの変更を保存すると自動でコンパイルされて，設定にもよるが，skimで開いているpdfファイルも更新される．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xelatexについて&#34;&gt;XeLaTeXについて&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以下を参照されたい．特に最初にあげたZRさんの文書は必読！

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zrbabbler.sp.land.to/xelatex.html&#34; target=&#34;_blank&#34;&gt;XeLaTeX で日本語する件について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?XeTeX&#34; target=&#34;_blank&#34;&gt;TeXWiki XeTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suzusime-log.hatenablog.jp/entry/2017/04/15/210327&#34; target=&#34;_blank&#34;&gt;XeLaTeXだとかな混植が簡単にできて最高だという話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など</title>
      <link>/post/japanese_setup/</link>
      <pubDate>Sat, 18 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/japanese_setup/</guid>
      <description>

&lt;p&gt;ようやく，ここからinit.orgの具体的な記述になる．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;coding-systemの設定&#34;&gt;Coding systemの設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.orgに以下のように書き込む&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;​* Coding System Environment
** 言語を日本語にする
   #+BEGIN_SRC lisp
   (set-language-environment &#39;Japanese)
   #+END_SRC
** 極力UTF-8とする
   #+BEGIN_SRC lisp
     (prefer-coding-system &#39;utf-8)
   #+END_SRC
** 日本語フォントをヒラギノにする
​   - 日本語のサイズを指定しないと動的にサイズを変えられるようになる
​   - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/
   #+BEGIN_SRC lisp
     (when (or (eq window-system &#39;mac) (eq window-system &#39;ns))
       (set-face-attribute &#39;default nil
                           :family &amp;quot;Menlo&amp;quot;
                           :height 180) ;; 18pt
       (set-fontset-font nil &#39;japanese-jisx0208
                         (font-spec :family &amp;quot;Hiragino Kaku Gothic ProN&amp;quot;))
       (setq face-font-rescale-alist
             &#39;((&amp;quot;.*Hiragino Kaku Gothic ProN.*&amp;quot; . 1.1))))
   #+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これがEmacs起動時にorg-babel-load-fileにより変換されて下記のようなinit.elとなる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(set-language-environment &#39;Japanese)

(prefer-coding-system &#39;utf-8)

(when (or (eq window-system &#39;mac) (eq window-system &#39;ns))
  (set-face-attribute &#39;default nil
                      :family &amp;quot;Menlo&amp;quot;
                      :height 180) ;; 18pt
  (set-fontset-font nil &#39;japanese-jisx0208
                    (font-spec :family &amp;quot;Hiragino Kaku Gothic ProN&amp;quot;))
  (setq face-font-rescale-alist
        &#39;((&amp;quot;.*Hiragino Kaku Gothic ProN.*&amp;quot; . 1.1))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;つまり，org-modeで書いたinit.orgでの解説はすべて除かれて，lispのみのcodeになってinit.elが生成される．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この利点は，init.elの説明が実に書きやすい点にある（実際にはinit.orgに書くわけだが．．．）．org-modeはアウトライナーなので，階層構造も自由自在である．整理もしやすいし，後で順番を変えるのもCommand + arrow keyを使えば実に簡単である．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;inline-patchの設定&#34;&gt;Inline-patchの設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ついで，最も重要なinline-patchの設定&lt;/li&gt;
&lt;li&gt;参考：&lt;a href=&#34;http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945&#34; target=&#34;_blank&#34;&gt;Macに最新バージョンのEmacsをインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考：&lt;a href=&#34;http://suzuki.tdiary.net/20160103.html&#34; target=&#34;_blank&#34;&gt;El Capitan での日本語入力時に Emacs 内のカーソル色を変更する&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.orgに以下のように書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;​* inline-patch on macosx
** ミニバッファ入力時に自動的に英語入力モードにする
​   - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
   #+BEGIN_SRC lisp
     (when (functionp &#39;mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
       (mac-auto-ascii-mode 1))
   #+END_SRC
** 日本語か英語かで，カーソルの色を変える．
​   - 参考１：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
​   - 参考２：http://suzuki.tdiary.net/20160103.html
   #+BEGIN_SRC lisp
     (when (fboundp &#39;mac-input-source)
       (defun my-mac-selected-keyboard-input-source-chage-function ()
         (let ((mac-input-source (mac-input-source)))
           (set-cursor-color
                                             ; (if (string-match &amp;quot;com.apple.inputmethod.Kotoeri.Roman&amp;quot; mac-input-source)
            (if (string-match &amp;quot;com.google.inputmethod.Japanese.Roman&amp;quot; mac-input-source)
                &amp;quot;#91C3FF&amp;quot; &amp;quot;#FF9300&amp;quot;))))
       (add-hook &#39;mac-selected-keyboard-input-source-change-hook
                 &#39;my-mac-selected-keyboard-input-source-chage-function))
   #+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これがEmacsの起動時に，org-babel-load-fileによって，下記のようにcodeだけ抜き出されて，init.elに書き込まれる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(when (functionp &#39;mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
  (mac-auto-ascii-mode 1))

(when (fboundp &#39;mac-input-source)
  (defun my-mac-selected-keyboard-input-source-chage-function ()
    (let ((mac-input-source (mac-input-source)))
      (set-cursor-color
                                        ; (if (string-match &amp;quot;com.apple.inputmethod.Kotoeri.Roman&amp;quot; mac-input-source)
       (if (string-match &amp;quot;com.google.inputmethod.Japanese.Roman&amp;quot; mac-input-source)
           &amp;quot;#91C3FF&amp;quot; &amp;quot;#FF9300&amp;quot;))))
  (add-hook &#39;mac-selected-keyboard-input-source-change-hook
            &#39;my-mac-selected-keyboard-input-source-chage-function))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで日本語入力中であっても，M-xなどでミニバッファ入力時に自動的に英語入力モードになってくれる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついでに行った日本語か英語かでカーソルの色が変わる設定はわりに有用だが，ときに色が変わらないことがあるが，気にしないことにしている．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する</title>
      <link>/post/init_org/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/init_org/</guid>
      <description>

&lt;p&gt;自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．&lt;/p&gt;

&lt;h2 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.lambda-consulting.jp/2015/11/20/article/&#34; target=&#34;_blank&#34;&gt;俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://futurismo.biz/archives/6057/&#34; target=&#34;_blank&#34;&gt;babel-loader:org-mode で init.el を管理する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uwabami.junkhub.org/log/?date=20111213&#34; target=&#34;_blank&#34;&gt;平衡点(2011-12-13)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ameblo.jp/concello/entry-10786074455.html&#34; target=&#34;_blank&#34;&gt;ORG-Babel + init.el = ?? | くらいまーず　はい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://funwithemacs.wordpress.com/2013/04/21/prelude-init-el-org-babel/&#34; target=&#34;_blank&#34;&gt;Prelude init.el &amp;amp; org-babel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preludeを使いながら-init-dot-orgから個人用のinit-dot-elを自動作成させてemacsを設定する方法&#34;&gt;Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法&lt;/h2&gt;

&lt;h3 id=&#34;基本方針&#34;&gt;基本方針&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む．&lt;/li&gt;
&lt;li&gt;起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む．&lt;/li&gt;
&lt;li&gt;具体的には，init.elで，(require &amp;lsquo;org)した後にorg-babel-load-fileでinit.orgを読み込む．&lt;/li&gt;
&lt;li&gt;しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;preludeの導入&#34;&gt;Preludeの導入&lt;/h3&gt;

&lt;p&gt;前回のポスト（&lt;a href=&#34;../prelude_install&#34;&gt;Emacsの設定（その1）Preludeの導入&lt;/a&gt;）を参考　&lt;/p&gt;

&lt;h3 id=&#34;emac-init-dot-elの作成&#34;&gt;emac-init.elの作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;org)
(defvar my-config-dir (concat user-emacs-directory &amp;quot;personal/&amp;quot;))
(org-babel-load-file
(expand-file-name &amp;quot;init.org&amp;quot; my-config-dir))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;工夫と言っても， &lt;strong&gt;init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう&lt;/strong&gt;  ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;init-dot-orgの作成&#34;&gt;init.orgの作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;これでいよいよ肝心のinit.orgの作成を行う&lt;/li&gt;
&lt;li&gt;org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている．&lt;/li&gt;
&lt;li&gt;具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;code-blockの挿入&#34;&gt;Code blockの挿入&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.lambda-consulting.jp/2015/11/20/article/&#34; target=&#34;_blank&#34;&gt;俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）&lt;/a&gt;で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;org-modeで以下のようにする．（後述する設定が必要）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&amp;lt;l （ここで&amp;lt;TAB&amp;gt;すると．．．）
以下のように展開される
#+begin_src emacs-lisp

#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2019年1月14日追加&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上記の「TABで展開」に関して，Disqusで，mickaushyさんから「&amp;lt;lではなくて&amp;lt;sではないのか」とのご指摘をいただいた．全くそのとおりで，（後述する設定が必要）と自分で書いておきながら，その設定を書き忘れていた．mickaushyさんが指摘されている通りの設定をしている．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考：&lt;a href=&#34;http://pages.sachachua.com/.emacs.d/Sacha.html#org74bcbb3&#34; target=&#34;_blank&#34;&gt;http://pages.sachachua.com/.emacs.d/Sacha.html#org74bcbb3&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(setq org-structure-template-alist
  &#39;((&amp;quot;s&amp;quot; &amp;quot;#+begin_src ?\n\n#+end_src&amp;quot; &amp;quot;&amp;lt;src lang=\&amp;quot;?\&amp;quot;&amp;gt;\n\n&amp;lt;/src&amp;gt;&amp;quot;)
    (&amp;quot;e&amp;quot; &amp;quot;#+begin_example\n?\n#+end_example&amp;quot; &amp;quot;&amp;lt;example&amp;gt;\n?\n&amp;lt;/example&amp;gt;&amp;quot;)
    (&amp;quot;q&amp;quot; &amp;quot;#+begin_quote\n?\n#+end_quote&amp;quot; &amp;quot;&amp;lt;quote&amp;gt;\n?\n&amp;lt;/quote&amp;gt;&amp;quot;)
    (&amp;quot;v&amp;quot; &amp;quot;#+BEGIN_VERSE\n?\n#+END_VERSE&amp;quot; &amp;quot;&amp;lt;verse&amp;gt;\n?\n&amp;lt;/verse&amp;gt;&amp;quot;)
    (&amp;quot;c&amp;quot; &amp;quot;#+BEGIN_COMMENT\n?\n#+END_COMMENT&amp;quot;)
    (&amp;quot;p&amp;quot; &amp;quot;#+BEGIN_PRACTICE\n?\n#+END_PRACTICE&amp;quot;)
    (&amp;quot;l&amp;quot; &amp;quot;#+begin_src emacs-lisp\n?\n#+end_src&amp;quot; &amp;quot;&amp;lt;src lang=\&amp;quot;emacs-lisp\&amp;quot;&amp;gt;\n?\n&amp;lt;/src&amp;gt;&amp;quot;)
    ;; (&amp;quot;l&amp;quot; &amp;quot;#+begin_src lisp\n?\n#+end_src&amp;quot; &amp;quot;&amp;lt;src lang=\&amp;quot;lisp\&amp;quot;&amp;gt;\n?\n&amp;lt;/src&amp;gt;&amp;quot;)
    (&amp;quot;L&amp;quot; &amp;quot;#+latex: &amp;quot; &amp;quot;&amp;lt;literal style=\&amp;quot;latex\&amp;quot;&amp;gt;?&amp;lt;/literal&amp;gt;&amp;quot;)
    (&amp;quot;h&amp;quot; &amp;quot;#+begin_html\n?\n#+end_html&amp;quot; &amp;quot;&amp;lt;literal style=\&amp;quot;html\&amp;quot;&amp;gt;\n?\n&amp;lt;/literal&amp;gt;&amp;quot;)
    (&amp;quot;H&amp;quot; &amp;quot;#+html: &amp;quot; &amp;quot;&amp;lt;literal style=\&amp;quot;html\&amp;quot;&amp;gt;?&amp;lt;/literal&amp;gt;&amp;quot;)
    (&amp;quot;a&amp;quot; &amp;quot;#+begin_ascii\n?\n#+end_ascii&amp;quot;)
    (&amp;quot;A&amp;quot; &amp;quot;#+ascii: &amp;quot;)
    (&amp;quot;i&amp;quot; &amp;quot;#+index: ?&amp;quot; &amp;quot;#+index: ?&amp;quot;)
    (&amp;quot;I&amp;quot; &amp;quot;#+include %file ?&amp;quot; &amp;quot;&amp;lt;include file=%file markup=\&amp;quot;?\&amp;quot;&amp;gt;&amp;quot;)))
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この設定を，init.orgに書き込んでおいて，「&amp;lt;lのあとにTAB」とすれば，上述のように展開される．この次の記事でまとめて書こうと考えていたが，すっかり失念していた．ここに書いておいたほうが確かにわかりやすい．mickaushyさん，ご指摘ありがとうございました．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;codeの記述&#34;&gt;Codeの記述&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;上記の#+begin_src emacs-lispと#+end_srcの間にemacs-lispで設定内容を書く．ここからが便利にできているところ．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code-blockの中にいるときに&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C-c &amp;lsquo;とする&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当該のcode blockだけのバッファが表示される（下図の下のバッファ）&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/CodeBlock_small.jpg&#34; &gt;

&lt;img src=&#34;/img/CodeBlock_small.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この中はemacs-lisp modeでsyntaxも普通に効くので，普通にコードを書く．もちろん，括弧の対応もハイライトで表示される．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C-c nとする&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;すると，インデントも綺麗に整えてくれる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;満足したら，C-c &amp;lsquo;で元のバッファに戻る．整形は綺麗なまま反映される．素晴らしい！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;具体的なinit.orgの内容は次回のポスト以降に記述予定&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）</title>
      <link>/post/prelude_install/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/prelude_install/</guid>
      <description>

&lt;p&gt;昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．&lt;/p&gt;

&lt;h2 id=&#34;preludeとは&#34;&gt;Preludeとは&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/prelude&#34; target=&#34;_blank&#34;&gt;Prelude&lt;/a&gt; Githubはこちら&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preludeのインストール&#34;&gt;Preludeのインストール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになってはいるが心配性なもんで）．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -L https://git.io/epre | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．&lt;del&gt;auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！&lt;/del&gt; &lt;strong&gt;（2018年10月9日修正）&lt;/strong&gt; デフォルトのままではこうならない．下記のように設定する必要あり．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;prelude-helm) ;; Interface for narrowing and search
(require &#39;prelude-helm-everywhere) ;; Enable Helm everywhere
..................
(require &#39;prelude-latex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;helmにすっかり慣らされてしまったのでこのあたりは外している．prelude-latexのコメントアウトを外すことにより，次回にEmacsを立ち上げるときに &lt;strong&gt;auctex&lt;/strong&gt; がインストールされる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;super-save&lt;/strong&gt; について（ &lt;strong&gt;2019年6月1日追記&lt;/strong&gt; ）：この記事を書いてからすぐに気がついたのだが，現在のpreludeはsuper-saveがdefaultで設定されるので，こちらもoffにしないと自動保存が行われてしまう．これは好みの問題だとは思うが，私は嫌いなのでoffにしている．遅まきながら追記しておく．設定の変更は上述のとおりで，M-x customize からsuper-saveを検索し，offにする．下図を参考にしていただきたい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Super-save.jpg&#34; &gt;

&lt;img src=&#34;/img/Super-save.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのインストール</title>
      <link>/post/emacs_install/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/emacs_install/</guid>
      <description>&lt;p&gt;なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここでは&lt;a href=&#34;https://brew.sh/index%5Fja&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt;を使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．&lt;/p&gt;

&lt;p&gt;Emacsで日本語を書いてると，M-xしたときに面倒なことになるので，&lt;a href=&#34;https://ja.wikipedia.org/wiki/インプット%5Fメソッド%5Fエディタ&#34; target=&#34;_blank&#34;&gt;Imput Method Editor (IME)&lt;/a&gt;用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（&lt;a href=&#34;https://github.com/railwaycat/homebrew-emacsmacport&#34; target=&#34;_blank&#34;&gt;Emacs Mac Port&lt;/a&gt;）．ありがたい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew tap railwaycat/emacsmacport
$ brew install emacs-mac --with-modern-icon --with-imagemagick
$ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ndash;with-modern-iconを指定すると、新しいアイコンになる。&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;なお，他のoptionは以下のように打てば分かる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew tap railwaycat/emacsmacport
$ brew info emacs-mac
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
