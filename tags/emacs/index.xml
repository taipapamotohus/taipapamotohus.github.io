<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs | A perfect autumn day</title>
    <link>/tags/emacs/</link>
      <atom:link href="/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <description>emacs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Mon, 14 Oct 2019 00:00:00 +0900</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>emacs</title>
      <link>/tags/emacs/</link>
    </image>
    
    <item>
      <title>Org-rifle</title>
      <link>/post/org-rifle/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0900</pubDate>
      <guid>/post/org-rifle/</guid>
      <description>&lt;p&gt;学会続きで，久方ぶりの更新である．org fileの中を検索する際に，&lt;a href=&#34;../swiper_migemo&#34;&gt;Swiper, ivy, avy, migemoによるEmacsの検索強化&lt;/a&gt;で取り上げた &lt;strong&gt;swiper&lt;/strong&gt; を，もっぱら使用しているのだが，そうすると，ファイル内のどこにいるのかが分からなくなることがある．検索ファイルのパスなどがorg fileの中で分かる検索ソフトはないものかと探したところ，このorg-rifleが見つかった．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alphapapa/org-rifle&#34; target=&#34;_blank&#34;&gt;org-rifle&lt;/a&gt;  ご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dustinlacewell.github.io/emacs.d/#org7646621&#34; target=&#34;_blank&#34;&gt;helm-org-rifle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bnbeckwith.com/bnb-emacs/#orgc5aa916&#34; target=&#34;_blank&#34;&gt;Org Rifle&lt;/a&gt;  Rifle through my org-mode entries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ご本家サイトの最初に，有名な米海兵隊信条（The Creed of a United States Marine）が，以下のように引用されている．&lt;/p&gt;

&lt;p&gt;This is my rifle. There are many like it, but this one is mine. My rifle is my best friend. It is my life. I must master it as I must master my life.&lt;/p&gt;

&lt;p&gt;rifleには，「くまなく探す」という意味もあるので，この命名は，それにかけたシャレのようである．非武装平和主義が信条の私にはよく分からん．．．とにかく，詳細に書かれたご本家サイトを読めば，こんなところを読む必要はないような気もするが（笑），後日の自分のためにまとめておく．&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;いつものように，init.orgに下記のように書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package helm-org-rifle
  :ensure t
  :after (helm org)
  :bind
  (&amp;quot;s-c r r&amp;quot; . helm-org-rifle)
  (&amp;quot;s-c r a&amp;quot; . helm-org-rifle-agenda-files)
  (&amp;quot;s-c r .&amp;quot; . helm-org-rifle-current-buffer)
  (&amp;quot;s-c r d&amp;quot; . helm-org-rifle-directories)
  (&amp;quot;s-c r f&amp;quot; . helm-org-rifle-files)
  (&amp;quot;s-c r D&amp;quot; . helm-org-rifle-org-directory)
  (&amp;quot;s-c o o&amp;quot; . helm-org-rifle-occur)
  (&amp;quot;s-c o a&amp;quot; . helm-org-rifle-occur-agenda-files)
  (&amp;quot;s-c o .&amp;quot; . helm-org-rifle-occur-current-buffer)
  (&amp;quot;s-c o d&amp;quot; . helm-org-rifle-occur-directories)
  (&amp;quot;s-c o d&amp;quot; . helm-org-rifle-occur-directories)
  (&amp;quot;s-c o f&amp;quot; . helm-org-rifle-occur-files)
  (&amp;quot;s-c o D&amp;quot; . helm-org-rifle-occur-org-directory))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;key-bindingは諸般の事情により，s-cを使うことにした（s はoption keyを意味する）．&lt;/p&gt;

&lt;p&gt;また， &lt;strong&gt;helm-org-rifle-show-path を t にセット&lt;/strong&gt; することにより，org file内でのそれぞれのheadingに至るパスが表示される．（実は，デフォルトで t になっている）&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;helm-org-rifleは，エントリーベースで結果が表示される．つまり，org fileの中のheadingとその内容が表示されるので，そこに至るパスが分かる，つまり，どこに位置しているかが分かる．これは思っていた以上に便利である．&lt;/p&gt;

&lt;p&gt;例えば，このブログの原稿をemacsで開いているときに，org-mode, export, wordを含む部分を探したいときは，s-c r . としてから，key wordを打てば，まず下図のようになる．下のバッファでハイライトされている部分は，最上位のheadingであるPostの下のsubheadingである「Emacsのorg-modeで論文を書く（その4：．．．」の下位に目的の部分が含まれていることを示す．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-rifle-1.jpg&#34; &gt;

&lt;img src=&#34;/img/org-rifle-1.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;さらに，ハイライトされている部分で，C-jと打てば，下図のように，上のバッファが該当する領域にジャンプして表示してくれる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-rifle-2.jpg&#34; &gt;

&lt;img src=&#34;/img/org-rifle-2.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;もちろん，検索対象が明確に分かっていて&amp;rdquo;hogehoge.jpg&amp;rdquo;など名前も分かっているのであれば，swiperの方が便利であろう．しかし，「hogeとfugaとhogaに関連している部分はどこだったかな？」というようなときは，このorg-rifleが重宝する．&lt;/p&gt;

&lt;p&gt;さらにもっと色々な使い方ができるようで，該当項目のrefileも可能である．興味のある方は，tabを打ってでてくるメニューを試していただきたい．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to update hugo and academic theme (Part3)</title>
      <link>/post/how-to-update-hugo-and-academic-theme-part3/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0900</pubDate>
      <guid>/post/how-to-update-hugo-and-academic-theme-part3/</guid>
      <description>&lt;p&gt;先日，ブログのアップデートについて2回に分けてまとめたが（&lt;a href=&#34;../how-to-upgrade-hugo-and-academic-theme&#34;&gt;How to update hugo and academic theme (Part1)&lt;/a&gt;, &lt;a href=&#34;../how-to-update-hugo-and-academic-theme-part2&#34;&gt;How to update hugo and academic theme (Part2)&lt;/a&gt;），読み直してみるとhugoとacademic themeの全体的なアップデートのことで終わっていて，具体的な内容のアップデートについてはあまり書いていないことに気がついた．そこで，今回はその辺の細かいところについて，後日の自分のためにも，まとめておくことにした．今回の内容に関しては，ox-hugoのレベル，つまり，org-mode file ではどうすれば良いのか分からず，直接マークダウンファイルを弄らざるを得ない事が多かった．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#自己紹介&#34;&gt;自己紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#widget-in-academic&#34;&gt;Widget in Academic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#home-pageの最初の画像&#34;&gt;home pageの最初の画像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#day--light--and-night--dark--mode&#34;&gt;Day (light) and night (dark) mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;自己紹介&#34;&gt;自己紹介&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/#introduce-yourself&#34; target=&#34;_blank&#34;&gt;Introduce yourself&lt;/a&gt; academicのご本家の解説&lt;/li&gt;
&lt;li&gt;リンク先に書いてあるが，content/authors/admin/_index.mdに自分のプロファイルを書く．不要な部分は#で全てコメントアウトすれば良い．&lt;/li&gt;
&lt;li&gt;avatorを表示するには，画像の名前をavatorとしてcontent/authors/admin/に保存する．例として元々あった画像と置き換えれば良い．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;widget-in-academic&#34;&gt;Widget in Academic&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder&#34; target=&#34;_blank&#34;&gt;Getting Started With the Page Builder&lt;/a&gt; ご本家の解説&lt;/li&gt;
&lt;li&gt;widgetとは．．．ウィジェットである．(^^;;; ブログを組み立てる部品のようなもの．上記のリンク先に詳細に解説されている．例えば， &lt;strong&gt;About&lt;/strong&gt; widjetは読者にブログ主を紹介するためのものである．ただし，実際のプロファイルの内容は前述のようにcontent/authors/admin/_index.mdに記載されている． このブログのように，投稿記事を載せているだけの場合は，ほとんどのwidgetは不要である．&lt;/li&gt;
&lt;li&gt;不要なwidgetは，content/home/のディレクトリから削除すれば良い．参考のために残して置きたければ， それぞれのindex.mdのfront matterの最初の方にある active = true を &lt;strong&gt;active = false&lt;/strong&gt; とすれば良い．下図は， content/home/featured/index.mdのfeatured widget の場合である．これで featured widget は表示されなくなる．&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;+++
# A Featured Publications section created with the Featured Content widget.
# This section displays publications from `content/publication/` which have
# `featured = true` in their front matter.

widget = &amp;quot;featured&amp;quot;  # See https://sourcethemes.com/academic/docs/page-builder/
headless = true  # This file represents a page section.
active = false  # Activate this widget? true/false
weight = 80  # Order that this section will appear.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;home-pageの最初の画像&#34;&gt;home pageの最初の画像&lt;/h2&gt;

&lt;p&gt;ブログの最初のページに掲げる画像だが，アップデート前は， &lt;strong&gt;hero widget&lt;/strong&gt; で設定していた．具体的には，content/home/hero.mdのなかで，front matterに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;+++
# Hero widget.
widget = &amp;quot;hero&amp;quot;
active = true
.....
overlay_img = &amp;quot;headers/hogehoge.jpg&amp;quot;  # Image path relative to your `static/img/` folder.
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いていた．&lt;/p&gt;

&lt;p&gt;academicをアップデート後は，画像の一部しか表示されなくなったために，content/home/hero/index.mdのfront matterに &lt;strong&gt;active = false&lt;/strong&gt; と書いて，hero widget自体を無効にした．代わりに，content/home/slider/index.md のfront matterに　&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;+++
# Slider widget.
widget = &amp;quot;slider&amp;quot;  # See https://sourcethemes.com/academic/docs/page-builder/
headless = true  # This file represents a page section.
active = true  # Activate this widget? true/false
weight = 1  # Order that this section will appear.

# Slide interval.
# Use `false` to disable animation or enter a time in ms, e.g. `5000` (5s).
interval = false

# Slide height (optional).
# E.g. `500px` for 500 pixels or `calc(100vh - 70px)` for full screen.
height = &amp;quot;400px&amp;quot;

# Slides.
# Duplicate an `[[item]]` block to add more slides.
  [[item]]
title = &amp;quot;完璧な秋の日&amp;quot;
content = &amp;quot;とりあえず備忘録として 🚀&amp;quot;
#  align = &amp;quot;center&amp;quot;  # Choose `center`, `left`, or `right`.

  # Overlay a color or image (optional).
  #   Deactivate an option by commenting out the line, prefixing it with `#`.
#  overlay_color = &amp;quot;#666&amp;quot;  # An HTML color value.
overlay_img = &amp;quot;hogefuga.jpg&amp;quot;  # Image path relative to your `static/img/` folder.
#  overlay_filter = 0.5  # Darken the image. Value in range 0-1.
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いて， &lt;strong&gt;slider widget&lt;/strong&gt; を使うようにしたところ，ほぼ望み通りの画像表示となった（画像自体はstatic/img/に置いた ）．&lt;/p&gt;

&lt;h2 id=&#34;day--light--and-night--dark--mode&#34;&gt;Day (light) and night (dark) mode&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/theme/academic/post/getting-started/&#34; target=&#34;_blank&#34;&gt;Academic: the website builder for Hugo&lt;/a&gt; こちらに書いてある機能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アップデートにより，今流行りのdark modeと通常のlight modeを，読者が右上のsun/moon iconをクリックすることで切り替えられるようになった．設定は，config/_default/params.tomlの中で，以下のように &lt;strong&gt;day_night = true&lt;/strong&gt; とすれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;.....
# Enable users to switch between day and night mode?
day_night = true
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
今回は本当に殴り書きメモのような内容．それにhugoに関することは全然なくて，academicのことしか書いてない．看板に偽りありだな．．．(^^;;;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Treemacs and Projectile</title>
      <link>/post/treemacs_projectile/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0900</pubDate>
      <guid>/post/treemacs_projectile/</guid>
      <description>&lt;p&gt;MacのFinderに相当するのは，EmacsではDiredであろう．しかし，なにかのプロジェクトに関わる文書群を管理するということになると，Diredでは力不足である．というか目的が違う．これにぴったりなのが，treemacsであり，そのバックボーンになるのが，Projectileである．これらは，プログラマーでもない自分には必要ないものと思っていたのだが，このblogを書くのに使用しているHugoとそのテーマであるacademicをアップデートする際に，非常に役に立ったので，いまだによく分かっていない自分自身のために書き留めておく．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#projectile&#34;&gt;Projectile&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#treemacs&#34;&gt;Treemacs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;projectile&#34;&gt;Projectile&lt;/h2&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/projectile&#34; target=&#34;_blank&#34;&gt;projectile&lt;/a&gt;   ご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.projectile.mx/en/latest/&#34; target=&#34;_blank&#34;&gt;Projectile: The Project Interaction Library for Emacs&lt;/a&gt;  ご本家の解説&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.aqutras.com/entry/2016/06/15/210000&#34; target=&#34;_blank&#34;&gt;よく使っているEmacsの拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.camph.net/projectile-and-helm/&#34; target=&#34;_blank&#34;&gt;ProjectileとHelm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tuhdo.github.io/helm-projectile.html&#34; target=&#34;_blank&#34;&gt;Exploring large projects with Projectile and Helm Projectile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下はProjectileご本家の解説からの抜粋&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「外部への依存関係を導入することなく，プロジェクトを操作する便利な一連の特徴を提供することを目的とする」そうである．これだけでは何のこっちゃである．&lt;/li&gt;
&lt;li&gt;「例えば，プロジェクトの文書を見つける機能はGNUのfindを使用せずに純粋にEmacs Lispによって実装されている」ということで，そういうことかと思う．&lt;/li&gt;
&lt;li&gt;プロジェクトとは，特定のファイルを含むフォルダーのこと&lt;/li&gt;
&lt;li&gt;version-controlであるgit, muecurial, bazaarなどのrepoはデフォルトでプロジェクトとみなされる．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;以前の記事（&lt;a href=&#34;../prelude_install&#34;&gt;Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）&lt;/a&gt;）に書いたように，私は，Preludeを導入しているが，これにより，prejectileのインストールと設定は既に終わっている．マニュアルで入れる場合は，以下のようにinit.orgに書き込めば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd &amp;quot;s-p&amp;quot;) &#39;projectile-command-map)
  (define-key projectile-mode-map (kbd &amp;quot;C-c p&amp;quot;) &#39;projectile-command-map)
  (projectile-mode +1))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;多分，このソフトは解説を読んでいても，有り難みがさっぱり分からない（私がそうであった）．gitを使って開発をしている人とかにはすごく役に立つと思う．では，プログラマーでもない私の様な素人が使ってなんの役に立つのかと思われるであろうが，これが，案外便利なのである．&lt;/p&gt;

&lt;h4 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h4&gt;

&lt;p&gt;個人的に実際に使うのは，以下の4つぐらい．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;current project内のファイルを検索: C-c p f&lt;/li&gt;
&lt;li&gt;current project内のディレクトリを検索: C-c p d&lt;/li&gt;
&lt;li&gt;current project内のディレクトリ内のファイルを検索: C-c p l&lt;/li&gt;
&lt;li&gt;current project内のファイルの中身をgrepで検索する: C-c p s g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに，&lt;a href=&#34;https://github.com/justbur/emacs-which-key/tree/42a25055163141165aa0269dbca69735e704825c&#34; target=&#34;_blank&#34;&gt;which-key&lt;/a&gt; を導入しておくと，C-c pと打って，「次，なんだっけ？」と考えて1秒経つうちに，下図の様にメニューが下のバッファに表示される．私は，以前に書いた様にPreludeを導入しているが（&lt;a href=&#34;../prelude_install&#34;&gt;Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）&lt;/a&gt;），Preludeの導入により，which-key はインストールと設定が終わっている様であり，何もせずとも，下図の様になった．これは，/Data/MyBlog/TaipapablogをDiredで開けて，そこで，C-c p と打ってから1秒が経過した時の様子である．これでkey-bindは，C-c p まで覚えておけば良いことがわかった．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Projectile-which-key.jpg&#34; &gt;

&lt;img src=&#34;/img/Projectile-which-key.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;例えば，あるディレクトリ内の文書を比較したりコピペしたりしたいときに，すぐに探し出せるのが便利である．文書名を忘れていても，あるキーワードを含む文書を探すということも簡単にできる（current project内のファイルの中身をgrepで検索する: C-c p s g）．そんなことは，別に，Finderのfindを使うなり，Terminalでgrepなりmdfindすればできるわけだが，何も面倒なコマンドを打たずとも，特定のproject，つまり，特定のディレクトリ内だけで検索ができるというのが肝である．これにより，一瞬で検索は終わるし，すぐにそのファイルに飛べる．後述するtreemacsをインストールせずとも，projectileだけでも，かなり，便利になると思う．例えば，下の画像は，Taipapablogというdirectoryの中にあり，_index.mdを名前に含むファイルを検索しているところである．下のバッファにズラズラと該当するファイルが並んでおり，C-jするとその中身が上のバッファに表示される．リターンすれば，そのファイルが開く．下のバッファでは，arrow keyで上下すれば別のファイルに行けて，そこでC-jすれば，その中身が見られる．Returnするまではこれを繰り返すことができる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Projectile-Find.jpg&#34; &gt;

&lt;img src=&#34;/img/Projectile-Find.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;プログラミングをやっているわけではなく，論文を書くのにEmacsを使用している私のようなレベルの人間にとっても，一つのプロジェクト内のファイルを縦横無尽に検索や閲覧ができるのは，かなり，有用である．以下のtreemacsと組み合わせると，さらに便利になる（ような気がしている　笑）．最近のEmacsは画像でもpdfでも閲覧できるので，応用範囲はかなり広い．&lt;/p&gt;

&lt;h2 id=&#34;treemacs&#34;&gt;Treemacs&lt;/h2&gt;

&lt;p&gt;一見，neotreeの様に見えるが，特定のprojectに割り当てられている様な仕組みになっている．分かりにくいが，実際に使ってみれば便利である．treemacs-projectileをインストールすることにより，上述のprojectileと統合した状態で使えて，より便利になる．&lt;/p&gt;

&lt;h3 id=&#34;references-1&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Alexander-Miller/treemacs&#34; target=&#34;_blank&#34;&gt;Treemacs - a tree layout file explorer for Emacs&lt;/a&gt;  ご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.deltabox.site/post/2019/04/emacs%5Fconfig%5Fin%5Fmarch/&#34; target=&#34;_blank&#34;&gt;Emacsの設定を色々いじった -その１-&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jft.rocks/emacs/treemacs-icons.html&#34; target=&#34;_blank&#34;&gt;Using all-the-icons for Treemacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installation-1&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;ご本家の方法を丸写ししておく．以下をinit.orgに書き込めば良い．デフォルト設定なので，これ全部写す必要はなさそうだが．．．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load &#39;winum
    (define-key winum-keymap (kbd &amp;quot;M-0&amp;quot;) #&#39;treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (treemacs--find-python3) 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              &amp;quot;&amp;quot;
          treemacs-goto-tag-strategy             &#39;refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            &amp;quot; &amp;quot;
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        &#39;ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name &amp;quot;.cache/treemacs-persist&amp;quot; user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   &#39;always
          treemacs-recenter-after-project-expand &#39;on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       &#39;alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find &amp;quot;git&amp;quot;)))
                 (not (null (treemacs--find-python3))))
      (`(t . t)
       (treemacs-git-mode &#39;deferred))
      (`(t . _)
       (treemacs-git-mode &#39;simple))))
  :bind
  (:map global-map
        (&amp;quot;M-0&amp;quot;       . treemacs-select-window)
        (&amp;quot;C-x t 1&amp;quot;   . treemacs-delete-other-windows)
        (&amp;quot;C-x t t&amp;quot;   . treemacs)
        (&amp;quot;C-x t B&amp;quot;   . treemacs-bookmark)
        (&amp;quot;C-x t C-t&amp;quot; . treemacs-find-file)
        (&amp;quot;C-x t M-t&amp;quot; . treemacs-find-tag)))

;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage-1&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;上記設定により，projectileと統合した状態で使用することになる．従って，git initしたdirectoryや，git cloneしたdirectoryが対象となる．それらに該当しなければ，directory内に.projectileという 空ファイルを作成すれば良い．まず，最初は， &lt;strong&gt;M-0&lt;/strong&gt; と叩いて，Treemacsを開き，C-c C-p a (treemacs-add-project-to-workspace) でプロジェクトをtreemacsのworkspaceに追加する．下図は，Taipapablogというdirectoryを開けて，そこから2つのファイルを横に並べて開いたところである．&lt;/p&gt;

&lt;p&gt;左のtreemacsのバッファの行番号114のさらに左のfringeに小さな青いマークがついている．行のハイライトとともに現在アクティブなバッファがどれかを示している．複数のプロジェクトや複数のディレクトリに同じ名前のファイルがあるときなどは，今作業しているファイルが，どこにあるファイルがわからなくなって困ることがある（少なくとも私は）．そのようなときに，このfringe indicatorは有用である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Treemacs-fringe.jpg&#34; &gt;

&lt;img src=&#34;/img/Treemacs-fringe.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ところで，上述したようなキーバインドを覚える必要はない．treemacsのバッファにいるときに，？を叩けば，下図のごとく，下にヘルプバッファが開く．楽チンである．ファイルやディレクトリやプロジェクトの追加，削除，名前の変更などはもちろん網羅しており，ファイルの開け方も横に並べたり，縦に並べたりと色々できるようになっている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Treemacs-help.jpg&#34; &gt;

&lt;img src=&#34;/img/Treemacs-help.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;使い始めたときに問題となったのは，treemacsのコマンドはtreemacsのバッファにいるときでないと効かないことである（projectileのコマンドは何処でも効く）．いちいち，マウスでtreemacsのバッファをクリックしてそちらに移ってからコマンドを打たないといけないようではやってられない．これでは，Macのfinderと同じである．そこで，ご本家のサイトをよく読むと， &lt;strong&gt;Winum &amp;amp; ace-window compatibility&lt;/strong&gt; と書いてある．上述したインストールのためのuse-packageの設定のconfigにも， &lt;strong&gt;(define-key winum-keymap (kbd &amp;ldquo;M-0&amp;rdquo;) #&amp;lsquo;treemacs-select-window)&lt;/strong&gt; と書いてある．つまり，横や縦に並べたバッファ間の移動は， &lt;strong&gt;C-x o&lt;/strong&gt; の後に行きたいバッファの番号を打てばよく，treemacsのバッファに戻るには， &lt;strong&gt;M-0&lt;/strong&gt; を打てば良い．下図は，先ほどの図の状態で， &lt;strong&gt;C-x o&lt;/strong&gt; を打った時の様子である．茶色の小さな数字がそれぞれのバッファに割り当てられた番号である．&lt;/p&gt;

&lt;p&gt;なお，winumのインストールについては，&lt;a href=&#34;https://github.com/deb0ch/emacs-winum&#34; target=&#34;_blank&#34;&gt;emacs-winum&lt;/a&gt; を参照されたい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Treemacs-winum.jpg&#34; &gt;

&lt;img src=&#34;/img/Treemacs-winum.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;とは言うものの，やはり，マウスを使う方が便利なこともある．Treemacsはmouse interfaceにも完全に対応しており，右クリックでpopup-menuが出るようになっている（下図参照）．よくできている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Treemacs-mouse.jpg&#34; &gt;

&lt;img src=&#34;/img/Treemacs-mouse.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;まだ使い始めたばかりであり，projectileとtreemacsについて，まだまだ理解しないといけないことがたくさんあるが，日常的に使用できるところまではなんとかなったかな．．．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to update hugo and academic theme (Part 1)</title>
      <link>/post/how-to-upgrade-hugo-and-academic-theme/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0900</pubDate>
      <guid>/post/how-to-upgrade-hugo-and-academic-theme/</guid>
      <description>&lt;p&gt;最近のニュースを見ていて思い出した言葉がある．&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;True patriotism hates injustice in its own land more than anywhere else.” ― Clarence Darrow&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Patriotism is the last refuge of a scoundrel.&amp;rdquo; ― Samuel Johnson&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Violence is the last refuge of the incompetent.&amp;rdquo;&amp;rdquo; ― Salvor Hardin ( Isaac Asimov)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3番目はオマケ&lt;/p&gt;

&lt;p&gt;閑話休題，以前の記事（&lt;a href=&#34;../horizontal_scrollbar&#34;&gt;How to add horizontal scrollbar for codeblock in academic theme of hugo&lt;/a&gt;）で触れたように，このブログは，Hugoという静的サイトジェネレーター（themeはacademic）で作成している．&lt;/p&gt;

&lt;p&gt;実際には，ox-hugoというemacsのorg-modeのパッケージを用いて書いて，それをhugoのmarkdownとしてexportしている．同記事内で，academic themeのupgradeが速すぎて全く追随できていないと書いた．記事はゴールデンウィークの5月4日に投稿しており，既に3ヶ月以上が経過している．この夏休みにようやくupdateすることができたので，後日のためにまとめておく．&lt;/p&gt;

&lt;p&gt;本来なら，まずox-hugoを用いたhugoでのブログの作り方をまとめるべきであろうが，ネットを少し探せば，私のような素人よりはるかに詳しい方が懇切丁寧に解説しているサイトが山のように存在する．また，ブログ設定の一から十まで溯る気力もないので，順番が逆になるが，今回はアップグレードからということにした．素人がアップデートに困ってあれこれやったことの詳細なメモということで．．．(^^;;;&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hugoのupdate&#34;&gt;Hugoのupdate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ox-hugo-update&#34;&gt;ox-hugo update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#academic-theme-update&#34;&gt;Academic theme update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#migrate-content&#34;&gt;Migrate Content&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#front-matter&#34;&gt;Front matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#featured-image&#34;&gt;Featured image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#recent-postsのサマリが長すぎる&#34;&gt;Recent Postsのサマリが長すぎる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#recent-postsの画像表示のフォーマット変更&#34;&gt;Recent Postsの画像表示のフォーマット変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alerts&#34;&gt;Alerts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#warn-dot-dot-dot-dot-dot-found-no-layout-file-for-css-for-home&#34;&gt;WARN &amp;hellip;.. found no layout file for &amp;ldquo;CSS&amp;rdquo; for &amp;ldquo;home&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#追記&#34;&gt;追記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;HUGO&lt;/a&gt;  ご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;  academic themeのご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mit.edu/~k2smith/post/getting-started/&#34; target=&#34;_blank&#34;&gt;Getting started with the Academic framework for Hugo&lt;/a&gt;  academic themeのインストール&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Update&lt;/a&gt;  academic themeのupdateについて&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ox-hugo.scripter.co&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;  ox-hugoのご本家&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hugoのupdate&#34;&gt;Hugoのupdate&lt;/h2&gt;

&lt;p&gt;hugoを最新版にする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew upgrade hugo
..........
$ hugo version
Hugo Static Site Generator v0.57.2/extended darwin/amd64 BuildDate: unknown

$ brew info hugo
hugo: stable 0.57.2 (bottled), HEAD
Configurable static site generator
https://gohugo.io/
/usr/local/Cellar/hugo/0.57.2 (41 files, 59.2MB) *
Poured from bottle on 2019-08-19 at 21:45:45
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hugo.rb
==&amp;gt; Dependencies
Build: go ✘
==&amp;gt; Options
--HEAD
Install HEAD version
==&amp;gt; Caveats
Bash completion has been installed to:
/usr/local/etc/bash_completion.d
==&amp;gt; Analytics
install: 23,734 (30 days), 46,557 (90 days), 196,750 (365 days)
install_on_request: 22,865 (30 days), 45,011 (90 days), 186,183 (365 days)
build_error: 0 (30 days)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ox-hugo-update&#34;&gt;ox-hugo update&lt;/h2&gt;

&lt;p&gt;ox-hugoを最新版にする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;M-x package-utils-upgrade-by-name
...........
ox-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C-h C-l ox-hugo-pkg.elすると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-package &amp;quot;ox-hugo&amp;quot; &amp;quot;20190802.1755&amp;quot; &amp;quot;Hugo Markdown Back-End for Org Export Engine&amp;quot;
  &#39;((emacs &amp;quot;24.4&amp;quot;)
    (org &amp;quot;9.0&amp;quot;))
  :keywords
  &#39;(&amp;quot;org&amp;quot; &amp;quot;markdown&amp;quot; &amp;quot;docs&amp;quot;)
  :url &amp;quot;https://ox-hugo.scripter.co&amp;quot;)
;; Local Variables:
;; no-byte-compile: t
;; End:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最新版であることが確認できる．&lt;/p&gt;

&lt;h2 id=&#34;academic-theme-update&#34;&gt;Academic theme update&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Update&lt;/a&gt; のサイトには，以下の3つの場合でのupdateの方法が書かれている．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you installed Academic Kickstart&lt;/li&gt;
&lt;li&gt;If you installed by Git cloning hugo-academic&lt;/li&gt;
&lt;li&gt;If you installed from a ZIP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;問題は，自分がどうやってインストールしたかを忘れている（！）ことだった&amp;hellip;..(^^;;;  versionも 2.4.0とかなり古い． しかも，恐らくは，数種類の方法を重ねて試した結果が現在の状況と考えられるので，ドキュメントの通りにやってもうまくいくはずがない気がした．&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    以下のhugo new citeを行ってから，academic をgit cloneする方法はお勧めしない．この方法では，git repositryの中にgit repositoryを埋め込むことになりエラーが出る．1のAcademic Kickstartを使う方法が良い．次回の記事（&lt;a href=&#34;../how-to-update-hugo-and-academic-theme-part2&#34;&gt;How to update hugo and academic theme (Part2)&lt;/a&gt;）を参考にしていただきたい．以下の記述は自戒のために残しておく．
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;del&gt;色々悩んだ末に，2の方法をいちから，やり直すことにした．要するにクリーンインストールを行い，その上に，現在までの内容を流し込むという泥臭いやり方を選択したわけである．&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;以下，&lt;a href=&#34;http://www.mit.edu/~k2smith/post/getting-started/&#34; target=&#34;_blank&#34;&gt;Getting started with the Academic framework for Hugo&lt;/a&gt; に沿って，まず，hugoで新しいサイトを作成し，そこにacademic themeをgitでインストールし，最新版の4.4.0になっていることを確認する．&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/hoge
$ hugo new site Taipapablog
$ cd Taipapablog
$ pwd
/Data/hoge/Taipapablog
$ git clone https://github.com/gcushen/hugo-academic.git themes/academic
$ less themes/academic/data/academic.toml
# Academic

version = &amp;quot;4.4.0&amp;quot;
themes/academic/data/academic.toml (END)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;そして，academicのexampleSite folder の中身を全てwebsite root folder（今回はTaipapablog directory）にコピーする．これらは，config fileなどを含んでおり，自分のウェブサイトの鋳型になる．&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd
/Data/hoge/Taipapablog
$ ls themes/academic/exampleSite/
config/  content/ static/
$ cp -av themes/academic/exampleSite/* .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;ここで，Hugo serverをwebsite root folderから立ち上げる．&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd
/Data/hoge/Taipapablog
$ hugo server --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;これで，ブラウザで，url windowにlocalhost:1313と打てば，Academic powered websiteのデモが立ち上がる．ここまでは実に簡単である．&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;migrate-content&#34;&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/#migrate-content&#34; target=&#34;_blank&#34;&gt;Migrate Content&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;ここから以前の記事の内容を流し込んでいくわけであるが，academicの新旧versionの間には断絶があって，単純に流し込んで終わりというわけにはいかない．これも，上書きアップデート（？）のようなやり方を諦めた理由である．この断絶を &lt;strong&gt;&amp;ldquo;Breaking changes&amp;rdquo;&lt;/strong&gt; と呼んでいる．これを乗り越えてブログの内容を移行するための&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34; target=&#34;_blank&#34;&gt;academic-scripts&lt;/a&gt; のリンクが上記ページにある．これは，hugoの新しい機能である&lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34; target=&#34;_blank&#34;&gt;Page Bundles&lt;/a&gt; への移行を自動化するスクリプトである．簡単に言えば，Page Bundlesとは，&lt;a href=&#34;https://gohugo.io/content-management/page-resources/&#34; target=&#34;_blank&#34;&gt;Page Resources&lt;/a&gt; をグループ化する方法であり，詳細は，リンク先を参照されたい．Page Bundlesは，下記のような構造になる．つまり，ファイルの構成が変わってmdファイルひとつだったのが，フォルダ（ディレクトリ）となり，mdファイルの名前はindex.mdとなり，かつ，featured.jpgが自動的にページの冒頭に置かれるようになる．同一記事に使用する画像などは，同じディレクトリ内にまとめることができる．以下は，アップデート前後の /Data/hoge/Taipapablog/content/post の比較である．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Old version
$ tree -L 2
.
├── Different-segment-to-each-facet-in-ggplot.md
├── Emacs_Install.md
├── EmbedRplotInBlog.md
├── ExportRplot.md
├── FullTextSearch.md
├── Japanese_setup.md
..........

Current version
$ tree -L 2
.
├── Different-segment-to-each-facet-in-ggplot
│   ├── featured.jpg
│   └── index.md
├── Emacs_Install
│   ├── featured.jpg
│   └── index.md
├── EmbedRplotInBlog
│   ├── featured.jpg
│   └── index.md
├── ExportRplot
│   ├── featured.jpg
│   └── index.md
├── FullTextSearch
│   ├── featured.jpg
│   └── index.md
├── Japanese_setup
│   ├── featured.jpg
│   └── index.md
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほどのスクリプトは，このフォルダ構成への移行を自動化してくれる．これをgitでクローンする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/hoge
$ ls
Taipapablog
$ git clone https://github.com/sourcethemes/academic-scripts.git
Cloning into &#39;academic-scripts&#39;...
remote: Enumerating objects: 27, done.
remote: Total 27 (delta 0), reused 0 (delta 0), pack-reused 27
Unpacking objects: 100% (27/27), done.
$ ls
Taipapablog
academic-scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このacademic-scriptsの中身を見ると，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd academic-scripts/
$ ls
LICENSE.md
README.md
refactor-homepage-sections-to-bundles.sh*
refactor-pages-to-page-bundles.sh*
refactor_page_bundles_to_pages.sh*
$ less refactor-pages-to-page-bundles.sh
#!/bin/sh

# Helps migrate from v2.4.0 to v3.0.0
#
# Refactor a page named `X.md` to `content/&amp;lt;section&amp;gt;/X/index.md` to use the
# new page bundles and featured image system
#
..........
$ less refactor-homepage-sections-to-bundles.sh
#!/usr/bin/env bash

# Helps migrate from v4.1 to v4.2
#
# Refactors homepage sections named `content/home/X.md` to `content/home/X/index.md`,
# treating homepage sections as headless page bundles in Hugo.
#
# - E.g. an About section named `content/home/about.md` is converted to `content/home/about/index.md`
..........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という具合に，確かに，pageからpage bundlesへの移行を自動でやってくれるようになっている．そこで，これまでのブログをTaipapablog_OLDとして保存し，そのポスト（投稿記事）にこのスクリプトを適用する．その後，これらの記事を全て新しい方のTaipapablogのpostにコピーする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/hoge
$ ls
Taipapablog
Taipapablog_OLD
academic-scripts
$ cd Taipapablog_OLD/
$ pwd
/Data/hoge/Taipapablog_OLD
$ ../academic-scripts/refactor-pages-to-page-bundles.sh
./content/posts/annotation.md -&amp;gt; ./content/posts/annotation/index.md
./content/post/org-html-export-theme.md -&amp;gt; ./content/post/org-html-export-theme/index.md
./content/post/org-mode_paper_2.md -&amp;gt; ./content/post/org-mode_paper_2/index.md
..........
$ cp -a content/post/* ../Taipapablog/content/post/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降の作業は全て，新しい方のTaipapablog directoryで行う．こちらのcontent/home/にも先ほどのスクリプトのホームページセクション用のものを適用しておいた．こちらは不要かもしれない．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ../academic-scripts/refactor-homepage-sections-to-bundles.sh
./content/home/search.md -&amp;gt; ./content/home/search/index.md
./content/home/hero_carousel.md -&amp;gt; ./content/home/hero_carousel/index.md
./content/home/hero.md -&amp;gt; ./content/home/hero/index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにより，/Data/hoge/Taipapablog/content/posts/*.mdや/Data/hoge/Taipapablog/content/home/.mdが，先ほどtreeで示したようなディレクトリ構造になる．&lt;/p&gt;

&lt;p&gt;ここから先は，config/, content/, content/home/, content/post/の中身を弄って，アップデートする前と同じになるように修正していく．私は，blogをhugoのmarkdown自体はほとんど弄ることなく，org-modeのパッケージであるox-hugoで書いているので，そちらを中心に述べる．&lt;/p&gt;

&lt;h3 id=&#34;front-matter&#34;&gt;Front matter&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;content/home/には，demo, experienceなど多くのwidgetが入っているが，ほとんど使用してないので，それぞれのindex.mdのfront matterの最初の方にあるactive = trueを &lt;strong&gt;active = false&lt;/strong&gt; にする．&lt;/li&gt;
&lt;li&gt;上記のスクリプトを適用した際に，headless = true  # This file represents a page section. が二重になることがあったので，余分な部分は全て削除した．&lt;/li&gt;
&lt;li&gt;新規ポストを投稿する際に，page bundlesの形式になるようにするために，propertiesに &lt;strong&gt;EXPORT_HUGO_BUNDLE&lt;/strong&gt; を使用する．詳細は次節で述べる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;subtitle&lt;/strong&gt; を使用するのが可能となった．もしかして以前から？　以下のように，ox-hugoでpropertiesに追加すれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle &amp;quot;Hugoとacademic テーマのアップデート&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;featured-image&#34;&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34;&gt;Featured image&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;各ポストの冒頭に掲げていた画像は，アップデート前は明示的に場所と名前を指示しないといけなかったが，アップデート後はPage Bundlesとなり，同じフォルダにfeatured.jpgとして置いておけば，自動的にその記事の冒頭に表示されるようになる．各画像の移動が面倒であったが，今後は楽になりそう．．．(^^&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ox-hugoから，Page Bundlesとしてexportするためには，propertiesに &lt;strong&gt;EXPORT_HUGO_BUNDLE&lt;/strong&gt; を使って以下のように書けば，Front Matterとしてexportされる．2個目の項目追加からは，*EXPORT_HUGO_BUNDLE+* とする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;:PROPERTIES:
:EXPORT_HUGO_BUNDLE: how-to-upgrade-hugo-and-academic-theme
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle &amp;quot;Hugoとacademic テーマのアップデート&amp;quot;
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image &#39;((placement . 3) (caption . &amp;quot;Ancient greek pottery, Musée du Louvre&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Featured imageをどのような大きさで表示するかについては，上述のリンク先に説明がある．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Featured image
# To use, place an image named `featured.jpg/png` in your page&#39;s folder.
# Placement options: 1 = Full column width, 2 = Out-set, 3 = Screen-width
# Focal point options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight
# Set `preview_only` to `true` to just use the image for thumbnails.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずは，旧記事に合わせて，スクリーン幅となるplacement = 3とした．ox-hugoでのpropertiesで上述のように指定する．captionのつけ方も上記の通り．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recent-postsのサマリが長すぎる&#34;&gt;Recent Postsのサマリが長すぎる！&lt;/h3&gt;

&lt;p&gt;Home ページの下方には，Recent Postsがあり，最近の記事のサマリが画像とともに表示される．この表示形式は以下のように5種類が選べる（&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#view&#34; target=&#34;_blank&#34;&gt;View&lt;/a&gt;）．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Several widgets have a view option to let you choose the layout of the widget. The following layouts are available:

1 = List (previously Simple)
2 = Compact (previously Stream)
3 = Card (previously Detailed)
4 = Citation (previously APA and MLA), only available for publications
Optionally, edit the value of citation_style in params.toml to APA or MLA
5 = Showcase (large images), only available for projects
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中から，以前のversionに一番近い 3，つまり，カード形式を選択した．しかし，画像のcropがイマイチで，しかもサマリがサマリと言えないくらいに長い．updateする前のフォーマットが気に入っていたので，この変化は残念．&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-a-blog-post&#34; target=&#34;_blank&#34;&gt;Create a blog post&lt;/a&gt; に記載されているように， &lt;strong&gt;&amp;lt;!&amp;ndash;more&amp;ndash;&amp;gt;&lt;/strong&gt; を記事本文の適当なところに挿入して，サマリの長さを調整することにした．&lt;/p&gt;

&lt;h3 id=&#34;recent-postsの画像表示のフォーマット変更&#34;&gt;Recent Postsの画像表示のフォーマット変更&lt;/h3&gt;

&lt;h4 id=&#34;references-1&#34;&gt;References&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/crop-less-with-focal-point/15387&#34; target=&#34;_blank&#34;&gt;Crop Less with Focal Point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/image-processing/&#34; target=&#34;_blank&#34;&gt;Image Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/partials/&#34; target=&#34;_blank&#34;&gt;Partial Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ottan.xyz/hugo-template-partial-define-block-20190101/&#34; target=&#34;_blank&#34;&gt;Hugoのテンプレート構文「template」「partial」「block」「define」のわかりやすい解説&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述のfeatured imageを記事のheader imageとして表示する際のサイズやクロップのやり方が気に入らないので，変更することにした．cardでacademic themeに全文検索をかけると， &lt;strong&gt;li_card.html&lt;/strong&gt; というファイルが見つかり，どうやら，これが，カード形式のテンプレート（&lt;a href=&#34;https://gohugo.io/templates/partials/&#34; target=&#34;_blank&#34;&gt;Partial Templates&lt;/a&gt;）と推察され，これを変更すれば良いと気がついた．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Data/hoge/Taipapablog/layouts&lt;/em&gt; に &lt;strong&gt;partials&lt;/strong&gt; directoryを作成し，/Data/hoge/Taipapablog/themes/academic/layouts/partials/ &lt;strong&gt;li_card.html&lt;/strong&gt; をコピーする．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugoは以下の優先順位で読み込まれる．（&lt;a href=&#34;https://gohugo.io/templates/partials/#partial-template-lookup-order&#34; target=&#34;_blank&#34;&gt;Partial Template Lookup Order&lt;/a&gt;）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;layouts/partials/*&lt;PARTIALNAME&gt;.html&lt;/li&gt;
&lt;li&gt;themes/&lt;THEME&gt;/layouts/partials/*&lt;PARTIALNAME&gt;.html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;したがって，1にコピーしたli_card.htmlを弄れば，それが優先されることになる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下のように，li_card.htmlの53行目を変更する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;.....
52 {{ with $resource }}
53 {{ $image := .Fill (printf &amp;quot;918x517 q90 %s&amp;quot; $anchor) }}
54 &amp;lt;a href=&amp;quot;{{ $item.RelPermalink }}&amp;quot;&amp;gt;
.....

-----&amp;gt;
.....
53 {{ $image := .Resize &amp;quot;900x&amp;quot;  }}
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは， &lt;a href=&#34;https://gohugo.io/content-management/image-processing/&#34; target=&#34;_blank&#34;&gt;Image Processing&lt;/a&gt; に解説されているように，FillをResizeに変更しただけであるが，ほぼ望み通りの画像表示となった．&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;alerts&#34;&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34; target=&#34;_blank&#34;&gt;Alerts&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;これは今回見つけた新たな小道具&lt;/li&gt;
&lt;li&gt;ノート，ヒント，警告などに有用．&lt;/li&gt;
&lt;li&gt;いくつか方法はあるが，shortcodeを使うのが一番簡単．&lt;br /&gt;
｛{% alert note %}}&lt;br /&gt;
  A Markdown aside is useful for displaying notices, hints, or definitions to your readers.&lt;br /&gt;
  ｛{% alert  %}}&lt;br /&gt;
により，（最初の &lt;strong&gt;&amp;rdquo;{&amp;rdquo;&lt;/strong&gt; はescapeできないので全角の &lt;strong&gt;&amp;ldquo;｛&amp;rdquo;&lt;/strong&gt; にしていることに注意）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;となる．&lt;/p&gt;

&lt;p&gt;｛{% alert warning %}}&lt;br /&gt;
 A Markdown aside is useful for displaying notices, hints, or definitions to your readers.&lt;br /&gt;
 ｛{% /alert %}}&lt;br /&gt;
 は，以下のようになる．（最初の &lt;strong&gt;&amp;rdquo;{&amp;rdquo;&lt;/strong&gt; はescapeできないので全角の &lt;strong&gt;&amp;ldquo;｛&amp;rdquo;&lt;/strong&gt; にしていることに注意）&lt;br /&gt;
 &lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;また，使ってみよう．&lt;/p&gt;

&lt;h3 id=&#34;warn-dot-dot-dot-dot-dot-found-no-layout-file-for-css-for-home&#34;&gt;WARN &amp;hellip;.. found no layout file for &amp;ldquo;CSS&amp;rdquo; for &amp;ldquo;home&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;アップデートしていじっているうちに，
  &lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    WARN 2019/08/23 0028 found no layout file for &amp;ldquo;CSS&amp;rdquo; for &amp;ldquo;home&amp;rdquo;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;のような警告が出るようになった（早速使ってみた）．サイト自体のビルドはできて，実害はないが，気持ちが悪いので，ネットを探ると，academicの作者のGitHub pageに，そのものズバリの &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues/1060&#34; target=&#34;_blank&#34;&gt;Featurette widget does not change from example #1060&lt;/a&gt; があった．&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have updated to the unreleased version. You&amp;rsquo;ll need to remove the &amp;ldquo;CSS&amp;rdquo; output entry from config.Toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということなので，以下のように作業した．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vi /Data/hoge/Taipapablog/config/_default/config.toml
.....
45 [outputs]
46   home = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;WebAppManifest&amp;quot;, &amp;quot;CSS&amp;quot;]
47   section = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot; ]
.....
-----&amp;gt;
.....
45 [outputs]
46 #  home = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;WebAppManifest&amp;quot;, &amp;quot;CSS&amp;quot;]
47   home = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;WebAppManifest&amp;quot;]
48   section = [ &amp;quot;HTML&amp;quot;, &amp;quot;RSS&amp;quot; ]
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;46行目の&amp;rdquo;CSS&amp;rdquo;を削除するだけで，警告が出なくなった．(^o^)&lt;/p&gt;

&lt;p&gt;見え方にまだまだ不満はあるが，こんなところだろうか．アップデートしてから，貼り付けた画像の上にマウスを持っていくと，拡大鏡のアイコンになり，クリックすると2段階で拡大されるようになった．他にも変化はあるようだが，全然活用できていない．ぼちぼち触っていって，面白いことがあれば，また，まとめてみよう．．．&lt;/p&gt;

&lt;h2 id=&#34;追記&#34;&gt;追記&lt;/h2&gt;

&lt;p&gt;githubにdeployした時に，以下のようなエラーが生じた．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;warning: adding embedded git repository: themes/academic
hint: You&#39;ve added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint:
hint: 	git submodule add &amp;lt;url&amp;gt; themes/academic
hint:
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint:
hint: 	git rm --cached themes/academic
hint:
hint: See &amp;quot;git help submodule&amp;quot; for more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーは吐くものの，deployはできて，ウェブでサイトも見られるので，疲れたし（笑），しばらくは，このままで行くことにする．themeのインストールは，submoduleで行うべきだったと，今更にして気がついた．次回アップデートする時にやってみよう．．．(^^;;;&lt;/p&gt;

&lt;p&gt;で，結局，気になって，academic themeのインストールをやり直した（笑）．次回の記事（&lt;a href=&#34;../how-to-update-hugo-and-academic-theme-part2&#34;&gt;How to update hugo and academic theme (Part2)&lt;/a&gt;）を参照されたい．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacsでpdfを読む (pdf-tools) (2019.07.17追記)</title>
      <link>/post/pdf-tools/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0900</pubDate>
      <guid>/post/pdf-tools/</guid>
      <description>&lt;p&gt;Emacsでpdf文書を読もうとするとdefaultではDocViewで読むことになるが，解像度がイマイチで動きもややモッサリとしていて使い勝手が悪かったため，サクッと止めて，skimを使っている．ただ，pdf-toolsというのがあって，こちらは割とスグレモノらしいとの噂は聞いていた．そこで，今回はこれを試してみることにした．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#pdf-tools&#34;&gt;PDF Tools&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#インストール&#34;&gt;インストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#追記-2019年7月17日&#34;&gt;追記（2019年7月17日）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#設定&#34;&gt;設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用法&#34;&gt;使用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org-pdfview&#34;&gt;org-pdfview&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#インストールと設定&#34;&gt;インストールと設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pdf-toolsと他のアプリ-skim-previewなど-との比較&#34;&gt;PDF Toolsと他のアプリ（skim, Previewなど）との比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;pdf-tools&#34;&gt;PDF Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考１：&lt;a href=&#34;https://github.com/politza/pdf-tools&#34; target=&#34;_blank&#34;&gt;pdf-tools&lt;/a&gt;　ご本家&lt;/li&gt;
&lt;li&gt;参考２：&lt;a href=&#34;http://blog.livedoor.jp/hiroaki8270/archives/22871970.html&#34; target=&#34;_blank&#34;&gt;emacsをPDF Viewerにしよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考３：&lt;a href=&#34;https://ubutun.blogspot.com/2014/05/emacstexpdf.html&#34; target=&#34;_blank&#34;&gt;emacs内でTeX文書の作成からpdf閲覧まで行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考４：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/6x9gtb/pdftools%5Fon%5Fmacos/&#34; target=&#34;_blank&#34;&gt;pdf-tools on macos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考５：&lt;a href=&#34;http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/&#34; target=&#34;_blank&#34;&gt;VIEW AND ANNOTATE PDFS IN EMACS WITH PDF-TOOLS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考６：&lt;a href=&#34;http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/&#34; target=&#34;_blank&#34;&gt;MORE PDF-TOOLS TWEAKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考７：&lt;a href=&#34;http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/&#34; target=&#34;_blank&#34;&gt;EVEN MORE PDF-TOOLS TWEAKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考８：&lt;a href=&#34;https://github.com/politza/pdf-tools/issues/189&#34; target=&#34;_blank&#34;&gt;pdf-tools pretty much unusable with linum-mode enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考９：&lt;a href=&#34;https://www.youtube.com/watch?v=LFO2UbzbZhA&#34; target=&#34;_blank&#34;&gt;Using Emacs 44 - An Org mode and PDF-tools workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ご本家のイントロに書いてあるが，DocViewのようにghostscriptで予めrenderしておくのではなく，on demandでページを作成し，メモリーに貯めておく仕組みになっている．このrenderingは，popplerという名前の特別なライブラリーによって行われるが，これはepdfinfoと呼ばれるserver programの中で走っている．こいつの仕事はEmacsからの要求を連続して読んで適切な結果，すなわち，PDFのページのPNG imageを作成することである．&lt;/p&gt;

&lt;p&gt;　　「実際のところ，PDFファイルを表示するのはPDF toolsの仕事の一部に過ぎない．popplerは文書に関する全ての情報を提供でき，かつ，それを修飾もできるので，遥かにたくさんのことができる」とイントロの最後で大見得を切って，何ができるかを示す&lt;a href=&#34;https://www.dailymotion.com/video/x2bc1is?forcedQuality=hd720&#34; target=&#34;_blank&#34;&gt;動画&lt;/a&gt;を紹介している．&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;OSXは公式にはサポートされていないが，コンパイルできたと報告されている，と書いてあり，実際，以下のように出来た．まず，homebrewでpopplerをインストールする．もし，まだ，automakeを入れていなければそれもhomebrewでインストールする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install poppler automake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついで，pkg-configをexportでいじるようなことが書いてあるが，特にそれはせずともよかった．ただし，pdf-toolsのインストールの際にコンパイルエラーが出た．どういうわけか， &lt;strong&gt;pdf-tools          20180428.1527&lt;/strong&gt; ではだめだったが，幸い， &lt;strong&gt;pdf-tools          20181221.1913&lt;/strong&gt; が出たので，参考4：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/6x9gtb/pdftools%5Fon%5Fmacos/&#34; target=&#34;_blank&#34;&gt;pdf-tools on macos&lt;/a&gt;を頼りに，これにアップデートしたところ，あとは問題なくインストールできた．&lt;/p&gt;

&lt;h3 id=&#34;追記-2019年7月17日&#34;&gt;追記（2019年7月17日）&lt;/h3&gt;

&lt;p&gt;その後何度かpdf-toolをコンパイルすることがあったが，「libffiがどこにあるか分からん」というようなエラーメッセージが出て，「pkg-configでなんとかせい」と怒られるようになった．つまり，ご本家に書いてある通りになったわけである．そこで，libffiのpkgconfigを探して，それをPKG_CONFIG_PATHに含めるようにした．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mdfind -name pkgconfig | grep libffi
/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig
$ export PKG_CONFIG_PATH=/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig
$ /Applications/Emacs.app/Contents/MacOS/Emacs --debug-init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで下記のように設定していると，以下のようにpdf-toolが無事にコンパイルされる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/build/server/autobuild -i /Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/
---------------------------
Installing packages
---------------------------
Skipping package installation (already installed)

---------------------------
Configuring and compiling
---------------------------
./configure -q --bindir=/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/ &amp;amp;&amp;amp; make -s

Is case-sensitive searching enabled ?     yes
Is modifying text annotations enabled ?   yes
Is modifying markup annotations enabled ? yes


---------------------------
Installing
---------------------------
make -s install
/usr/local/bin/gmkdir -p &#39;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018&#39;
/usr/local/bin/ginstall -c epdfinfo &#39;/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018&#39;
make[1]: Nothing to be done for `install-data-am&#39;.

===========================
Build succeeded. :O)
===========================
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;設定&#34;&gt;設定&lt;/h3&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書けばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  ;; initialise
  (pdf-tools-install)
  ;; PDF Tools does not work well together with linum-mode
  (add-hook &#39;pdf-view-mode-hook (lambda() (nlinum-mode -1)))
  ;; open pdfs scaled to fit page
  ;; (setq-default pdf-view-display-size &#39;fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd &amp;quot;C-s&amp;quot;) &#39;isearch-forward)
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下に内容を説明する．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pdf-tools-installにより最初のときにepdfinfoがコンパイルされる．&lt;/li&gt;
&lt;li&gt;行番号を表示するとうまく動かない．私はnlinum-modeを使っているのでpdf-view-modeの際には止めておく．&lt;/li&gt;
&lt;li&gt;ハイライトした部分には自動的に注釈を加える．&lt;/li&gt;
&lt;li&gt;swiperはうまく動かないので，C-sを普通のisearchに戻す&lt;/li&gt;
&lt;li&gt;＋とーで拡大，縮小だが，これを10%ずつにする．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使用法&#34;&gt;使用法&lt;/h3&gt;

&lt;p&gt;上記のインストールと設定を行えば，C-x C-fでも，drag &amp;amp; dropでも，Emacsのpdf toolsのpdf-view-modeでpdfが開くようになる．ここまでくれば，あとは色々なことができる．&lt;/p&gt;

&lt;h4 id=&#34;highlight&#34;&gt;highlight&lt;/h4&gt;

&lt;p&gt;マウスで文章をなぞって選択（下の画像の白黒反転した部分）したあとに，C-c C-a h もしくは，画像で示したように，PDF Tools &amp;rarr; Add markup annotation &amp;rarr; highlightを選択すれば，&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-2.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;選択した部分がハイライトされ，下に新たなバッファが開いてそこに注釈が書けるようになる（下の画像参照）．書き終わったら，C-c C-cで注釈バッファが閉じる．なお，上に元からある黄色にハイライトされた部分は以前に選択してハイライトした部分である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-3.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h4 id=&#34;display-annotations&#34;&gt;Display Annotations&lt;/h4&gt;

&lt;p&gt;複数箇所をハイライトして注釈をつけたあとに，全ての注釈を一度にリストにしてみることができる．C-c C-a l もしくは，PDF Tools &amp;rarr; Display Annotationsを選択すれば，下の画像のように，下に２つの新たなバッファが開く．真ん中のバッファに注釈のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動してブルーの枠で囲んで表示され，下のバッファに注釈の内容が表示される．qを押せば，2つのバッファは閉じる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-4.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-4.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h4 id=&#34;isearch-document--c-s&#34;&gt;Isearch document (C-s)&lt;/h4&gt;

&lt;p&gt;pdf-toolsはswiperとはconflictするために，C-sは本来のisearch-forwardに戻して設定しておく必要がある（前述の設定の通り）．これで，C-sとやると，minibufferに打ち込んだ語が反転して表示され，C-sとやるごとに先へ移動していく．下の画像では，&amp;rdquo;MK2&amp;rdquo;という単語を打った時の状態を示している．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-C-s.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-C-s.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h4 id=&#34;occur-document&#34;&gt;Occur document&lt;/h4&gt;

&lt;p&gt;PDF Tools &amp;rarr; Occur documentを選択すれば，minibufferに List lines matching PCRE: と表示される．そこに例えばMK2と打てば，下の画像のように，下に新たなバッファが開き，MK2のあるページとそこにある文章のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動する．qを押せば，下のバッファは閉じる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/pdf-tools-occur.jpg&#34; &gt;

&lt;img src=&#34;/img/pdf-tools-occur.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;org-pdfview&#34;&gt;org-pdfview&lt;/h2&gt;

&lt;p&gt;org-modeからpdf文書へのリンクを開くのをサポートするパッケージ．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考１：&lt;a href=&#34;https://github.com/markus1189/org-pdfview&#34; target=&#34;_blank&#34;&gt;org-pdfview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考２：&lt;a href=&#34;https://emacs.stackexchange.com/questions/19686/how-to-use-pdf-tools-pdf-view-mode-in-emacs&#34; target=&#34;_blank&#34;&gt;How to use pdf-tools (pdf-view-mode) in emacs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考３：&lt;a href=&#34;https://emacs.stackexchange.com/questions/31895/configure-org-pdfview-and-pdf-tools-to-open-at-page&#34; target=&#34;_blank&#34;&gt;Configure org-pdfview and pdf-tools to open at page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストールと設定&#34;&gt;インストールと設定&lt;/h3&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書くだけ．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package org-pdfview
  :ensure t)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例えば，Emacsのpdf-toolsを用いて，hogehoge.pdfを開いて読んでいるとする．そこで，C-c lとすると， &lt;strong&gt;Stored: /Data/Hoge/Fuga/hogefuga.pdf&lt;/strong&gt; と今読んでいるpdfへのリンクが保存される．そして，それを保存しておきたいorg文書の適当な場所で，C-c C-lとすれば，そのリンクが貼り付けられる．以前の記事（&lt;a href=&#34;../org-html-export-theme&#34;&gt;Org-modeでhtml exportの際のthemeについて&lt;/a&gt;）で書いたような文献のまとめを作成しているときに，元文献とリンクさせておく際などに便利である．貼り付けたリンクをクリックすれば，元文献がEmacsのpdf-toolsによって開かれるようになる（画面が分割され，下に新たなバッファが開いてそこにpdfが表示される）．割と便利である．&lt;/p&gt;

&lt;h2 id=&#34;pdf-toolsと他のアプリ-skim-previewなど-との比較&#34;&gt;PDF Toolsと他のアプリ（skim, Previewなど）との比較&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;注釈の一覧表示，C−s， occurなどの機能は便利である．&lt;/li&gt;
&lt;li&gt;skim, Previewなどでは，長方形ツールによりお好みの領域を選択してコピーすることができるし，このコピーした領域のみをpdfとして保存できるが，pdf-toolsではできない．&lt;/li&gt;
&lt;li&gt;skim, Preview, Adobe Acrobat Readerのように，全画面でプレゼンテーションするモードはない．&lt;/li&gt;
&lt;li&gt;Adobe Acrobat Readerのように，動画を動かすことは出来ない．&lt;/li&gt;
&lt;li&gt;上記２つの理由から，auctexを使用する際のpdf viewerとしてEmacsを使用していない．&lt;/li&gt;
&lt;li&gt;最近のpdfは，本文中に示された文献もしくはその番号をクリックすると，最後の文献リストの中の該当の論文のところに飛ぶようになっているものも多くなっているが，pdf-toolsはそれには対応していないようである．より正確にはリンク先が分からないようである．これは自力では解決できない．．．&lt;/li&gt;
&lt;li&gt;Outline構造にも対応しており，検出するのだが，リンク先が分からないようである．これも自力では解決できない．．．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上のことより，学会発表用のスライドなどを作成している際は，skimなどの方がpdf viewerとして便利であるが，文献のまとめなどpdfを読み込む際には，pdf-toolsの方が向いているのではないかと考えている．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mojaveのライブ変換で快適日本語入力（カーソルの色も日英で変わるように設定）</title>
      <link>/post/live/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0900</pubDate>
      <guid>/post/live/</guid>
      <description>&lt;p&gt;最初にmacosにライブ変換が登場した時に使用してみて，これは駄目だとすぐにGoogle inputmethodに戻してしまった．今年の5月にmojaveにupgradeしたのち，ある日，ふと思い立って，ライブ変換を試してみたところ，ほとんどストレスを感じることなくスラスラと入力ができた．ほとんど変換のためにスペースキーを叩く必要がないことに驚いた．予測の精度が登場時よりはるかに改良されているのであろう．エンドユーザーにはありがたいことである．早速乗り換えてしまった．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-set-up&#34;&gt;How to set up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shortcut&#34;&gt;Shortcut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-set-up&#34;&gt;How to set up&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;まず画面トップの右端の方の日本語入力のライブ変換にチェックを入れてオンにする．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついで，Emacsのカーソルの色の設定をする．これは以前の記事（&lt;a href=&#34;../japanese_setup&#34;&gt;Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など&lt;/a&gt;）の設定をほんの少し変えるだけのことである．comment outしていた部分を外して，google inputmethodの方をcomment outする．具体的には，init.orgに以下のように書き込めば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+BEGIN_SRC emacs-lisp
(when (fboundp &#39;mac-input-source)
(defun my-mac-selected-keyboard-input-source-chage-function ()
(let ((mac-input-source (mac-input-source)))
  (set-cursor-color
   (if (string-match &amp;quot;com.apple.inputmethod.Kotoeri.Roman&amp;quot; mac-input-source)
       ;; (if (string-match &amp;quot;com.google.inputmethod.Japanese.Roman&amp;quot; mac-input-source)
       &amp;quot;#91C3FF&amp;quot; &amp;quot;#FF9300&amp;quot;))))
(add-hook &#39;mac-selected-keyboard-input-source-change-hook
        &#39;my-mac-selected-keyboard-input-source-chage-function))
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでEmacsでライブ変換を使用している際に，日本語入力の時は赤色のカーソル，英語入力の時は青色のカーソルになる．&lt;/p&gt;

&lt;h2 id=&#34;shortcut&#34;&gt;Shortcut&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&#34;https://qiita.com/YumaInaura/items/8c74cdf32ad2f5ed57fa&#34; target=&#34;_blank&#34;&gt;#Mac のライブ変換で入力をひらがなのままで確定させる ( Control + J )&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;「Control」＋「J」  →   ひらがなに変換&lt;/li&gt;
&lt;li&gt;「Control」＋「K」  →   カタカナに変換&lt;/li&gt;
&lt;li&gt;「Control」＋「L」  →   全角英字に変換&lt;/li&gt;
&lt;li&gt;「Control」＋「;（セミコロン）」  →   半角英字に変換&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私のところでは何故か参考サイトと異なり，セミコロンで半角カタカナではなく半角英字に変換される．半角カタカナなんか使わないからいいけど．．．&lt;/p&gt;

&lt;p&gt;J, K, L, ; はキーボード上の位置が一直線であり，かつ，左から順番になっているので，指に優しい．&lt;/p&gt;

&lt;p&gt;mojaveのライブ変換，とにかく一度使ってみることをお勧めする．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Symbol Overlay (Highlight symbols at cursor point with keymap-enabled overlays in Emacs)</title>
      <link>/post/symbol-overlay/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0900</pubDate>
      <guid>/post/symbol-overlay/</guid>
      <description>&lt;p&gt;今回は（も？），redditで拾ってきたネタ（&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/c95cm5/how%5Fto%5Fhighlight%5Foccurences%5Fat%5Fcursor%5Fpoint%5Fin/&#34; target=&#34;_blank&#34;&gt;How to highlight occurences at cursor point in Emacs&lt;/a&gt;）．カーソルの位置にあるシンボル（単語と思えば良い）をバッファ内ですべてハイライトしてくれるEmacsのパッケージを訊いているのだが，いくつか答えがあって，一番便利そうだったのが，今回紹介する &lt;strong&gt;symbol-overlay&lt;/strong&gt; である．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use&#34;&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wolray/symbol-overlay&#34; target=&#34;_blank&#34;&gt;symbol-overlay&lt;/a&gt; （ご本家）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://manuel-uberti.github.io/emacs/2019/02/14/avy/&#34; target=&#34;_blank&#34;&gt;Jump around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/blue0513/items/c0dc35a880170997c3f5&#34; target=&#34;_blank&#34;&gt;Emacsの補完と検索を超強化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;例によって，以下のようにinit.orgに書き込んでMELPAからsymbol-overlayをインストールする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package symbol-overlay             ; Highlight symbols
  :ensure t
  :config
  (global-set-key (kbd &amp;quot;M-i&amp;quot;) &#39;symbol-overlay-put)
  (global-set-key (kbd &amp;quot;&amp;lt;f7&amp;gt;&amp;quot;) &#39;symbol-overlay-mode)
  (global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt;&amp;quot;) &#39;symbol-overlay-remove-all)
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-use&#34;&gt;How to use&lt;/h2&gt;

&lt;p&gt;使用法はご本家に書いてあるが，まず，”M-i”を叩けば，カーソルが位置しているシンボル（単語と思えば良い）が色付きでハイライトされる．同時に，同一バッファ内での全ての同じ単語も同様にハイライトされる．カーソルを動かしてもハイライトされた状態はそのままである．続けて，別の単語にカーソルを持って行って，&amp;rdquo;M-i&amp;rdquo;とすれば，その単語が別の色でハイライトされる．勿論，バッファ内の同一の単語も全て同じ色でハイライトされる．しかも，最初にハイライトした単語は，カーソルが離れた後もハイライトされた状態を維持している．文章で書くとわかりにくいが，要するに下図のような状態になる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/symbol-overlay.jpg&#34; &gt;

&lt;img src=&#34;/img/symbol-overlay.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;さらに，各単語間は &amp;ldquo;n&amp;rdquo; で先に進み， &amp;ldquo;p&amp;rdquo; で逆戻りできる．別の色のハイライトの単語にカーソルを移動させれば，今度はその単語間で同様に移動できる．そのほかご本家サイトによれば，以下のようなキーバインドになっている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&amp;quot;n&amp;quot; -&amp;gt; symbol-overlay-jump-next
&amp;quot;p&amp;quot; -&amp;gt; symbol-overlay-jump-prev
&amp;quot;w&amp;quot; -&amp;gt; symbol-overlay-save-symbol
&amp;quot;t&amp;quot; -&amp;gt; symbol-overlay-toggle-in-scope
&amp;quot;e&amp;quot; -&amp;gt; symbol-overlay-echo-mark
&amp;quot;d&amp;quot; -&amp;gt; symbol-overlay-jump-to-definition
&amp;quot;s&amp;quot; -&amp;gt; symbol-overlay-isearch-literally
&amp;quot;q&amp;quot; -&amp;gt; symbol-overlay-query-replace
&amp;quot;r&amp;quot; -&amp;gt; symbol-overlay-rename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なかでも特筆すべきは &amp;ldquo;r&amp;rdquo; のsymbol-overlay-renameで，ハイライトされた単語を一気に書き換えることができる．例えば下図のように &amp;ldquo;global-set-key&amp;rdquo; が赤くハイライトされている時，どれかの&amp;rdquo;global-set-key&amp;rdquo;にカーソルを置いて &amp;ldquo;r&amp;rdquo; を叩けば，minibufferにRenameが表示され，これを消去して新しい名前を書くと赤くハイライトされている単語は一気に新しい名前に変わる．この機能は場合によっては非常に便利である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Rename.jpg&#34; &gt;

&lt;img src=&#34;/img/Rename.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;こういうパッケージを教えてくれるので，redditは有難い．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gleanings (display-line-numbers, whitespace-mode, accessibility of iTerm2, etc)</title>
      <link>/post/gleanings/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0900</pubDate>
      <guid>/post/gleanings/</guid>
      <description>&lt;p&gt;前回久しぶりに記事を投稿したが，しばらく更新していない間に，いくつか細かな環境修正が必要であったので，落ち穂拾いとしてまとめておく．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#display-line-numbers&#34;&gt;display-line-numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whitespace-mode&#34;&gt;Whitespace-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterm2の権限の変更-mojaveで必要&#34;&gt;iTerm2の権限の変更（mojaveで必要）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterm2のcolor-schemeが効かない&#34;&gt;iTerm2のColor Schemeが効かない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;display-line-numbers&#34;&gt;display-line-numbers&lt;/h2&gt;

&lt;p&gt;emacs 26から入った行番号を表示させる機能．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ref 1: &lt;a href=&#34;http://garaemon.hatenadiary.jp/entry/2018/07/08/181003&#34; target=&#34;_blank&#34;&gt;emacs 26で入ったdisplay-line-numbersを利用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 2: &lt;a href=&#34;https://www.emacswiki.org/emacs/LineNumbers&#34; target=&#34;_blank&#34;&gt;LineNumbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 3: &lt;a href=&#34;https://blog.piyo.tech/posts/2019-01-24-emacs-display-line-numbers/&#34; target=&#34;_blank&#34;&gt;Emacs26のdisplay-line-numbers-modeがlinum-modeよりちょっと速くて快適になりそう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 4: &lt;a href=&#34;https://qiita.com/mamo3gr/items/1c6862cba09d5876e52c&#34; target=&#34;_blank&#34;&gt;Emacsの行番号表示にモヤモヤした話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定は，いつものように，init.orgに下記のとおりに書き込めばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(global-display-line-numbers-mode)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでもう行番号を表示していても重くならない．表示領域を確保するための設定も不要である．実際の表示状況は下の画像のとおりである．nlinum-modeの設定は削除した．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/display-line-number.jpg&#34; &gt;

&lt;img src=&#34;/img/display-line-number.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;行番号に必要な表示領域は自動的に確保される．3桁，4桁の番号になるに連れて表示領域が広くなるのが上の画像からわかるであろう．また，adaptive-wrapによって折り畳まれている行は行番号が空白になって1行であることがわかるようになっている（383行目）．&lt;/p&gt;

&lt;h2 id=&#34;whitespace-mode&#34;&gt;Whitespace-mode&lt;/h2&gt;

&lt;p&gt;かなり前から，Emacsの長い行の途中でフォントの色が赤くなってしまうようになった．つまり，下の画像のようになってしまう．短い行でもフォントが赤くなってるな．．．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-2a.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-2a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;何が原因かよくわからなかったのだが，redditの&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/butal1/how%5Fdo%5Fi%5Fstop%5Femacs%5Ffrom%5Fcoloring%5Ftext%5Fbeyond%5F80/&#34; target=&#34;_blank&#34;&gt;How do I stop Emacs from coloring text beyond 80 columns differently&lt;/a&gt;を読んで，もしかしたら，whitespace-modeのせいかもしれないと思ってやってみたらドンピシャであった．M-x customizeとして，Whitespace Styleをサーチして，(Face) Lines, only overlong partのチェックを外せばよい．下の画像の矢印で示した部分である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/whitespace.jpg&#34; &gt;

&lt;img src=&#34;/img/whitespace.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;下に，設定変更後の上の画像と同じところを示すが，行の途中でフォントの色が変わらなくなっている．これで目がおかしくなりそうな画面からようやく離れることができた．😀&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-3.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;iterm2の権限の変更-mojaveで必要&#34;&gt;iTerm2の権限の変更（mojaveで必要）&lt;/h2&gt;

&lt;p&gt;以前の記事（&lt;a href=&#34;../auto_html_export&#34;&gt;Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする&lt;/a&gt;）の中で，directoryの内容が変更されると，自動でhtmlを再読込するwatch_safari.rbというスクリプトを紹介した．しかし，mojaveにupgradeしたあとは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;85:141: execution error: System Eventsでエラーが起きました: osascriptにはキー操作の送信は許可されません。 (1002)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というエラーを吐いて，自動更新しなくなってしまった．調べてみると，mojaveでユーザーのデータや個人情報を保護するための機能が強化された結果であった．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ref 1: &lt;a href=&#34;https://minatokobe.com/wp/os-x/macos-mojave/post-51360.html&#34; target=&#34;_blank&#34;&gt;macOS Mojaveでのアプリケーションの権限、アクセシビリティとフルディスクアクセスの違いは何か？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 2: &lt;a href=&#34;https://www.softantenna.com/wp/tips/macos-mojave-iterm2-full-disk-access/&#34; target=&#34;_blank&#34;&gt;macOS MojaveでiTerm2を利用する場合にフルディスクアクセスを許可する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 3: &lt;a href=&#34;https://rcmdnk.com/blog/2019/04/29/computer-mac/&#34; target=&#34;_blank&#34;&gt;MacのターミナルやiTermでOperation not permittedが出る場合の対処法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref 4: &lt;a href=&#34;https://gitlab.com/gnachman/iterm2/wikis/Whyfulldiskaccess&#34; target=&#34;_blank&#34;&gt;Why Full Disk Access is Useful for iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AccessibilityとFull Disk Accessのいずれか，あるいは，両方を変更すればよい．試してみた結果，iTerm2にFull Disk Accessを許可しても自動更新しないが，Accessiblityで「アプリケーションにコンピュータの制御を許可」すれば自動更新することがわかった．「システム環境設定」&amp;gt;「セキュリティ＆プライバシー」の「プライバシー」タブに行き，下の画像にあるように，iTerm2にcheckを入れればよい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Privacy.jpg&#34; &gt;

&lt;img src=&#34;/img/Privacy.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;crontabが働き，~/Library/Safari folderへのアクセスができるように，iTerm2にFull Disk Accessも与えておいた．方法は，上記とほぼ同じで，「プライバシー」タブに行き，フルディスクアクセスを選択し，iTerm2にcheckを入れればよい．&lt;/p&gt;

&lt;h2 id=&#34;iterm2のcolor-schemeが効かない&#34;&gt;iTerm2のColor Schemeが効かない&lt;/h2&gt;

&lt;p&gt;いつのまにかiTerm2のcolor schemeを変えても反映されなくなってしまった．ネットを探ると，同じようなことで悩んでいる人が結構いるようで，すぐに解決法が見つかった．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ref: &lt;a href=&#34;https://gitlab.com/gnachman/iterm2/issues/4844&#34; target=&#34;_blank&#34;&gt;Profile colors won&amp;rsquo;t change&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のサイトによれば，terminal windowがprofileと連絡を失ってしまったことが原因とのことで，iTerm2の Session &amp;gt; Edit Sessionで下の画像のようにdialogue boxがpop upするので，そこで，好きなcolor scheme (下の画像ではJapanesque) を選択し，右下のUse Selected Profileをクリックすればよい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/iTerm2.jpg&#34; &gt;

&lt;img src=&#34;/img/iTerm2.jpg&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これでリンクが再確立される．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deadgrep</title>
      <link>/post/deadgrep/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0900</pubDate>
      <guid>/post/deadgrep/</guid>
      <description>

&lt;p&gt;次世代grepで最速と言われる&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34; target=&#34;_blank&#34;&gt;ripgrep&lt;/a&gt;をバックエンドとするEmacs用検索ツールであるdeadgrepをインストールしてみた．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ref&#34;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use&#34;&gt;How to use&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2019年6月2日追記&#34;&gt;2019年6月2日追記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Wilfred/deadgrep&#34; target=&#34;_blank&#34;&gt;deadgrep: use ripgrep from Emacs&lt;/a&gt; ご本家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://solist.work/blog/posts/deadgrep/&#34; target=&#34;_blank&#34;&gt;複雑になった時使うツール&lt;/a&gt; とても勉強になるサイト，こちらを読めば本サイトは読まなくても良いような．．．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;まず，バックエンドのripgrepをインストールする．brewを使えば簡単である．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついで，以下のようにinit.orgに書き込んでMRLPAからdeadgrep.elをインストールする．f5にキーバインドしておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package deadgrep
  :ensure t
  :config
  (global-set-key (kbd &amp;quot;&amp;lt;f5&amp;gt;&amp;quot;) #&#39;deadgrep)
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-use&#34;&gt;How to use&lt;/h2&gt;

&lt;p&gt;使用方法の詳細はご本家に書いてあるが，f5を叩いて，検索キーワードを入れるだけである．下の画像は，このブログのあるdirectoryで，「検索」をキーワードとしてdeadgrepを走らせたところである．defaultでdirectory内を再帰的に検索する．キーワードは青くハイライトされており，左端の数字はその文書での行番号である． &lt;strong&gt;o&lt;/strong&gt; を叩くと下のバッファに該当箇所にカーソルがある状態でその文書が開く． &lt;strong&gt;C-c C-k&lt;/strong&gt; で検索を止めることができる．また，swiperとの併用も可能である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/deadgrep.jpg&#34; &gt;

&lt;img src=&#34;/img/deadgrep.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;一番上のSearch termの行のchangeにカーソルを持っていってReturnすると，Minibufferで検索語を変更できる．その下にあるSearch type, Case, Context, Directory, Filesも同様に条件を変更できる．とくに，Directoryは適切なものを選ばないと巨大なデータを検索することになってしまうので注意が必要である．&lt;/p&gt;

&lt;p&gt;個人的には，swiperでほぼ事足りているのだが，大きなプロジェクト内の複数のファイルを一気に検索する必要がある人には非常に有益なツールだと思う．&lt;/p&gt;

&lt;h3 id=&#34;2019年6月2日追記&#34;&gt;2019年6月2日追記&lt;/h3&gt;

&lt;p&gt;上記のように自分にはあまり役に立たないようなことを書いたが，早速，deadgrepが役に立ったので追記しておく．hyperestraierで全文検索をしようとして，H@estfxpdftohtml というコマンドを使おうとしたのだが，うまくいかず，その原因を探るために，/usr/local/で，H@estfxpdftohtmlをSearch termとして，deadgrepを下の画像のように走らせてみたところ，下側のバッファにあるように，一発で原因が判明してしまった．要するに，xpdfが必要ということであった．なるほど，こういう風に使うのかと納得した．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/deadgrep2.jpg&#34; &gt;

&lt;img src=&#34;/img/deadgrep2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;なお，全文検索については，いずれ別の機会にまとめてみたい．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew</title>
      <link>/post/mojave/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0900</pubDate>
      <guid>/post/mojave/</guid>
      <description>

&lt;p&gt;世はゴールデンウィークまっただ中である．完全な10連休ではないが，それなりに長い休みとなるので，この機会に，ようやく Sierraから &lt;strong&gt;Mojave&lt;/strong&gt; にupgradeすることにした．ついでにEmacsも26.1から 26.2にupgradeした．今回は，このupgradeの際に遭遇したトラブルについてまとめる．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#upgrade-to-mojave-from-sierra&#34;&gt;Upgrade to Mojave from Sierra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#upgrade-to-xcode-10-dot-2-dot-1&#34;&gt;Upgrade to Xcode 10.2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#upgrade-to-emacs-26-dot-2-from-26-dot-1&#34;&gt;Upgrade to Emacs 26.2 from 26.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#latex&#34;&gt;LaTeX&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#pdfにフォントが埋め込まれているかどうかを確認する方法&#34;&gt;pdfにフォントが埋め込まれているかどうかを確認する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#感想&#34;&gt;感想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-mojave-from-sierra&#34;&gt;Upgrade to Mojave from Sierra&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://support.apple.com/ja-jp/HT201475&#34; target=&#34;_blank&#34;&gt;macOS Mojave にアップグレードする方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結論から言うと，拍子抜けするぐらい簡単であった．AppStoreで適当にクリックするとすぐにMojaveがダウンロードされて，インストーラーが起動した．これをクリックしてインストールを始めると，此処から先は完全自動状態で，ひたすら待った．というか，違うことをしていた．何回も再起動していたようだが，実際には1時間ぐらいで終了したような気がする．手間いらずであった．R, Rstudio, ImageJ, Emacs, LaTeXが動いて画像編集，動画編集ができれば，とりあえず文句はないので，まずそのあたりをチェックしてみると，R, Rstudio, ImageJ, 画像編集，動画編集は問題なく動いた．EmacsとLaTeXについては以下に述べる．&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-xcode-10-dot-2-dot-1&#34;&gt;Upgrade to Xcode 10.2.1&lt;/h2&gt;

&lt;p&gt;早速brewでemacsをupgradeしようとしたのだが，xcodeが古いと叱られたので，まず，xcodeをApp Storeからupgradeした．そして &lt;strong&gt;brew install&lt;/strong&gt; すると以下のようなエラーが出る．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install hogehoge
.........
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは，「&lt;a href=&#34;https://gotohayato.com/content/487&#34; target=&#34;_blank&#34;&gt;macOS を Mojave にあげた後に Homebrew を使うとエラーが出る問題&lt;/a&gt;」にあるようにcommand line developer toolsを再インストールすれば直る．同サイトに詳細が記載されている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さぁ，これでようやくと思って，再度 &lt;strong&gt;brew install&lt;/strong&gt; すると，またもエラーである&amp;hellip;..(ToT)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install hogehoge
..........
Error: parent directory is world writable but not sticky
Please report this bug:
https://docs.brew.sh/Troubleshooting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;調べてみるとpermissionの問題で，tmp directoryの状態を調べれば良いことがわかった．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref 1:&lt;/strong&gt; &lt;a href=&#34;https://qiita.com/analsky/items/20755a3ba10119e9a4b6&#34; target=&#34;_blank&#34;&gt;brew で `Error: parent directory is world writable but not sticky`&lt;/a&gt; &lt;br /&gt;
&lt;strong&gt;Ref 2:&lt;/strong&gt; &lt;a href=&#34;https://stackoverflow.com/questions/42893700/error-parent-directory-is-world-writable-but-not-sticky&#34; target=&#34;_blank&#34;&gt;Error: parent directory is world writable but not sticky&lt;/a&gt; &lt;br /&gt;
上記サイトの記載に従って，ls -ld /tmpを行うと以下のようになる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls -ld /tmp
lrwxr-xr-x@ 1 root  wheel  11  4 27 18:45 /tmp@ -&amp;gt; private/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは，tmp directoryはprivate/tmpを使用しているということであり，以下のようにしてpermissionを付与する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo chmod +t /private/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私の場合はこれでbrewが働くようになった．これらの操作は，今後のmajor upgradeの際にはまた必要になりそうなので，ここにまとめておく．&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-emacs-26-dot-2-from-26-dot-1&#34;&gt;Upgrade to Emacs 26.2 from 26.1&lt;/h2&gt;

&lt;p&gt;ようやくEmacsのupgradeである．mojaveにupgradeした直後にemacs26.1を起動してみるとキーが効かなかったような気がするが，26.2にupgradeするので，気にせず先に進んだ&amp;hellip;..(^^;;;　以前の記事（&lt;a href=&#34;../emacs_install&#34;&gt;Emacsのインストール&lt;/a&gt;）に書いたようにhomebrewでemacs-macを入れればよいのだが，念の為に単なるupgradeは避けて，Emacs 26.1をuninstallし，~/.emac.dも退避させてから，インストールし直すことにした．&lt;a href=&#34;https://github.com/railwaycat/homebrew-emacsmacport&#34; target=&#34;_blank&#34;&gt;Emacs Mac Port&lt;/a&gt;の最終更新はわずか2週間前でありいろいろな問題が解決されていると期待してのupgradeである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd
$ mv .emacs.d .emac.d.old  # change name of old .emacs.d
$ brew tap railwaycat/emacsmacport
$ brew uninstall emacs-mac  # uninstall old emacs-mac
$ brew install emacs-mac --with-modern-icon --with-imagemagick  # install new emacs-mac
$ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで，&lt;br /&gt;
&lt;strong&gt;/usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1 (4,009 files, 114.6MB)&lt;/strong&gt; &lt;br /&gt;
から &lt;br /&gt;
&lt;strong&gt;/usr/local/Cellar/emacs-mac/emacs-26.2-z-mac-7.6 (4,010 files, 114.8MB)&lt;/strong&gt;  &lt;br /&gt;
へのupgradeが終了した．&lt;/p&gt;

&lt;p&gt;あとは，以前に書いた以下の記事に従ってセットアップした．&lt;br /&gt;
&lt;a href=&#34;../prelude_install&#34;&gt;Emacsの設定（その1）Preludeの導入（2018年10月9日修正）&lt;/a&gt; &lt;br /&gt;
&lt;a href=&#34;../init_org&#34;&gt;Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&#34;../japanese_setup&#34;&gt;Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;latex&#34;&gt;LaTeX&lt;/h2&gt;

&lt;p&gt;これについては，以前の記事「&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）&lt;/a&gt;」で書いたとおり &lt;strong&gt;MacTeX 2018&lt;/strong&gt; のままである．正確に言うと，mojaveにupgradeする直前に以下のようにして最新版にアップデートしておいた．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;400個ぐらいのパッケージのアップデートに30-40分を要した．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ヒラギノフォントの埋め込み&lt;/strong&gt; についても上述の記事に書いたように，既に，&lt;a href=&#34;https://github.com/munepi/bibunsho7-patch/releases&#34; target=&#34;_blank&#34;&gt;bibunsho7-patch&lt;/a&gt;を適応済みなので，問題ないと考えた．&lt;/p&gt;

&lt;p&gt;mojaveにupgradeしてから，latexmkによるcompileやorg-modeからのlatex exportなどを試してみたが，pdfの生成に特に問題なく，また，pdfへのヒラギノフォントの埋め込みも問題なくできていた．&lt;/p&gt;

&lt;h3 id=&#34;pdfにフォントが埋め込まれているかどうかを確認する方法&#34;&gt;pdfにフォントが埋め込まれているかどうかを確認する方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ref:&lt;/strong&gt;&lt;a href=&#34;https://qiita.com/Aqua%5Fix/items/d277fb7e4667d6616c1e&#34; target=&#34;_blank&#34;&gt; PDFのフォント埋め込み&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下のようにhomebrewでpopplerをインストールすれば，その中の &lt;strong&gt;pdffonts&lt;/strong&gt; というコマンドを使って確認することができる．このpopplerは以前の記事（&lt;a href=&#34;../pdf-tools&#34;&gt;Emacsでpdfを読む (pdf-tools)&lt;/a&gt;）で既にインストールしているが，もう一度書いておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install poppler
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;たとえば，latexで生成したhogehoge.pdfのフォントの埋め込みを調べるためには，pdffontsを以下のように使う． &lt;strong&gt;emb&lt;/strong&gt; の項目で埋め込みの有無がわかる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pdffonts hogehoge.pdf
name                                 type              encoding         emb sub
------------------------------------ ----------------- ---------------- --- ---
KQKHHV+LMSans10-Bold                 Type 1C           Custom           yes yes
JQHYHW+LMRoman17-Regular             Type 1C           Custom           yes yes
FENZQQ+HiraMinProN-W3-Identity-H     CID Type 0C       Identity-H       yes yes
ZHPQAJ+LMRoman12-Regular             Type 1C           Custom           yes yes
BMLTDB+HiraKakuProN-W6-Identity-H    CID Type 0C       Identity-H       yes yes
NOWECW+LMRoman12-Regular             Type 1C           Custom           yes yes
SIHLPZ+LMRoman8-Regular              Type 1C           Custom           yes yes
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;確かに，すべてのフォントは &lt;strong&gt;emb = yes&lt;/strong&gt; になっており，埋め込まれているのが確認できた．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;ネットでは，いろいろ問題ありとの情報が多く様子見をしていたのだが，待ってる間に色々と解決した部分も多いのか，ほとんど大きなトラブルもなくアップグレードできた．なお， &lt;strong&gt;Time Machine&lt;/strong&gt; によるバックアップも問題なくできている．「案ずるより産むが易し」であった．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法）</title>
      <link>/post/peep/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0900</pubDate>
      <guid>/post/peep/</guid>
      <description>

&lt;p&gt;最近Rネタばかり書いていたが，今回は久しぶりのEmacsネタである．org-modeで文書を書いているときに画像を貼り付けたいことがある．そのためには画像ファイルの名前とパスが必要となる．要するに毎回画像ファイルのパスを調べて/hoge/fuga/hogefuga/hugo.jpgというようなことをタイプしなければならず面倒である．そこで，peep-diredの出番である．peep-diredとは，diredでファイルにカーソルを持っていくと中身が見える，すなわち，画像ファイルなら画像が見え，テキストファイルならテキストが読めるというminor modeである．これが画像リンクの貼り付けに便利なのでまとめておく．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#peep-diredのインストールと設定&#34;&gt;peep-diredのインストールと設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#peep-diredの使い方&#34;&gt;peep-diredの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bjm-ivy-dired-recent-dirs-最近開けたdirectoryを一覧表示する方法-おまけ&#34;&gt;bjm/ivy-dired-recent-dirs -  最近開けたdirectoryを一覧表示する方法（おまけ）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asok/peep-dired&#34; target=&#34;_blank&#34;&gt;peep-dired&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/emacs/quickly-preview-images-and-other-files-with-peep-dired/&#34; target=&#34;_blank&#34;&gt;QUICKLY PREVIEW IMAGES AND OTHER FILES WITH PEEP-DIRED&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;peep-diredのインストールと設定&#34;&gt;peep-diredのインストールと設定&lt;/h2&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書けばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package peep-dired
  :ensure t
  :defer t ; don&#39;t access `dired-mode-map&#39; until `peep-dired&#39; is loaded
  :bind (:map dired-mode-map
              (&amp;quot;P&amp;quot; . peep-dired)))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定は上記参照サイトのパクリで，diredで&amp;rdquo;P&amp;rdquo;を打つとpeep-dired modeとなってdiredのリストの画像ファイルが見られるようになり，もう一度&amp;rdquo;P&amp;rdquo;と打つとpeep-dired modeは終了する．　&lt;/p&gt;

&lt;h2 id=&#34;peep-diredの使い方&#34;&gt;peep-diredの使い方&lt;/h2&gt;

&lt;p&gt;File viewerとしてだけなら，どうということはないのだが，org-modeと組み合わせて使うと便利さが増す．たとえば，下図のように画像をおいているdirectoryをdiredで開いて&amp;rdquo;P&amp;rdquo;を打ってpeep-dired modeに入り，画像を確かめながら文書に挿入する画像を決める．上段のdiredのバッファにおいてIMG_1996.jpgにカーソルがあり，下段のバッファにその画像が表示されている．画像が決まったらその画像ファイルにカーソルが合っていることを確認した上で，C-c lを打つ．これで，画像へのリンクがフルパスも含めてコピーされる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/peep-dired_ex1.jpeg&#34; &gt;

&lt;img src=&#34;/img/peep-dired_ex1.jpeg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ついで，org-mode文書内の画像を挿入したいところにカーソルを持って行き，そこで，C-c C-lとすると，下部に新たなorg-insert-linkのウィンドウが開いて下図のように先程コピーしたリンクが一番上にフルパスでハイライトされて表示される．ここでリターンすればフルパスのリンクがorg-mode文書内に挿入される．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/peep-dired_ex3.jpg&#34; &gt;

&lt;img src=&#34;/img/peep-dired_ex3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;文章で説明すると複雑だが，実際にやってみると実に簡単で有用である．このやり方に気がつくまでは，いちいちフルパスを手入力したり，コピペしたりしていたが，その必要がなくなり非常に楽になった．&lt;/p&gt;

&lt;h2 id=&#34;bjm-ivy-dired-recent-dirs-最近開けたdirectoryを一覧表示する方法-おまけ&#34;&gt;bjm/ivy-dired-recent-dirs -  最近開けたdirectoryを一覧表示する方法（おまけ）&lt;/h2&gt;

&lt;p&gt;diredでdirectoryを開けるときにその名前を入力する必要があるが，これが結構面倒である．特に深いところにあるファイルはフルパスを書くのが大変である．どうせ，同じファイルに何回も行くことが多いので，「最近訪れたdirectoryの履歴」みたいなのが一覧表示されると嬉しい．まさに，こんなのぞみにピッタリのものが，bjm/ivy-dired-recent-dirsである．これについては，以前に書いたのでそちらを参考にしていただきたい．というか，以前に書いた事自体を忘れていたので，自分への戒めとして記録しておく．．．(^^;;;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://taipapamotohus.com/post/swiper%5Fmigemo/#最近開いたディレクトリを開く&#34; target=&#34;_blank&#34;&gt;最近開いたディレクトリを開く&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to automatically embed R plot in blog created by Hugo via ox-hugo</title>
      <link>/post/embedrplotinblog/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate>
      <guid>/post/embedrplotinblog/</guid>
      <description>

&lt;p&gt;（承前）前回（&lt;a href=&#34;../ExportRplot&#34;&gt;How to automatically embed R plot into html exported by org-mode with org-babel&lt;/a&gt;）はorg-babelを設定して，Rで描いたグラフを自動でhtmlやpdfに挿入するところまでまとめた．繰り返しになるが，本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成している．前々回の記事（&lt;a href=&#34;../prodlim&#34;&gt;How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)&lt;/a&gt;）を書いている際に，Rでplotしたgraphをブログ記事の中に自動ではめ込むよう設定するのに苦労した．前回でorg-babelの設定は終わっているので，今回は，Hugoやox-hugoの設定に関してまとめ，ブログ記事へのR plotの自動挿入ができるようにする．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuration-of-hugo-section&#34;&gt;Configuration of Hugo section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-of-hugo-section-and-hugo-base-dir-in-ox-hugo&#34;&gt;Setup of HUGO_SECTION &amp;amp; HUGO_BASE_DIR in ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references-to-files-outside-the-static-directory&#34;&gt;References to files outside the static directory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;HUGO&lt;/a&gt;  &lt;br /&gt;
Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. Hugoのsetupについてはネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ox-hugo.scripter.co&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;  &lt;br /&gt;
ox-hugo is an Org exporter backend that exports Org to Hugo-compatible Markdown (Blackfriday) and also generates the front-matter (in TOML or YAML format).&lt;/p&gt;

&lt;p&gt;要するに，Markdownを直接書くのではなく，org-modeで書いてしまおうというもので，私のようなorg-mode maniacにピッタリのパッケージである．ox-hugoのsetupについてもネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration-of-hugo-section&#34;&gt;Configuration of Hugo section&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://sfus.net/blog/2018/12/org-mode-with-ox-hugo/&#34; target=&#34;_blank&#34;&gt;Org-mode で記事を書いて Hugo 向け markdown を ox-hugo で自動生成する話&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そもそも，まず，Hugoのディレクトリ・ファイルの構成を把握する必要があった．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.org に書き込んでおり，directory/file構成は以下の通りである．上記参考サイトと同じく，/hogehoge/hogeblog/hogefugablog/，つまり，Hugo の content/ と同じ階層に hogefugablog.org ファイルを置いている．なお，themeは &lt;a href=&#34;https://themes.gohugo.io/academic/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;academic&lt;/strong&gt;&lt;/a&gt; を使用している．また，ox-hugoのdirectoryは今回の作業により新たに作成されたものであり，当初はなかった．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tree -L 2
.
├── config.toml
├── content
│   ├── home
│   ├── post
│   └── privacy.md
├── data
│   └── 6F
├── hogefugablog.org
├── layouts
│   ├── js
│   ├── partials
│   └── search
├── static
│   ├── css
│   ├── files
│   ├── img
│   └── ox-hugo
└── themes
    └── academic
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setup-of-hugo-section-and-hugo-base-dir-in-ox-hugo&#34;&gt;Setup of HUGO_SECTION &amp;amp; HUGO_BASE_DIR in ox-hugo&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://ox-hugo.scripter.co/doc/usage/#before-you-export&#34; target=&#34;_blank&#34;&gt;Before you export&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本サイトでは，HUGO_SECTIONは特に設定しておらず，C-h v org-hugo-default-section-directoryの値は default valueであるpostsになっている．&lt;/p&gt;

&lt;p&gt;また，hogefugablog.orgの文頭に以下のように記述して，HUGO_BASE_DIRを設定している．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+HUGO_BASE_DIR: ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでで，ox-hugoからのexportの準備が整った．&lt;/p&gt;

&lt;h2 id=&#34;references-to-files-outside-the-static-directory&#34;&gt;References to files outside the static directory&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;https://ox-hugo.scripter.co/doc/image-links/#references-to-files-outside-the-static-directory&#34; target=&#34;_blank&#34;&gt;References to files outside the static directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugoのstatic directory以外の場所にあるファイルへのreferenceを作成し，かつ，そのファイルが &lt;strong&gt;org-hugo-external-file-extensions-allowed-for-copying&lt;/strong&gt; のリストに挙げられている拡張子を有している場合は，そのファイルはox-hugoによりstatic directoryにコピーされる．ちなみに，C-h v org-hugo-external-file-extensions-allowed-for-copyingとすると，以下のような値を得る．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;org-hugo-external-file-extensions-allowed-for-copying is a variable defined in ‘ox-hugo.el’.
Its value is
(&amp;quot;jpg&amp;quot; &amp;quot;jpeg&amp;quot; &amp;quot;tiff&amp;quot; &amp;quot;png&amp;quot; &amp;quot;svg&amp;quot; &amp;quot;gif&amp;quot; &amp;quot;pdf&amp;quot; &amp;quot;odt&amp;quot; &amp;quot;doc&amp;quot; &amp;quot;ppt&amp;quot; &amp;quot;xls&amp;quot; &amp;quot;docx&amp;quot; &amp;quot;pptx&amp;quot; &amp;quot;xlsx&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://ox-hugo.scripter.co/doc/image-links/#source-path-does-not-contain-static&#34; target=&#34;_blank&#34;&gt;Source path does not contain &lt;code&gt;/static/&lt;/code&gt;&lt;/a&gt;    &lt;br /&gt;
このサイトの &lt;strong&gt;Table 2: Where files get copied to if their path does not contain static/&lt;/strong&gt; が本サイトに当てはまる．これが分かるまでに時間を要した．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.orgに書き込んでいる．この環境で，postの中にorg-babelを使ってRのcode blockを評価すると，Rにより作成されるplot（foo.png）は，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;/hogehoge/hogeblog/hogefugablog/foo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に作成される．そして，このファイルは，最終的に，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;/hogehoge/hogeblog/hogefugablog/static/ox-hugo/foo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;にコピーされ，ブログ記事に挿入されるということになる．なお，ox-hugo directoryはこの時に自動的に作成される．&lt;/p&gt;

&lt;p&gt;つまり，前回の記事（&lt;a href=&#34;../ExportRplot&#34;&gt;How to automatically embed R plot into html exported by org-mode with org-babel&lt;/a&gt;）のように，R plotのcode blockを含むorg ファイルを作成し，それをexportして，R plotが自動で組み込まれるようなら，そのorg-babelのcode blockをそのままox-hugoで書いたブログ記事のorg ファイルにコピペすれば，あとはox-hugoが良きにはからってくれるはずである．&lt;/p&gt;

&lt;p&gt;実は，できたグラフの画像を自分でいろいろな場所にコピーしては失敗していた．Hugoのroot directory，つまり，/hogehoge/hogeblog/hogefugablog/でRを動かして，できたグラフ画像に対して何もせずに放置しておけば，ox-hugoが全て面倒を見てくれるということに気がつかず，余計なことをしていたわけである．&lt;/p&gt;

&lt;p&gt;まとめとして，前回記事のcode blockをこの記事に挿入して試してみる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src R :session *R* :results output graphics :file test1.png :exports both
boxplot(islands)
#+end_src
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/test1.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/test1.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src R :session *R* :results output graphics :file test2.png :exports both
library(&amp;quot;ggplot2&amp;quot;)
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
geom_point()
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/ox-hugo/test2.png&#34; &gt;

&lt;img src=&#34;/ox-hugo/test2.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ちゃんとグラフが自動的に挿入されている．&lt;/p&gt;

&lt;p&gt;org-babelとRの組み合わせは強力で，ox-hugoも便利と改めて痛感．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to automatically embed R plot into html exported by org-mode with org-babel</title>
      <link>/post/exportrplot/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate>
      <guid>/post/exportrplot/</guid>
      <description>

&lt;p&gt;本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成しているが，前回の記事（&lt;a href=&#34;../prodlim&#34;&gt;How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)&lt;/a&gt;）を書いている際に，Rでplotしたgraphを記事の中に自動ではめ込むよう設定するのに苦労したので，これも忘れないうちにまとめておく．まず，今回はorg-babelの設定について書き，次回にHugoでの設定をまとめる．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org-babel-setup&#34;&gt;Org-babel setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use-org-babel&#34;&gt;How to use org-babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org-babel-evaluation-of-r-code-block&#34;&gt;Org-babel evaluation of R code block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;org-babel-setup&#34;&gt;Org-babel setup&lt;/h2&gt;

&lt;p&gt;org-babelとは，う～～～ん，なにもの？　ものすごく端折って言うと，Code blockを評価して結果を表示するorg-modeの拡張，といったところだろうか．．．実例を見たほうが早いと思う．今回，org-babelによる R code の評価について書こうとして，ふと，ブログを見直してみると，なんとorg-babelの設定をまとめた記事を投稿してない &amp;hellip;..(^^;;;&lt;/p&gt;

&lt;p&gt;ということで，org-babelの設定を改めて記しておく．例によって，init.orgに以下のように書き込んでおけばよい．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref:&lt;/strong&gt; &lt;a href=&#34;http://doc.norang.ca/org-mode.html#OrgBabel&#34; target=&#34;_blank&#34;&gt;Org-babel Setup&lt;/a&gt;　ここからコピペ  (^^;;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (shell . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-use-org-babel&#34;&gt;How to use org-babel&lt;/h2&gt;

&lt;p&gt;以下のサイトを参考にした．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref 1:&lt;/strong&gt; Official manual &lt;a href=&#34;https://orgmode.org/manual/Working-with-Source-Code.html#Working-with-Source-Code&#34; target=&#34;_blank&#34;&gt;14 Working with Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref 2:&lt;/strong&gt; &lt;a href=&#34;http://misohena.jp/blog/2017-10-26-how-to-use-code-block-of-emacs-org-mode.html&#34; target=&#34;_blank&#34;&gt;org-modeのコードブロック(Babel)の使い方&lt;/a&gt;   &lt;br /&gt;
このサイトが分かりやすい．特に， &lt;strong&gt;ヘッダー引数&lt;/strong&gt; と &lt;strong&gt;言語毎の書き方&lt;/strong&gt; の &lt;strong&gt;R&lt;/strong&gt; の項は必読．&lt;/p&gt;

&lt;h2 id=&#34;org-babel-evaluation-of-r-code-block&#34;&gt;Org-babel evaluation of R code block&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.neuwirth.priv.at/software/2012/03/28/r-and-emacs-with-org-mode/&#34; target=&#34;_blank&#34;&gt;R and Emacs with org mode&lt;/a&gt;   &lt;br /&gt;
org-babelによるR codeの評価とhtmlへのgraph plotの自動埋め込みは，このサイトが分かりやすい．ここに有る”Using org mode with R”というサンプルを参考に，以下のようなorgファイルを/Data/hogehoge/hogefugaに作成する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+TITLE: R-test
#+AUTHOR: taipapa

* Test

  #+begin_src R :session *R* :results output graphics :file test1.png :exports both
  boxplot(islands)
  #+end_src

  #+begin_src R :session *R* :results output graphics :file test2.png :exports both
  library(&amp;quot;ggplot2&amp;quot;)
  ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
  geom_point()
  #+END_SRC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C-c C-e h oとしてhtmlにexportすると，以下のように簡単にグラフがプロットされたhtmlが作成される．いちいちできたグラフ画像を挿入する必要はなく，自動で挿入される．便利である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/R-test-html.png&#34; &gt;

&lt;img src=&#34;/img/R-test-html.png&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;　　注意点としては，C-c C-e hoとしたときに， &lt;strong&gt;R starting project directory？&lt;/strong&gt; と尋ねられるはずで，defaultの値として　/Data/hogehoge/hogefuga/ が既に表示されているはずである．これをそのままリターンすれば同じdirectoryにグラフが作成されて良きにはからってくれる．この際に異なるdirectoryを選んだりするとうまくいかないので注意．&lt;/p&gt;

&lt;p&gt;また，C-c C-e loとすると，自動でR plotの挿入されたpdfが作成されオープンする．&lt;/p&gt;

&lt;p&gt;これで準備が整った．次回はHugoで作成したブログにR plotを自動で差し込む方法をまとめる予定である．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの長い行を折り返して見やすくするが実際の行は変えない．adaptive-wrap —Correct indentation for wrapped lines</title>
      <link>/post/adaptive-wrap/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0900</pubDate>
      <guid>/post/adaptive-wrap/</guid>
      <description>

&lt;p&gt;Emacsで長い行を書いていると，デフォルトの状態ではどんどん横に伸びていく．後で読み返そうと思うと横にスクロールしないといけなくて，非常に不便である．M-qでauro-fillをやればよいと言われそうだが，そうすると改行されてしまい，これまた不便である．そこで，なんとかならないかと探してみると，ちゃんとそういうモノがあったので，まとめておく．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#adaptive-wrap&#34;&gt;adaptive-wrap&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#インストールと設定&#34;&gt;インストールと設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実際の使用例&#34;&gt;実際の使用例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;adaptive-wrap&#34;&gt;adaptive-wrap&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照1：&lt;a href=&#34;https://elpa.gnu.org/packages/adaptive-wrap.html&#34; target=&#34;_blank&#34;&gt;adaptive-wrap&lt;/a&gt;　ご本家&lt;/li&gt;
&lt;li&gt;参照2：&lt;a href=&#34;https://emacs.stackexchange.com/questions/14589/correct-indentation-for-wrapped-lines&#34; target=&#34;_blank&#34;&gt;Correct indentation for wrapped lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照3：&lt;a href=&#34;http://alainmathematics.blogspot.com/2013/07/emacs.html&#34; target=&#34;_blank&#34;&gt;Emacsの折り返しの挙動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照4：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/1kw7ip/emacs%5Fsettings%5Floading%5Fissue/&#34; target=&#34;_blank&#34;&gt;.emacs settings loading issue&lt;/a&gt;　&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;長い行をワープロのようにword-wrapしてくれるパッケージである．Emacsのバッファ上では折り返されているように見えるが，実際は長い横1行のままである．&lt;/p&gt;

&lt;h3 id=&#34;インストールと設定&#34;&gt;インストールと設定&lt;/h3&gt;

&lt;p&gt;例によって，use-packagを用いて以下のように，init.orgに書けばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package adaptive-wrap
  :ensure t
  :config
  (setq-default adaptive-wrap-extra-indent 1)
  (add-hook &#39;visual-line-mode-hook #&#39;adaptive-wrap-prefix-mode)
  (global-visual-line-mode +1)
  (add-hook &#39;org-mode-hook &#39;visual-line-mode)  ;; For org macros
  )
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお，最後の行を入れておかないと，org-mode fileに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+setupfile: /Sources/org-mode-folder/org-macros-master/org-macros.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加してマクロのパッケージを使用する場合（&lt;a href=&#34;../html_export&#34;&gt;Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）&lt;/a&gt;を参照のこと）に，adaptive-wrapが効かなくなる．&lt;/p&gt;

&lt;h3 id=&#34;実際の使用例&#34;&gt;実際の使用例&lt;/h3&gt;

&lt;p&gt;adaptive-wrapをインストールしていない場合が上図，インストールして設定すれば下図のように見える．あくまで，Emacsの画面上でword-wrapしているように見えるだけで，実際のファイルではなが～い横１行のままの状態が維持されている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Before_adaptive.jpg&#34; &gt;

&lt;img src=&#34;/img/Before_adaptive.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;








&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/After_adaptive.jpg&#34; &gt;

&lt;img src=&#34;/img/After_adaptive.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;これも一度使い始めると，無くてはならないモノとなるパッケージである．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする</title>
      <link>/post/auto_html_export/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0900</pubDate>
      <guid>/post/auto_html_export/</guid>
      <description>

&lt;p&gt;org-modeで文書を書いていてhtmlにexportする際は，C-e h oとするわけだが，段々とこれが面倒になってくることがある．そこで，ネットを探ってみると，やはり，なんでも載ってるredditにhtml exportを自動化する関数の記事があった．&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#toggle-org-html-export-on-save&#34;&gt;toggle-org-html-export-on-save&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#directoryの内容が変更されると-自動でhtmlを再読込する&#34;&gt;directoryの内容が変更されると，自動でhtmlを再読込する．&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用方法&#34;&gt;使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;toggle-org-html-export-on-save&#34;&gt;toggle-org-html-export-on-save&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;情報元：&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/4golh1/how%5Fto%5Fauto%5Fexport%5Fhtml%5Fwhen%5Fsaving%5Fin%5Forgmode/?sort=old&#34; target=&#34;_blank&#34;&gt;How to auto export html when saving in org-mode?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例によって，下記のようにinit.orgに書き込めばよい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(defun toggle-org-html-export-on-save ()
  (interactive)
  (if (memq &#39;org-html-export-to-html after-save-hook)
      (progn
        (remove-hook &#39;after-save-hook &#39;org-html-export-to-html t)
        (message &amp;quot;Disabled org html export on save for current buffer...&amp;quot;))
    (add-hook &#39;after-save-hook &#39;org-html-export-to-html nil t)
    (message &amp;quot;Enabled org html export on save for current buffer...&amp;quot;)))
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで，toggle-org-html-export-on-saveで，htmlを自動で出力するかどうかを切り替え可能となる．しかし，これだけでは，org文書を保存するたびにブラウザーを手動でreloadしないといけなくなり，面倒である．自動でreloadしてくれるコマンドがあれば便利である．探してみると，これもネットに転がっていた．&lt;/p&gt;

&lt;h2 id=&#34;directoryの内容が変更されると-自動でhtmlを再読込する&#34;&gt;directoryの内容が変更されると，自動でhtmlを再読込する．&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;情報元：&lt;a href=&#34;http://brettterpstra.com/2011/03/07/watch-for-file-changes-and-refresh-your-browser-automatically/&#34; target=&#34;_blank&#34;&gt;Watch for file changes and refresh your browser automatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記サイトに有るrubyのスクリプトが使えそうなので，頂いた．&lt;/li&gt;
&lt;li&gt;rubyのインストールについては，以下のようなサイトを参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shinkuFencer/items/3679cfd966f6a61ccd1b&#34; target=&#34;_blank&#34;&gt;MacにHomeBrew,rbenv,bundlerをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/prgseek/items/ff037cc6134ff9303c67&#34; target=&#34;_blank&#34;&gt;Ruby入門 01.導入（Macに最新版のRubyを入れる）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/TAByasu/items/47c6cfbeeafad39eda07&#34; target=&#34;_blank&#34;&gt;Ruby初学者のRuby On Rails 環境構築【Mac】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;しかし，上記サイトのスクリプトをそのまま使用するとと，reloadの際にページの先頭まで戻ってしまい不便！&lt;/li&gt;

&lt;li&gt;&lt;p&gt;結局，上記サイトのFirefox用のスクリプトを参考に少し書き換えた下記のSafari用のスクリプトを使用すると，reloadの際に先頭まで戻らないので，こちらを使用することとした．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/usr/bin/env ruby
# watch.rb by Brett Terpstra, 2011 &amp;lt;http://brettterpstra.com&amp;gt;
# with credit to Carlo Zottmann &amp;lt;https://github.com/carlo/haml-sass-file-watcher&amp;gt;

trap(&amp;quot;SIGINT&amp;quot;) { exit }

if ARGV.length &amp;lt; 2
puts &amp;quot;Usage: #{$0} watch_folder keyword&amp;quot;
puts &amp;quot;Example: #{$0} . mywebproject&amp;quot;
exit
end

dev_extension = &#39;dev&#39;
filetypes = [&#39;css&#39;,&#39;html&#39;,&#39;htm&#39;,&#39;php&#39;,&#39;rb&#39;,&#39;erb&#39;,&#39;less&#39;,&#39;js&#39;]
watch_folder = ARGV[0]
keyword = ARGV[1]
puts &amp;quot;Watching #{watch_folder} and subfolders for changes in project files...&amp;quot;

while true do
     files = []
     filetypes.each {|type|
files += Dir.glob( File.join( watch_folder, &amp;quot;**&amp;quot;, &amp;quot;*.#{type}&amp;quot; ) )
                    }
     new_hash = files.collect {|f| [ f, File.stat(f).mtime.to_i ] }
     hash ||= new_hash
     diff_hash = new_hash - hash

     unless diff_hash.empty?
     hash = new_hash

     diff_hash.each do |df|
         puts &amp;quot;Detected change in #{df[0]}, refreshing&amp;quot;
     %x{osascript&amp;lt;&amp;lt;ENDGAME
            tell app &amp;quot;Safari&amp;quot; to activate
            tell app &amp;quot;System Events&amp;quot;
                 keystroke &amp;quot;r&amp;quot; using command down
            end tell
ENDGAME
       }
     end
     end

     sleep 1
     end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;このスクリプトにwatch_safari.rbという名前をつけてパスが通っている/usr/local/binに保存し，chomod a+x watch_safari.rbとして実行権限を付けた．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usage: /usr/local/bin/watch_safari.rb watch_folder keyword&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;パスを通しておけば，watch_safari.rb watch_folder keyword で大丈夫&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/Data/Hoge/Fuga/hogefuga.orgを書いているとすると以下のようにそのディレクトリをみはらせておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /Data/Hoge
$ watch_safari.rb Hoge hogefuga.html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;org-modeでhogefuga.orgを書きはじめるときに，M-x toggle-org-html-export-on-save として保存するたびに自動的に新たなhtmlがexportされるようにする．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最初だけは，C-e h oでhtmlをexportして，safariでhogefuga.htmlを開いておく．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以降は，hogefuga.org文書を保存するたびに，現在見ている場所に戻った状態で最新のhtmlに更新されるようになる．便利である．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上はOSX上のSafariを使用している場合であるが，他のブラウザーでも少し変更するだけで同じことができるはずである．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Org-modeで再帰的にsubtreeを絞ったり広げたりする（recursive-narrow）</title>
      <link>/post/org-mode_recursive-narrow/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-mode_recursive-narrow/</guid>
      <description>

&lt;p&gt;org-modeで文章を書いているときに，他のsubtreeが邪魔で消したくなることがある．そして必要になれば，また，もとに戻すことができれば便利である．これを実現してくれるパッケージが&lt;a href=&#34;https://github.com/nflath/recursive-narrow&#34; target=&#34;_blank&#34;&gt;recursive-narrow&lt;/a&gt;である．&lt;/p&gt;

&lt;h2 id=&#34;インストールと設定&#34;&gt;インストールと設定&lt;/h2&gt;

&lt;p&gt;インストールは例によって，init.orgに以下のように書き込むだけである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package recursive-narrow
  :ensure t)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでインストールと設定は終了である．&lt;/p&gt;

&lt;h2 id=&#34;使用法&#34;&gt;使用法&lt;/h2&gt;

&lt;p&gt;使い方も実に簡単であり，&amp;rdquo;C-x n n&amp;rdquo;で現在カーソルがあるsubtree以下のみが表示されるようになり，&amp;rdquo;C-x n w&amp;rdquo;で元の表示に戻る．これではよくわからないので，実際の画像を示す．まず，最初の画像では全体の画面が表示されており，1951行目の「Org-modeで再帰的に」の行にカーソルがある．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/narrow-1.jpg&#34; &gt;

&lt;img src=&#34;/img/narrow-1.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;ここで，&amp;rdquo;C-x n n&amp;rdquo;とやると，次の画面のようになる．つまり，1951行目以降のsubtreeのみが表示される．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/narrow-2.jpg&#34; &gt;

&lt;img src=&#34;/img/narrow-2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;次にカーソルを1962行目の「インストールと設定」に移動する（画像ではすでに移動済み）．そして，再度&amp;rdquo;C-x n n&amp;rdquo;とやると，以下の画像のようになる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/narrow-3.jpg&#34; &gt;

&lt;img src=&#34;/img/narrow-3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;つまり，「インストールと設定」のsubtreeのみの表示となるわけである．集中したい領域だけが表示されて，効率よく入力できる．&lt;/p&gt;

&lt;p&gt;広い領域の表示が必要となれば，&amp;rdquo;C-x n w&amp;rdquo;とやると，1つ前の画像の状態に戻る．そして，もう一度&amp;rdquo;C-x n w&amp;rdquo;とやると，最初の状態に戻る．なんということはないのであるが，便利である．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Org-modeでhtml exportの際のthemeについて</title>
      <link>/post/org-html-export-theme/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-html-export-theme/</guid>
      <description>

&lt;p&gt;org-modeで文書を書いてhtmlにexportすると，素のままでは，なんの愛想もない．特にいくつかの項目をまとめた要約などを並べていくときは，side columnなどがあって，すぐに行きたいところに飛べるようになっていると嬉しい．ということで，今回はorg-modeをhtmlにexportするときのthemeがテーマである．．．．．&lt;/p&gt;

&lt;p&gt;とにかく，たくさんのthemesが存在する．まずは以下のサイトをチェック，というか以下を読めばこのブログは読まなくても良いような．．．(^^;;;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sambatriste/items/2dc9f81cbf1e82d7429a&#34; target=&#34;_blank&#34;&gt;org-modeのHTMLテーマ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sambatriste/items/c8e70368ee5fd092096b&#34; target=&#34;_blank&#34;&gt;org-modeのHTMLテーマ第2弾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fniessen/org-html-themes#how-to-export-org-mode-files-into-awesome-html-in-2-minutes&#34; target=&#34;_blank&#34;&gt;How to export Org mode files into awesome HTML in 2 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thi-ng/org-spec&#34; target=&#34;_blank&#34;&gt;org-spec&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私のお気に入りは，ReadTheOrg（上記の1, 3にある）とorg-spec（上記の4）である．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;readtheorg&#34;&gt;ReadTheOrg&lt;/h2&gt;

&lt;p&gt;これは&lt;a href=&#34;https://docs.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34;&gt;Read the Docs&lt;/a&gt;で使われているthemeのcloneである．一番簡単な使い方は，3にあるようにsetup fileをorg fileのpreambleに書いておくことである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あるいは，3からOrg-HTML themes projectをダウンロードしてきて解凍しローカルの&amp;rdquo;setup file&amp;rdquo;へのパスを書き込めば，ネットの接続に依存せずにexportできるようになる．たとえば，/Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setupに設定ファイルがあるとすると以下のようにすれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+SETUPFILE: /Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下に研究会で発表するスライド原稿を作る下準備として，実際に10個の論文をまとめたorg fileの一部を掲示しておく．左に論文のタイトルが並び，見ている論文の小見出しが自動的に展開される．subheadの色も設定されており，読みやすい．デザインもプロっぽい印象である．書いた内容にかかわらず，なんとなく賢くなったような気分になれる（笑）．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/ReadTheOrg.jpg&#34; &gt;

&lt;img src=&#34;/img/ReadTheOrg.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;org-spec&#34;&gt;&lt;a href=&#34;https://github.com/thi-ng/org-spec&#34; target=&#34;_blank&#34;&gt;org-spec&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;An Org-mode template for technical specification documents and HTML publishing. とのことで，技術よりのthemeである．特徴としては，Ditaa, Graphviz &amp;amp; PlantUMLなどによりテキストベースで図が書ける．表に対応，自動的にアップデートするフィールド，PDF生成にも対応，コードブロックの基本的なsyntax highlightingなどがある．実際の例として&lt;a href=&#34;https://demo.thi.ng/org-spec/&#34; target=&#34;_blank&#34;&gt;https://demo.thi.ng/org-spec/&lt;/a&gt;がある．&lt;/p&gt;

&lt;p&gt;こちらの使い方は少しだけ面倒である．リンク先からorg-specをダウンロードして解凍する．ここで，style.cssが/Hoge/Fuga/org-spec-master/css/style.cssに保存されたとする．ダウンロードして来たファイルに含まれているindex.orgに全て書いてあるので，それを真似てorg fileのpreambleに次のように書いておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+HTML_HEAD: &amp;lt;link href=&amp;quot;http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
#+HTML_HEAD: &amp;lt;link href=&amp;quot;/Hoge/Fuga/org-spec-master/css/style.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
#+AUTHOR: taipapa
#+EMAIL: your@mail.address

#+HTML: &amp;lt;div class=&amp;quot;outline-2&amp;quot; id=&amp;quot;meta&amp;quot;&amp;gt;
| *Author* | {{{author}}} ({{{email}}})    |
| *Date*   | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: &amp;lt;/div&amp;gt;

#+TOC: headlines 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下に前述の論文のまとめをこのcssでexportしたものを掲示しておく．印象がかなり変わると思う．subheadなどは最初から展開されている．ReadTheOrgよりもビジネスライクな感じであるが，よりスマートな気もする．その日の気分によって，この2つを使い分けている．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-spec.png&#34; &gt;

&lt;img src=&#34;/img/org-spec.png&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;


&lt;p&gt;以上あげた2つ以外にも無数のthemeが存在する．また，自分でthemeを作ってしまう剛の者もいらっしゃるので，あちこちを探してみるのも一興．．．(^o^)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）</title>
      <link>/post/html_export/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0900</pubDate>
      <guid>/post/html_export/</guid>
      <description>

&lt;p&gt;学会発表や論文作成にあたっては，当然のことながら，その分野の他の研究者の論文を読んでまとめるなどの作業を行う．そこで，論文の要旨などをorg-modeにざっとまとめておくと，pdfにもhtmlにもtextにもexport出来て便利である．pdfは印刷に向いているが，htmlは多くの論文をいっぺんに見るのに向いており，また，compileの時間もpdfより圧倒的に速い．また，色を変えたり，ハイライトしたりするのもhtmlなら容易である．そこで，今回は，org-modeからhtmlへexportする際の有用な小技について書いてみたい．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;org-macros&#34;&gt;&lt;a href=&#34;https://github.com/fniessen/org-macros&#34; target=&#34;_blank&#34;&gt;Org Macros&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;フォントの色を変更する方法はいろいろあるが，ハイライトや背景の色の変更までできるこの &lt;a href=&#34;https://github.com/fniessen/org-macros&#34; target=&#34;_blank&#34;&gt;Org Macros&lt;/a&gt;が一番便利である．内容は，org-modeの便利なマクロ集である．リンク先からダウンロードして，適当なところに保存し，解凍しておく．ここでは，/Users/taipapa/hoge/fuga/org-macros.setupに置くことにする．使い方は簡単で上記のwebsiteに書いてあるとおり，各org fileの先頭に以下のように記述してorg-macros.setupの場所を教えてやれば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+INCLUDE: /Users/taipapa/hoge/fuga/org-macros.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけである．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;注意事項としては，このブログはox-hugoで書いているが，ox-hugoの場合は文書の先頭に上記を書いても効かない．各ポストのpropertyのあとに書いておけば効く．各ポストごとに設定するようになっているらしい．．．．．（全国15人？ぐらいの人にしか意味のない注意書きである）&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;上記に関しては-ox-hugoの作者であるkaushal-modi氏から以下のような指摘を頂いた-12月19日追記&#34;&gt;上記に関しては，ox-hugoの作者であるKaushal Modi氏から以下のような指摘を頂いた．（12月19日追記）&lt;/h3&gt;

&lt;div class=&#34;panel&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;Can you try using #+setupfile instead of #+include? As an example, here is my blog Org source that I export using ox-hugo ( &lt;a href=&#34;https://gitlab.com/kaushalm&#34; target=&#34;_blank&#34;&gt;https://gitlab.com/kaushalm&lt;/a&gt;&amp;hellip; ), and here is the setup file tha t I &amp;ldquo;include&amp;rdquo; using the more appropriate #+setupfile ( &lt;a href=&#34;https://gitlab.com/kaushalm&#34; target=&#34;_blank&#34;&gt;https://gitlab.com/kaushalm&lt;/a&gt;&amp;hellip; ).&lt;/p&gt;

&lt;p&gt;As you see, I use a lot of Org macros, and they all work in my &amp;ldquo;one post per subtree&amp;rdquo; flow.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ということで，ox-hugoの場合は，以下のように文書の先頭に書いておけば，one-post per subtreeの投稿全てにorg-macroが効くことを確認した．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+setupfile: /Users/taipapa/hoge/fuga/org-macros.setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんなブログにまで目を通してコメントしてくれるのには驚いた．親切な方である．日本語が読める人なのかとも思ったが，どうやらGoogleの翻訳を利用されているようだ．このページだと，&lt;a href=&#34;https://translate.google.com/translate?depth=1&amp;amp;sl=auto&amp;amp;sp=nmt4&amp;amp;tl=en&amp;amp;u=https://taipapamotohus.com/post/html%5Fexport/&amp;amp;xid=17259,1500004,15700019,15700124,15700149,15700186,15700190,15700201,15700237,15700242#comment-4245099680&#34; target=&#34;_blank&#34;&gt;A Perfect Autumn Day&lt;/a&gt;に行くと翻訳版を見ることができる．その翻訳レベルにも今更ながら感心した．．．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;残念ながら，LaTeXへのexportでは，この方法による色の変更などは（現在のところ）効かない．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いくつか使い方の例をあげておく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;{{{color(blue, 青くなるかな？)}}}
*{{{color(blue, ボールドで青くなるかな？)}}}*
{{{highlight(yellow, 黄色にハイライトされるかな？)}}}
*{{{highlight(yellow, 黄色にハイライトされて文字はボールドになるかな？)}}}*
{{{bgcolor(cyan, 背景がシアンになるかな？)}}}
*{{{bgcolor(cyan, 背景がシアンになって文字はボールドになるかな？)}}}*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが以下のように表示される．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color: blue&#34;&gt; 青くなるかな？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span style=&#34;color: blue&#34;&gt; ボールドで青くなるかな？&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;background-color: yellow;&#34;&gt; 黄色にハイライトされるかな？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span style=&#34;background-color: yellow;&#34;&gt; 黄色にハイライトされて文字はボールドになるかな？&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&#34;background-color: cyan;&#34;&gt; 背景がシアンになるかな？&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;div style=&#34;background-color: cyan;&#34;&gt; 背景がシアンになって文字はボールドになるかな？&lt;/div&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記以外にも多くのマクロが含まれており，そちらも人によっては有用かもしれない．少しだけ例をあげておく．以下はパネルの例．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;{{{begin_panel}}} Panel example This is a formatted block of text… {{{end_panel}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが，
&lt;div class=&#34;panel&#34;&gt;&lt;p&gt; Panel example This is a formatted block of text… &lt;/p&gt;&lt;/div&gt;
  となる．マニュアルでは以下の使い方を薦めている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_panel
*Panel example* \\
This is a formatted block of text...
#+end_panel
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;panel&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Panel example&lt;/strong&gt; &lt;br /&gt;
 This is a formatted block of text&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;なお，org-modeのマクロ自体に関しては，org-modeのマニュアルの &lt;strong&gt;12.5 Macro replacement&lt;/strong&gt; を参考にしていただきたい．&lt;/p&gt;

&lt;h2 id=&#34;exporting-org-mode-to-html-in-place-coloring&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/21340380/exporting-org-mode-to-html-in-place-coloring&#34; target=&#34;_blank&#34;&gt;Exporting org-mode to HTML: In-place coloring&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;フォントの色を変える別の方法である．リンク先にある通り，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;     この文章は， *@@html:&amp;lt;font color = &amp;quot;blue&amp;quot;&amp;gt;@@青のボールド@@html:&amp;lt;/font&amp;gt;@@*になって欲しい！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが以下のように表示される．&lt;br /&gt;
この文章は， &lt;strong&gt;&lt;font color = &#34;blue&#34;&gt;青のボールド&lt;/font&gt;&lt;/strong&gt; になって欲しい！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;org-modeのマニュアルの &lt;strong&gt;12.9.5 Quoting HTML tags&lt;/strong&gt; も参考のこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらは設定を必要としないが，やはり，最初に説明したマクロの方がいろいろ出来て便利である．&lt;/p&gt;

&lt;p&gt;次回は，htmlをexportする際のCSSについてまとめてみたい．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swiper, ivy, avy, migemoによるEmacsの検索強化</title>
      <link>/post/swiper_migemo/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0900</pubDate>
      <guid>/post/swiper_migemo/</guid>
      <description>

&lt;p&gt;文章を書いている際に，ある単語を検索したくなるようなことがよくある．Emacsでのデフォルトはisearchであるが，今回は，これを強化するpackageを紹介する．また，最近開いたディレクトリ directory をまた開きたいこともよくあることである．これについてもivyによる検索が便利であるので紹介する．例によってネタ元を見たほうが早いかもしれない．．．(^^;;;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;swiper-dot-el&#34;&gt;swiper.el&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照1：&lt;a href=&#34;https://github.com/abo-abo/swiper&#34; target=&#34;_blank&#34;&gt;swiper&lt;/a&gt;  ご本家&lt;/li&gt;
&lt;li&gt;参照2：&lt;a href=&#34;http://emacs.rubikitch.com/swiper/&#34; target=&#34;_blank&#34;&gt;swiper.el: 一覧付き正規表現isearch！C-sを置き換えろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照3：&lt;a href=&#34;https://qiita.com/blue0513/items/c0dc35a880170997c3f5&#34; target=&#34;_blank&#34;&gt;Emacsの補完&amp;amp;検索を超強化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacsでは，C-sに割り当てられたisearchによる正規表現検索がデフォルトで存在する．これをivyを用いて一覧を付加するようにした強化版である．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-and-setup&#34;&gt;Install &amp;amp; setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下を，int.orgに書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package swiper
:ensure t
:config
(defun isearch-forward-or-swiper (use-swiper)
(interactive &amp;quot;p&amp;quot;)
;; (interactive &amp;quot;P&amp;quot;) ;; 大文字のPだと，C-u C-sでないと効かない
(let (current-prefix-arg)
  (call-interactively (if use-swiper &#39;swiper &#39;isearch-forward))))
(global-set-key (kbd &amp;quot;C-s&amp;quot;) &#39;isearch-forward-or-swiper)
)

(use-package ivy
:ensure t
;; :config
;; (fset &#39;ivy--regex &#39;identity)
)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ivyのコメントアウトしている部分については後述する．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使い方&#34;&gt;使い方&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;現在開いているEmacsのバッファで，C-sとするだけでよい．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下図は，ivyを検索しているところだが，下に&amp;rdquo;Swiper&amp;rdquo;と表示されるバッファが表示され，そこに”ivy”と打つと，上の本文の中のivyは黄色でハイライトされる．同時に下のバッファでは，現在見ているivyのある行に下線が引かれ，行数が横に示される．上下のArrow Keyでivyのある行から次の行に飛べる．リターンすれば本文のその行に行ける．非常に便利である．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-1a.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-1a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;migemo&#34;&gt;migemo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照1：&lt;a href=&#34;http://0xcc.net/migemo/&#34; target=&#34;_blank&#34;&gt;Migemo: ローマ字のまま日本語をインクリメンタル検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照2：&lt;a href=&#34;https://www.yokoweb.net/2017/03/05/emacs-macos-migemo/&#34; target=&#34;_blank&#34;&gt;【Emacs/macOS】migemoを有効にし、ローマ字のまま日本語検索する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;migemoとは，「ローマ字のまま日本語をインクリメンタル検索するため のツールです。かな漢字変換をすることなく日本語のインクリメン タル検索を快適に行うことができます。」&lt;/li&gt;
&lt;li&gt;一度使い始めるとやみつきになるので，オススメ！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cmigemoのinstall&#34;&gt;cmigemoのinstall&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まず，C言語で再実装されたcmigemoをインストールする．homebrewで簡単にインストールできる．&amp;ndash;HEADのオプションが必要との記載もあるが，なくても同じであった．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew install cmigemo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;migemo-dot-elのinstall-and-setup&#34;&gt;migemo.elのInstall &amp;amp; setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下を，int.orgに書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+BEGIN_SRC emacs-lisp
(use-package migemo
:ensure t
:config
;; C/Migemo を使う場合は次のような設定を .emacs に加えます．
(setq migemo-command &amp;quot;cmigemo&amp;quot;)
(setq migemo-options &#39;(&amp;quot;-q&amp;quot; &amp;quot;--emacs&amp;quot; &amp;quot;-i&amp;quot; &amp;quot;\a&amp;quot;))
(setq migemo-dictionary &amp;quot;/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict&amp;quot;)  ;; 各自の辞書の在り処を指示
(setq migemo-user-dictionary nil)
(setq migemo-regex-dictionary nil)
;; charset encoding
(setq migemo-coding-system &#39;utf-8-unix))
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;avy-migemo-swiperのmigemo対応&#34;&gt;avy-migemo（swiperのmigemo対応）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照１：&lt;a href=&#34;https://github.com/momomo5717/avy-migemo/blob/master/README.jp.org&#34; target=&#34;_blank&#34;&gt;avy-migemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照２：&lt;a href=&#34;https://dev.classmethod.jp/tool/emacs-avy-migemo/&#34; target=&#34;_blank&#34;&gt;avy と migemo を組み合わせたパッケージ avy-migemo.el のご紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照３：&lt;a href=&#34;https://qiita.com/ballforest/items/7810e229d6f771d0ab16&#34; target=&#34;_blank&#34;&gt;avyのmigemo対応およびswiperのmigemo対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記のswiperだけでも十分に便利であるが，swiperをmigemoに対応させることで，更に便利になる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;前述したswiper.elでのコメントアウトした設定部分，つまり，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (fset &#39;ivy--regex &#39;identity)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は，コメントアウトしておかないと，migemo化を無効にしてしまうので注意。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-and-setup-1&#34;&gt;Install &amp;amp; setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下を，int.orgに書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(use-package avy-migemo
:ensure t
:config
(avy-migemo-mode 1)
(setq avy-timeout-seconds nil)
(require &#39;avy-migemo-e.g.swiper)
(global-set-key (kbd &amp;quot;C-M-;&amp;quot;) &#39;avy-migemo-goto-char-timer)
;;  (global-set-key (kbd &amp;quot;M-g m m&amp;quot;) &#39;avy-migemo-mode)
)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使い方-1&#34;&gt;使い方&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;現在開いているEmacsのバッファで，C-sとするだけでよい．&lt;/li&gt;
&lt;li&gt;下図は，&amp;rdquo;taiou&amp;rdquo;，つまり，「対応」を検索しているところである．migemo化する前と同じようにローマ字で日本語が検索できる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当たり前だが，漢字を入力しても検索できる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/swiper-2a.jpg&#34; &gt;

&lt;img src=&#34;/img/swiper-2a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;最近開いたディレクトリを開く&#34;&gt;最近開いたディレクトリを開く&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参照：&lt;a href=&#34;http://pragmaticemacs.com/emacs/open-a-recent-directory-in-dired-revisited/&#34; target=&#34;_blank&#34;&gt;OPEN A RECENT DIRECTORY IN DIRED: REVISITED&lt;/a&gt;　ネタ元&lt;/li&gt;
&lt;li&gt;ivyを使って最近開いたディレクトリを動的に探索する方法をコード化してくれているので紹介する．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下のコードをinit.orgに書き込めば良い．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(defun bjm/ivy-dired-recent-dirs ()
  &amp;quot;Present a list of recently used directories and open the selected one in dired&amp;quot;
  (interactive)
  (let ((recent-dirs
         (delete-dups
          (mapcar (lambda (file)
                    (if (file-directory-p file) file (file-name-directory file)))
                  recentf-list))))

    (let ((dir (ivy-read &amp;quot;Directory: &amp;quot;
                         recent-dirs
                         :re-builder #&#39;ivy--regex
                         :sort nil
                         :initial-input nil)))
      (dired dir))))

(global-set-key (kbd &amp;quot;C-x C-d&amp;quot;) &#39;bjm/ivy-dired-recent-dirs)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-x C-dすれば，下図のように，最近開いたディレクトリが表示され，その中から行きたいディレクトリを選んで，リターンすれば良い．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/directory-1a.jpg&#34; &gt;

&lt;img src=&#34;/img/directory-1a.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上，今回は小ネタだが非常に有用なものばかりを紹介した．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsとskimで，latexのソースとpdfの間を行ったり来たり</title>
      <link>/post/synchronization/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0900</pubDate>
      <guid>/post/synchronization/</guid>
      <description>

&lt;p&gt;以前の記事（&lt;a href=&#34;../beamer&#34;&gt;beamerでスライド原稿用pdfを作成する（その１）&lt;/a&gt;）で，Emacsでbeamerを用いてlatexのソースを書いてコンパイルし，スライド原稿としてpdfを出力する方法をまとめた．この際に，pdfの特定の箇所がlatexのソースでどこに当たるのかがわかったり，逆に，latexのソースの特定の箇所がpdf上のどこに当たるのかがわかったりすると便利である．今回はそれについてまとめる．なお，auctexの全般的な設定については，TeXWikiの&lt;a href=&#34;https://texwiki.texjp.org/?AUCTeX#h32722ec&#34; target=&#34;_blank&#34;&gt;macOS での設定例&lt;/a&gt; を参照していただきたい．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://ryogan.org/blog/2015/12/30/mac-os-x-el-capitan-の-auctex-の設定/&#34; target=&#34;_blank&#34;&gt;Mac OS X El Capitan の AUCTeX の設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://texwiki.texjp.org/?Emacs#e9c08b3d&#34; target=&#34;_blank&#34;&gt;skimとの連携&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/&#34; target=&#34;_blank&#34;&gt;AUCTeX の設定と便利な機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参照：&lt;a href=&#34;https://sourceforge.net/p/skim-app/wiki/TeX%5Fand%5FPDF%5FSynchronization/&#34; target=&#34;_blank&#34;&gt;TeX_and_PDF_Synchronization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;backward-search&#34;&gt;backward search&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;こちらのほうが便利なので最初に説明する．&lt;/li&gt;
&lt;li&gt;skimで表示されたpdf上の特定の箇所に該当するLaTeX文書の箇所を探して示してくれる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この機能を可能にするには，skimの環境設定を開いて「同期する」の初期値を「カスタム」とし，コマンドのところに以下のように打ち込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ /usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1/bin/emacsclient
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;defaultでは初期値に「Emacs」となっており，本来ならこれで動くはずだが，homebrewで最新のEmacsをinstallしたために，もともと入っているemacsとはversionが異なる．つまり，サーバーとして起動しているEmacsと、使用するEmacsClientのバージョンが異なることになり，このままでは動かない．そこで，homebrewでインストールした方をfull pathで明示的に指示する必要がある．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;引数のところには，以下のように打ち込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ --no-wait +%line &amp;quot;%file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;つまりこうなる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/skim-1.jpg&#34; &gt;

&lt;img src=&#34;/img/skim-1.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一方，Emacsのinit.orgには以下のように記述して，Emacs serverを立ち上げておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
;; Starts the Emacs server
(server-start)
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，pdf上の任意の箇所で，Shift-Command-Clickすると，該当するlatex documentの箇所に飛ぶ．&lt;del&gt;もし，Emacsが立ち上がっていなければ，Emacsを立ち上げるところからやってくれる．素晴らしい！&lt;/del&gt; これは確かめてみると勘違いであった．Emacsは立ち上げておかないといけない．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この機能は知ってしまうと，無くてはならないほど便利に感じる機能である．pdfで間違いを見つけたときに，それがlatexソースのどこに相当するかを同定するのは結構面倒であるが，この機能により一発で同定することができる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;該当箇所が少しずれることがあるのが欠点であるが，それでも十分に役に立つ．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;forward-search&#34;&gt;forward search&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;こちらも，backward searchほどではないが，役に立つ．&lt;/li&gt;
&lt;li&gt;Emacs上のlatex document上の特定の箇所に該当するpdfの箇所を探して示してくれる．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この機能を可能にするには，init.orgに以下のように記述する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(add-hook &#39;LaTeX-mode-hook
          (function (lambda ()
                      (add-to-list &#39;TeX-command-list
                                   &#39;(&amp;quot;displayline&amp;quot;
                                     &amp;quot;/Applications/Skim.app/Contents/SharedSupport/displayline %n %s.pdf \&amp;quot;%b\&amp;quot;&amp;quot;
                                     TeX-run-discard-or-function t t :help &amp;quot;Forward search with Skim&amp;quot;))
                      )))
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，C-c C-c displayline により，Emacsのlatex document上の特定の箇所に該当するpdfの箇所に飛んでくれる．pdfの該当するところが赤丸で示される（数秒で消える）．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ただし，該当する箇所が結構ずれてしまうことが多い．最近は，beamerでしか使わないので，もしかすると，通常のlatex 文書だと狂いなく示すのかもしれない．まぁ，backward searchと違って， なくても困らない機能である．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）</title>
      <link>/post/org-mode_paper_1/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0900</pubDate>
      <guid>/post/org-mode_paper_1/</guid>
      <description>

&lt;p&gt;私がEmacsを使用している理由の一番大きなものはorg-modeである．あらゆる文書作成にorg-modeを用いている．org-modeを使って論文を書くことに関しては，ググってもらえばおわかりのように，ネット上に山のように情報が存在する．「屋上屋を架してどうする」と言う自分の中の声を押し殺し，あくまで備忘録ということで，あえてここにまとめておく．なお，私はGTDのツールとしてはorg-modeを全く使用していないので，その種の情報はここにはまったくないことをお断りしておく．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;org-modeからlatex経由で，文献がnumberingされ文献リストも付いたpdfを出力できるようにする&lt;/li&gt;
&lt;li&gt;org-modeから，文献がnumberingされ文献リストも付いたhtmlを出力できるようにする&lt;/li&gt;
&lt;li&gt;org-modeから，文献がnumberingされ文献リストも付いたwordファイルを出力できるようにする&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;org-modeで論文を書く利点&#34;&gt;org-modeで論文を書く利点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;LaTeXのややこしいコマンドを覚えなくても普通に文章を書いていけば，pdfで出力できる．&lt;/li&gt;
&lt;li&gt;latexの力を借りることで，文献の引用やリストの作成を自動化できる．&lt;/li&gt;
&lt;li&gt;必要なら，htmlとしても出力できる．&lt;/li&gt;
&lt;li&gt;どうしても必要なら，pandocの力を借りて，なんとMicrosoft Wordのファイルとしても出力できてしまう．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;org-modeの設定-セットアップ-pdfとhtmlへの出力用&#34;&gt;org-modeの設定・セットアップ（pdfとhtmlへの出力用）&lt;/h2&gt;

&lt;p&gt;設定が最もよくまとまっているのは&lt;a href=&#34;https://texwiki.texjp.org/?Emacs%2FOrg%20mode&#34; target=&#34;_blank&#34;&gt;TeX Wiki Emacs/Org mode&lt;/a&gt; 設定例のmacOSの部分である．正統派の方は，こちらを参考にしていただきたい．&lt;/p&gt;

&lt;p&gt;私は，&lt;a href=&#34;https://ctan.org/pkg/koma-script&#34; target=&#34;_blank&#34;&gt;koma-script – A bundle of versatile classes and packages&lt;/a&gt; と &lt;a href=&#34;https://tufte-latex.github.io/tufte-latex/&#34; target=&#34;_blank&#34;&gt;Tufte-LaTeX&lt;/a&gt; を気に入っており，ほぼこれらしか使わないので，その設定を書いておく．その前に少し情報をまとめておく．&lt;/p&gt;

&lt;h3 id=&#34;koma-script-a-bundle-of-versatile-classes-and-packages&#34;&gt;&lt;a href=&#34;https://ctan.org/pkg/koma-script&#34; target=&#34;_blank&#34;&gt;koma-script – A bundle of versatile classes and packages&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１：&lt;a href=&#34;http://konoyonohana.blog.fc2.com/blog-category-12.html&#34; target=&#34;_blank&#34;&gt;Koma-Script 入門　～初歩の初歩～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト２：&lt;a href=&#34;https://ichiro-maruta.blogspot.com/2013/03/latex.html&#34; target=&#34;_blank&#34;&gt;使ってはいけない LaTeX のコマンド・パッケージ・作法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト３：&lt;a href=&#34;https://qiita.com/zr%5Ftex8r/items/297154ca924749e62471&#34; target=&#34;_blank&#34;&gt;LaTeX の「アレなデフォルト」 傾向と対策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アメリカ生まれのaritcleなどの欧文標準文書クラスはデフォルトがレターサイズで余白が広すぎてしまう．これに対して，ヨーロッパ生まれのkoma-scriptはa4がデフォルトで，余白も広すぎず，レイアウトもなんとなくオシャレ（笑）である．当然のことながら，texliveに含まれており，texliveをインストールした時点で，インストールされている．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tufte-latex&#34;&gt;&lt;a href=&#34;https://tufte-latex.github.io/tufte-latex/&#34; target=&#34;_blank&#34;&gt;Tufte-LaTeX&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１： &lt;a href=&#34;https://github.com/tsdye/tufte-org-mode/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;tufte-org-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.edwardtufte.com/tufte/index&#34; target=&#34;_blank&#34;&gt;Edward R. Tufte&lt;/a&gt;によって作られたページレイアウト．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．こういうスタイルはよく見かけるものだと思うが，作者がはっきりしているとは，恥ずかしながら全く知らなかった．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tsdye/tufte-org-mode/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;tufte-org-mode&lt;/a&gt;はこのtufte classをorg-modeから使えるようにした有り難いパッケージである．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;org-bullet&#34;&gt;org-bullet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１：&lt;a href=&#34;https://github.com/sabof/org-bullets&#34; target=&#34;_blank&#34;&gt;https://github.com/sabof/org-bullets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト２：&lt;a href=&#34;http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html&#34; target=&#34;_blank&#34;&gt;http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pdf出力とは関係ないが，ついでに触れておく．要するにorg-modeの見た目が良くなるパッケージである．星印が色付きの丸や二重丸になる．やる気に繋がるので，見た目は大事である．こんな感じになる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-bullet.jpg&#34; &gt;

&lt;img src=&#34;/img/org-bullet.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.elには以下のように&lt;a href=&#34;https://github.com/jwiegley/use-package&#34; target=&#34;_blank&#34;&gt;use-package&lt;/a&gt;を用いて記述してインストール兼設定となる．もちろん，これも以前の記事（&lt;a href=&#34;../init_org&#34;&gt;Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する&lt;/a&gt;）で説明したように，init.orgに書いたものから生成されたinit.elである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(use-package org-bullets
  :ensure t
  :config
  (add-hook &#39;org-mode-hook (lambda () (org-bullets-mode 1))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;org-modeのinit-dot-elの設定-pdf出力用&#34;&gt;org-modeのinit.elの設定（pdf出力用）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前述のごとく，koma-scriptとTufte-LaTeXについて設定する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;何回もしつこいようだが，これも以前の記事（&lt;a href=&#34;../init_org&#34;&gt;Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する&lt;/a&gt;）で説明したように，init.orgに書いたものから生成されたinit.elである．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;ox-latex)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.org$&amp;quot; . org-mode))
(setq org-latex-default-class &amp;quot;bxjsarticle&amp;quot;)

(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;koma-article&amp;quot;
               &amp;quot;\\documentclass{scrartcl}&amp;quot;
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)
               (&amp;quot;\\subsubsection{%s}&amp;quot; . &amp;quot;\\subsubsection*{%s}&amp;quot;)
               (&amp;quot;\\paragraph{%s}&amp;quot; . &amp;quot;\\paragraph*{%s}&amp;quot;)
               (&amp;quot;\\subparagraph{%s}&amp;quot; . &amp;quot;\\subparagraph*{%s}&amp;quot;)))

(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;koma-jarticle&amp;quot;
               &amp;quot;\\documentclass{scrartcl}
               \\usepackage{amsmath}
               \\usepackage{amssymb}
               \\usepackage{xunicode}
               \\usepackage{fixltx2e}
               \\usepackage{zxjatype}
               \\usepackage[hiragino-dx]{zxjafont}
               \\usepackage{xltxtra}
               \\usepackage{graphicx}
               \\usepackage{longtable}
               \\usepackage{float}
               \\usepackage{wrapfig}
               \\usepackage{soul}
               \\usepackage{hyperref}&amp;quot;
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)
               (&amp;quot;\\subsubsection{%s}&amp;quot; . &amp;quot;\\subsubsection*{%s}&amp;quot;)
               (&amp;quot;\\paragraph{%s}&amp;quot; . &amp;quot;\\paragraph*{%s}&amp;quot;)
               (&amp;quot;\\subparagraph{%s}&amp;quot; . &amp;quot;\\subparagraph*{%s}&amp;quot;)))

;; tufte-handout class for writing classy handouts and papers
(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;tufte-handout&amp;quot;
               &amp;quot;\\documentclass[twoside,nobib]{tufte-handout}
                                 [NO-DEFAULT-PACKAGES]
                \\usepackage{zxjatype}
                \\usepackage[hiragino-dx]{zxjafont}&amp;quot;
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)))
;; tufte-book class
(add-to-list &#39;org-latex-classes
             &#39;(&amp;quot;tufte-book&amp;quot;
               &amp;quot;\\documentclass[twoside,nobib]{tufte-book}
                                [NO-DEFAULT-PACKAGES]
                 \\usepackage{zxjatype}
                 \\usepackage[hiragino-dx]{zxjafont}&amp;quot;
               (&amp;quot;\\part{%s}&amp;quot; . &amp;quot;\\part*{%s}&amp;quot;)
               (&amp;quot;\\chapter{%s}&amp;quot; . &amp;quot;\\chapter*{%s}&amp;quot;)
               (&amp;quot;\\section{%s}&amp;quot; . &amp;quot;\\section*{%s}&amp;quot;)
               (&amp;quot;\\subsection{%s}&amp;quot; . &amp;quot;\\subsection*{%s}&amp;quot;)
               (&amp;quot;\\paragraph{%s}&amp;quot; . &amp;quot;\\paragraph*{%s}&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;私はxelatexを使っているので，compileは以下のように設定している．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-latex-pdf-process
      &#39;(&amp;quot;xelatex -interaction nonstopmode -output-directory %o %f&amp;quot;
        &amp;quot;bibtex %b&amp;quot;
        &amp;quot;xelatex -interaction nontopmode -output-directory %o %f&amp;quot;
        &amp;quot;xelatex -interaction nonstopmode -output-directory %o %f&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．なお，pandocやTufteの項は別途記事にするので，とりあえずは無視してほしい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/org-C-c-C-e.jpg&#34; &gt;

&lt;img src=&#34;/img/org-C-c-C-e.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pdfで出力したければ，さらに，l o と打つと，As PDF file and openを選択したことになり，原稿がpdfとして出力され，かつ，skimでそのpdfがオープンされる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;同じく，htmlで出力したければ，h o と打つと，As HTML file and openを選択したことになり，ブラウザーでそのhtmlがオープンされる．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;org-modeで論文を書く-の実例&#34;&gt;「org-modeで論文を書く」の実例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;それでは実例を示してみる．以下のような書類を作成し，hogefuga.orgとして保存する．hoge_fuga.jpgはorg fileと同じdirectoryにあるものとする．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略&amp;hellip;..(^^;;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+LaTeX_CLASS: koma-jarticle
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: date:nil
#+LINK_UP:
#+LINK_HOME:

#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
\vspace*{-1.5cm}

\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

* 背景と目的
hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
* 結果
hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．

#+NAME: hoge_fuga
#+caption: hoge-fuga（重症例である）
#+attr_latex: :float t :width 3in  :align center
#+ATTR_HTML: :width 500  :float: wrap :align center
[[./hoge_fuga.jpg]]

* 結論
hogefugaによる治療は有効である．
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e l oと打てば，以下のようなpdfがskimで開かれる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/hogefuga_text.jpg&#34; &gt;

&lt;img src=&#34;/img/hogefuga_text.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;また，C-c C-e h oと打てば，以下のようなhtmlがbrowserで開かれる．latexのコマンドが見えてしまっているのがご愛嬌だが，htmlにしか出力しないのであれば，削除すればよい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/hogefuga_html.jpg&#34; &gt;

&lt;img src=&#34;/img/hogefuga_html.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;長くなったので，ここまでとし，文献の引用の設定は次回の記事にまとめることとする．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>beamerでスライド原稿用pdfを作成する（その１）</title>
      <link>/post/beamer/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/beamer/</guid>
      <description>

&lt;p&gt;前回のポスト（&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）&lt;/a&gt;）により，既にLaTeXはインストールされたので，今回は学会発表向けのスライド原稿作成についてまとめる．ようやく実質的な話になる．
　&lt;/p&gt;

&lt;h2 id=&#34;beamerによるスライド原稿の作成&#34;&gt;beamerによるスライド原稿の作成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsのauctexを使うと補完などあり，便利である．&lt;/li&gt;
&lt;li&gt;下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う．&lt;/li&gt;
&lt;li&gt;なお， \usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えていただいた．参考：&lt;a href=&#34;https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=729&#34; target=&#34;_blank&#34;&gt;beamerでの数式フォントの変更&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;% -*-coding:utf-8-*-
\documentclass[svgnames, table, 14pt]{beamer}
\usepackage{zxjatype}
\usepackage[hiragino-dx]{zxjafont}

% ヒラギノ角ゴ Proを使う
\setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}
\setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}

% themeを指定する
\usetheme{Darmstadt}

\usefonttheme[onlylarge]{structurebold}
\setbeamerfont*{frametitle}{size=\large,series=\bfseries}
\setbeamertemplate{navigation symbols}{}

\usepackage[english]{babel}
\usepackage[latin1]{inputenc}
\usepackage{times}
\usepackage[T1]{fontenc}
\usepackage{hyperref}

% Setup TikZ
\usepackage{tikz}
\usetikzlibrary{arrows}
\tikzstyle{block}=[draw opacity=0.7,line width=1.4cm]
% Figure position
\usepackage[absolute,overlay]{textpos}
% math
\usepackage{mathabx}

\usefonttheme{professionalfonts}

% Author, Title, etc.
\title[hoge/fugaによる相補的な治療における高難度症例の治療と成績]
{hoge/fugaによる相補的な治療における高難度症例の治療と成績}
\author[taipapa]
{taipapa, 織田信長, 豊臣秀吉, 徳川家康}
\institute[hogefuga University]
{hogefuga大学大学院 hogefuga研究科　hogefuga分野}


\date[日本hogefuga外科学会 第??回学術総会　\hspace{2.4cm} 201X年X月XX日]
{\scriptsize{Symposium-02「とっーても難しいhogeとfuga」
\\ \vspace{0.15cm} 筆頭演者はhogefuga外科学会へ過去3年間のCOI自己申告を
完了しています．\\本演題の発表に関して開示すべきCOIはありません
}}

% 学会名，日付，スライド番号を挿入
\setbeamertemplate{footline}
{\color{gray} %
\hspace{.075cm}
\insertshortdate%
\hspace{4cm}
\insertframenumber{} / \inserttotalframenumber%
}

\begin{document}

\begin{frame}
\titlepage
\end{frame}

\section{Introduction}

\begin{frame}{背景と目的}
\begin{block}{}
\begin{itemize}
\item hogeとfugaを比較してみると，一方で難易度の高い症例で
も他方では容易に行える場合も多い.
\item 当施設では，一方に片寄ることなく，hogeとfugaを相補的に
用いることにより合併症の減少を目指す方針をとっている．
\item そこで，自験例から高難度のhogefuga症例についての
方針と成績を主にhogefuga surgeonの立場から検討した.
\end{itemize}
\end{block}
\end{frame}

\section{Results}
\begin{frame}
\frametitle{hogefuga症例の画像}
\centering
\includegraphics[width=3.5in]{hoge_fuga.pdf}
\end{frame}
\end{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ターミナルで，cdして上記のbeamer_test.texのあるdirectoryに移動し，shellで以下のように打ち込む．前回のポスト（&lt;a href=&#34;../latexmk&#34;&gt;LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする&lt;/a&gt;を参考　&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;latexmk -pvc -pdf -view=none beamer_test.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで下記のようなpdfが出来上がるはず．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/beamer_test.jpg&#34; &gt;

&lt;img src=&#34;/img/beamer_test.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;








&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/beamer_test2.jpg&#34; &gt;

&lt;img src=&#34;/img/beamer_test2.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;画像の貼り付けが必要なら，上の文書にもあるように必要な箇所で，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;\includegraphics[width=2in]{/Data/hoge/fuga/......./hoge_fuga.pdf}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと打てばよい．以下のようなスライドが得られる．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/beamer_test3.jpg&#34; &gt;

&lt;img src=&#34;/img/beamer_test3.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なにもしなければ，画像は左寄せになる．中央に寄せたければ，上記の文書内にあるように，\centering を使用する．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;次回は，beamerで動画を走らせる件について書く予定．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）</title>
      <link>/post/latexmk/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/latexmk/</guid>
      <description>

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;tex-live-2018のインストール&#34;&gt;TeX Live 2018のインストール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト１：&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX Live&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト２：&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live%2FMac&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX LiveMac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考サイト３：&lt;a href=&#34;http://www.tug.org/mactex/&#34; target=&#34;_blank&#34;&gt;The MacTeX-2018 Distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする．&lt;/li&gt;
&lt;li&gt;これでスライド作成ソフトであるbeamerも一緒にインストールされる．&lt;/li&gt;
&lt;li&gt;beamerに固有の設定は特に必要なし．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tex-live-2018のインストール-2018年9月1日追記&#34;&gt;TeX Live 2018のインストール（2018年9月1日追記）&lt;/h2&gt;

&lt;p&gt;大事なことを２つ忘れていたので追記する．&lt;/p&gt;

&lt;h3 id=&#34;ヒラギノフォントの埋め込みなど&#34;&gt;ヒラギノフォントの埋め込みなど&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;http://doratex.hatenablog.jp/entry/20180501/1525144736&#34; target=&#34;_blank&#34;&gt;MacTeX 2018のインストール&amp;amp;日本語環境構築法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;こんなところを読んでいないで，直ちに上記のサイトに飛んでいただきたい．&lt;/li&gt;
&lt;li&gt;マックユーザーにとっての最大の問題点は &lt;strong&gt;「macos標準添付のヒラギノフォントなど商用フォントに関する設定ファイル群が，TeX LiveからTLContriに移動になった」&lt;/strong&gt; ということである．この問題に対する対応方法は，すべて上記のサイトに記載されているので，そのとおりにすれば良い．実にありがたい．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストール後のパスの修正-symbolic-linkを張る&#34;&gt;インストール後のパスの修正（symbolic linkを張る）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live%2FMac&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX LiveMac&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MacTeX 2018を普通にインストールすると，/usr/local/texlive/2018/bin/x86_64-darwin/bibtexというふうにbinの下にx86_64-darwinというdirectoryが入って，tex関連のコマンドのパスが上手く通らなくなる．そこで，上記の&lt;a href=&#34;https://texwiki.texjp.org/?TeX%20Live%2FMac&#34; target=&#34;_blank&#34;&gt;TeX Wiki TeX LiveMac&lt;/a&gt;に書いてあるように，/usr/local/binディレクトリの下にsymbolic linkを張る．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo /usr/local/texlive/????/bin/*/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記でうまくいかないときは下記のように具体的なディレクトリ名を指定する．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo /usr/local/texlive/2018/bin/x86_64-darwin/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;auctexのインストールと設定&#34;&gt;auctexのインストールと設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見）&lt;/li&gt;
&lt;li&gt;preludeをインストールした時点で，auctexもインストールされる．&lt;/li&gt;
&lt;li&gt;auctexの設定などについては以下を参照（手抜き&amp;hellip;.. (^^;;; ）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/auctex/&#34; target=&#34;_blank&#34;&gt;AUCTEX – Sophisticated document creation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?AUCTeX&#34; target=&#34;_blank&#34;&gt;TeX Wiki AUCTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mytexpert.osdn.jp/index.php?Emacs/AUCTeX&#34; target=&#34;_blank&#34;&gt;Emacs/AUCTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/&#34; target=&#34;_blank&#34;&gt;AUCTeX の設定と便利な機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;しかし，org-modeを使うようになってからは直接latex文書を打つことはめっきり少なくなってしまった．それでも，学会発表用のスライドなどはlatexを直接打って，beamer文書を作成し，pdf原稿に変換している．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;latexmk&#34;&gt;latexmk&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacsでbeamerを使って，スライド原稿などを作成していると，C-c C-cするたびにtex文書がcompileされてpdf原稿が出来上がるのを待たなければならず，この待ち時間が結構辛い．そこで，tex ファイルの変更が保存されるたびに自動で裏でlatexmkがcompileしてくれるようにする．latexmkを使う．&lt;/li&gt;
&lt;li&gt;参考サイト：&lt;a href=&#34;https://texwiki.texjp.org/?Latexmk&#34; target=&#34;_blank&#34;&gt;TeX Wiki Latexmk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;texlive2018, MacTeXに入っているので，これらを入れていれば別途インストールする必要なし．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.latexmkrcの中に以下のように記述する（ちなみに私はxelatexを使用している）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;$pdflatex = &#39;xelatex -interaction=nonstopmode -synctex=1 %O %S&#39;;
$pdf_mode = 1;
$postscript_mode = $dvi_mode = 0;
$pdf_previewer  = &#39;open -a Skim&#39;;
$preview_continuous_mode = 1;  # equivalent to -pvc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;実際の作業&#34;&gt;実際の作業&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上記のようにセットアップしていることとする．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ターミナルで，texファイルが有るdirectoryに移動し，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;latexmk -pvc -pdf -view=none document.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで，texファイルへの変更を保存すると自動でコンパイルされて，設定にもよるが，skimで開いているpdfファイルも更新される．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xelatexについて&#34;&gt;XeLaTeXについて&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以下を参照されたい．特に最初にあげたZRさんの文書は必読！

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zrbabbler.sp.land.to/xelatex.html&#34; target=&#34;_blank&#34;&gt;XeLaTeX で日本語する件について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?XeTeX&#34; target=&#34;_blank&#34;&gt;TeXWiki XeTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suzusime-log.hatenablog.jp/entry/2017/04/15/210327&#34; target=&#34;_blank&#34;&gt;XeLaTeXだとかな混植が簡単にできて最高だという話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など</title>
      <link>/post/japanese_setup/</link>
      <pubDate>Sat, 18 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/japanese_setup/</guid>
      <description>

&lt;p&gt;ようやく，ここからinit.orgの具体的な記述になる．&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;coding-systemの設定&#34;&gt;Coding systemの設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.orgに以下のように書き込む&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;​* Coding System Environment
** 言語を日本語にする
   #+BEGIN_SRC lisp
   (set-language-environment &#39;Japanese)
   #+END_SRC
** 極力UTF-8とする
   #+BEGIN_SRC lisp
     (prefer-coding-system &#39;utf-8)
   #+END_SRC
** 日本語フォントをヒラギノにする
​   - 日本語のサイズを指定しないと動的にサイズを変えられるようになる
​   - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/
   #+BEGIN_SRC lisp
     (when (or (eq window-system &#39;mac) (eq window-system &#39;ns))
       (set-face-attribute &#39;default nil
                           :family &amp;quot;Menlo&amp;quot;
                           :height 180) ;; 18pt
       (set-fontset-font nil &#39;japanese-jisx0208
                         (font-spec :family &amp;quot;Hiragino Kaku Gothic ProN&amp;quot;))
       (setq face-font-rescale-alist
             &#39;((&amp;quot;.*Hiragino Kaku Gothic ProN.*&amp;quot; . 1.1))))
   #+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これがEmacs起動時にorg-babel-load-fileにより変換されて下記のようなinit.elとなる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(set-language-environment &#39;Japanese)

(prefer-coding-system &#39;utf-8)

(when (or (eq window-system &#39;mac) (eq window-system &#39;ns))
  (set-face-attribute &#39;default nil
                      :family &amp;quot;Menlo&amp;quot;
                      :height 180) ;; 18pt
  (set-fontset-font nil &#39;japanese-jisx0208
                    (font-spec :family &amp;quot;Hiragino Kaku Gothic ProN&amp;quot;))
  (setq face-font-rescale-alist
        &#39;((&amp;quot;.*Hiragino Kaku Gothic ProN.*&amp;quot; . 1.1))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;つまり，org-modeで書いたinit.orgでの解説はすべて除かれて，lispのみのcodeになってinit.elが生成される．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この利点は，init.elの説明が実に書きやすい点にある（実際にはinit.orgに書くわけだが．．．）．org-modeはアウトライナーなので，階層構造も自由自在である．整理もしやすいし，後で順番を変えるのもCommand + arrow keyを使えば実に簡単である．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;inline-patchの設定&#34;&gt;Inline-patchの設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ついで，最も重要なinline-patchの設定&lt;/li&gt;
&lt;li&gt;参考：&lt;a href=&#34;http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945&#34; target=&#34;_blank&#34;&gt;Macに最新バージョンのEmacsをインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考：&lt;a href=&#34;http://suzuki.tdiary.net/20160103.html&#34; target=&#34;_blank&#34;&gt;El Capitan での日本語入力時に Emacs 内のカーソル色を変更する&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.orgに以下のように書き込む．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;​* inline-patch on macosx
** ミニバッファ入力時に自動的に英語入力モードにする
​   - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
   #+BEGIN_SRC lisp
     (when (functionp &#39;mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
       (mac-auto-ascii-mode 1))
   #+END_SRC
** 日本語か英語かで，カーソルの色を変える．
​   - 参考１：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
​   - 参考２：http://suzuki.tdiary.net/20160103.html
   #+BEGIN_SRC lisp
     (when (fboundp &#39;mac-input-source)
       (defun my-mac-selected-keyboard-input-source-chage-function ()
         (let ((mac-input-source (mac-input-source)))
           (set-cursor-color
                                             ; (if (string-match &amp;quot;com.apple.inputmethod.Kotoeri.Roman&amp;quot; mac-input-source)
            (if (string-match &amp;quot;com.google.inputmethod.Japanese.Roman&amp;quot; mac-input-source)
                &amp;quot;#91C3FF&amp;quot; &amp;quot;#FF9300&amp;quot;))))
       (add-hook &#39;mac-selected-keyboard-input-source-change-hook
                 &#39;my-mac-selected-keyboard-input-source-chage-function))
   #+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これがEmacsの起動時に，org-babel-load-fileによって，下記のようにcodeだけ抜き出されて，init.elに書き込まれる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(when (functionp &#39;mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
  (mac-auto-ascii-mode 1))

(when (fboundp &#39;mac-input-source)
  (defun my-mac-selected-keyboard-input-source-chage-function ()
    (let ((mac-input-source (mac-input-source)))
      (set-cursor-color
                                        ; (if (string-match &amp;quot;com.apple.inputmethod.Kotoeri.Roman&amp;quot; mac-input-source)
       (if (string-match &amp;quot;com.google.inputmethod.Japanese.Roman&amp;quot; mac-input-source)
           &amp;quot;#91C3FF&amp;quot; &amp;quot;#FF9300&amp;quot;))))
  (add-hook &#39;mac-selected-keyboard-input-source-change-hook
            &#39;my-mac-selected-keyboard-input-source-chage-function))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで日本語入力中であっても，M-xなどでミニバッファ入力時に自動的に英語入力モードになってくれる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ついでに行った日本語か英語かでカーソルの色が変わる設定はわりに有用だが，ときに色が変わらないことがあるが，気にしないことにしている．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する</title>
      <link>/post/init_org/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/init_org/</guid>
      <description>

&lt;p&gt;自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．&lt;/p&gt;

&lt;h2 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.lambda-consulting.jp/2015/11/20/article/&#34; target=&#34;_blank&#34;&gt;俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://futurismo.biz/archives/6057/&#34; target=&#34;_blank&#34;&gt;babel-loader:org-mode で init.el を管理する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uwabami.junkhub.org/log/?date=20111213&#34; target=&#34;_blank&#34;&gt;平衡点(2011-12-13)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ameblo.jp/concello/entry-10786074455.html&#34; target=&#34;_blank&#34;&gt;ORG-Babel + init.el = ?? | くらいまーず　はい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://funwithemacs.wordpress.com/2013/04/21/prelude-init-el-org-babel/&#34; target=&#34;_blank&#34;&gt;Prelude init.el &amp;amp; org-babel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preludeを使いながら-init-dot-orgから個人用のinit-dot-elを自動作成させてemacsを設定する方法&#34;&gt;Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法&lt;/h2&gt;

&lt;h3 id=&#34;基本方針&#34;&gt;基本方針&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む．&lt;/li&gt;
&lt;li&gt;起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む．&lt;/li&gt;
&lt;li&gt;具体的には，init.elで，(require &amp;lsquo;org)した後にorg-babel-load-fileでinit.orgを読み込む．&lt;/li&gt;
&lt;li&gt;しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;preludeの導入&#34;&gt;Preludeの導入&lt;/h3&gt;

&lt;p&gt;前回のポスト（&lt;a href=&#34;../prelude_install&#34;&gt;Emacsの設定（その1）Preludeの導入&lt;/a&gt;）を参考　&lt;/p&gt;

&lt;h3 id=&#34;emac-init-dot-elの作成&#34;&gt;emac-init.elの作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;org)
(defvar my-config-dir (concat user-emacs-directory &amp;quot;personal/&amp;quot;))
(org-babel-load-file
(expand-file-name &amp;quot;init.org&amp;quot; my-config-dir))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;工夫と言っても， &lt;strong&gt;init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう&lt;/strong&gt;  ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;init-dot-orgの作成&#34;&gt;init.orgの作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;これでいよいよ肝心のinit.orgの作成を行う&lt;/li&gt;
&lt;li&gt;org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている．&lt;/li&gt;
&lt;li&gt;具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;code-blockの挿入&#34;&gt;Code blockの挿入&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.lambda-consulting.jp/2015/11/20/article/&#34; target=&#34;_blank&#34;&gt;俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）&lt;/a&gt;で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;org-modeで以下のようにする．（後述する設定が必要）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&amp;lt;l （ここで&amp;lt;TAB&amp;gt;すると．．．）
以下のように展開される
#+begin_src emacs-lisp

#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2019年1月14日追加&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上記の「TABで展開」に関して，Disqusで，mickaushyさんから「&amp;lt;lではなくて&amp;lt;sではないのか」とのご指摘をいただいた．全くそのとおりで，（後述する設定が必要）と自分で書いておきながら，その設定を書き忘れていた．mickaushyさんが指摘されている通りの設定をしている．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考：&lt;a href=&#34;http://pages.sachachua.com/.emacs.d/Sacha.html#org74bcbb3&#34; target=&#34;_blank&#34;&gt;http://pages.sachachua.com/.emacs.d/Sacha.html#org74bcbb3&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+begin_src emacs-lisp
(setq org-structure-template-alist
  &#39;((&amp;quot;s&amp;quot; &amp;quot;#+begin_src ?\n\n#+end_src&amp;quot; &amp;quot;&amp;lt;src lang=\&amp;quot;?\&amp;quot;&amp;gt;\n\n&amp;lt;/src&amp;gt;&amp;quot;)
    (&amp;quot;e&amp;quot; &amp;quot;#+begin_example\n?\n#+end_example&amp;quot; &amp;quot;&amp;lt;example&amp;gt;\n?\n&amp;lt;/example&amp;gt;&amp;quot;)
    (&amp;quot;q&amp;quot; &amp;quot;#+begin_quote\n?\n#+end_quote&amp;quot; &amp;quot;&amp;lt;quote&amp;gt;\n?\n&amp;lt;/quote&amp;gt;&amp;quot;)
    (&amp;quot;v&amp;quot; &amp;quot;#+BEGIN_VERSE\n?\n#+END_VERSE&amp;quot; &amp;quot;&amp;lt;verse&amp;gt;\n?\n&amp;lt;/verse&amp;gt;&amp;quot;)
    (&amp;quot;c&amp;quot; &amp;quot;#+BEGIN_COMMENT\n?\n#+END_COMMENT&amp;quot;)
    (&amp;quot;p&amp;quot; &amp;quot;#+BEGIN_PRACTICE\n?\n#+END_PRACTICE&amp;quot;)
    (&amp;quot;l&amp;quot; &amp;quot;#+begin_src emacs-lisp\n?\n#+end_src&amp;quot; &amp;quot;&amp;lt;src lang=\&amp;quot;emacs-lisp\&amp;quot;&amp;gt;\n?\n&amp;lt;/src&amp;gt;&amp;quot;)
    ;; (&amp;quot;l&amp;quot; &amp;quot;#+begin_src lisp\n?\n#+end_src&amp;quot; &amp;quot;&amp;lt;src lang=\&amp;quot;lisp\&amp;quot;&amp;gt;\n?\n&amp;lt;/src&amp;gt;&amp;quot;)
    (&amp;quot;L&amp;quot; &amp;quot;#+latex: &amp;quot; &amp;quot;&amp;lt;literal style=\&amp;quot;latex\&amp;quot;&amp;gt;?&amp;lt;/literal&amp;gt;&amp;quot;)
    (&amp;quot;h&amp;quot; &amp;quot;#+begin_html\n?\n#+end_html&amp;quot; &amp;quot;&amp;lt;literal style=\&amp;quot;html\&amp;quot;&amp;gt;\n?\n&amp;lt;/literal&amp;gt;&amp;quot;)
    (&amp;quot;H&amp;quot; &amp;quot;#+html: &amp;quot; &amp;quot;&amp;lt;literal style=\&amp;quot;html\&amp;quot;&amp;gt;?&amp;lt;/literal&amp;gt;&amp;quot;)
    (&amp;quot;a&amp;quot; &amp;quot;#+begin_ascii\n?\n#+end_ascii&amp;quot;)
    (&amp;quot;A&amp;quot; &amp;quot;#+ascii: &amp;quot;)
    (&amp;quot;i&amp;quot; &amp;quot;#+index: ?&amp;quot; &amp;quot;#+index: ?&amp;quot;)
    (&amp;quot;I&amp;quot; &amp;quot;#+include %file ?&amp;quot; &amp;quot;&amp;lt;include file=%file markup=\&amp;quot;?\&amp;quot;&amp;gt;&amp;quot;)))
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この設定を，init.orgに書き込んでおいて，「&amp;lt;lのあとにTAB」とすれば，上述のように展開される．この次の記事でまとめて書こうと考えていたが，すっかり失念していた．ここに書いておいたほうが確かにわかりやすい．mickaushyさん，ご指摘ありがとうございました．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;codeの記述&#34;&gt;Codeの記述&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;上記の#+begin_src emacs-lispと#+end_srcの間にemacs-lispで設定内容を書く．ここからが便利にできているところ．&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code-blockの中にいるときに&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C-c &amp;lsquo;とする&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当該のcode blockだけのバッファが表示される（下図の下のバッファ）&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/CodeBlock_small.jpg&#34; &gt;

&lt;img src=&#34;/img/CodeBlock_small.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この中はemacs-lisp modeでsyntaxも普通に効くので，普通にコードを書く．もちろん，括弧の対応もハイライトで表示される．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C-c nとする&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;すると，インデントも綺麗に整えてくれる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;満足したら，C-c &amp;lsquo;で元のバッファに戻る．整形は綺麗なまま反映される．素晴らしい！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;具体的なinit.orgの内容は次回のポスト以降に記述予定&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）</title>
      <link>/post/prelude_install/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/prelude_install/</guid>
      <description>

&lt;p&gt;昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．&lt;/p&gt;

&lt;h2 id=&#34;preludeとは&#34;&gt;Preludeとは&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/prelude&#34; target=&#34;_blank&#34;&gt;Prelude&lt;/a&gt; Githubはこちら&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preludeのインストール&#34;&gt;Preludeのインストール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになってはいるが心配性なもんで）．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -L https://git.io/epre | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．&lt;del&gt;auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！&lt;/del&gt; &lt;strong&gt;（2018年10月9日修正）&lt;/strong&gt; デフォルトのままではこうならない．下記のように設定する必要あり．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;prelude-helm) ;; Interface for narrowing and search
(require &#39;prelude-helm-everywhere) ;; Enable Helm everywhere
..................
(require &#39;prelude-latex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;helmにすっかり慣らされてしまったのでこのあたりは外している．prelude-latexのコメントアウトを外すことにより，次回にEmacsを立ち上げるときに &lt;strong&gt;auctex&lt;/strong&gt; がインストールされる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;super-save&lt;/strong&gt; について（ &lt;strong&gt;2019年6月1日追記&lt;/strong&gt; ）：この記事を書いてからすぐに気がついたのだが，現在のpreludeはsuper-saveがdefaultで設定されるので，こちらもoffにしないと自動保存が行われてしまう．これは好みの問題だとは思うが，私は嫌いなのでoffにしている．遅まきながら追記しておく．設定の変更は上述のとおりで，M-x customize からsuper-saveを検索し，offにする．下図を参考にしていただきたい．&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/Super-save.jpg&#34; &gt;

&lt;img src=&#34;/img/Super-save.jpg&#34; width=&#34;100%&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのインストール</title>
      <link>/post/emacs_install/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0900</pubDate>
      <guid>/post/emacs_install/</guid>
      <description>&lt;p&gt;なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここでは&lt;a href=&#34;https://brew.sh/index%5Fja&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt;を使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．&lt;/p&gt;

&lt;p&gt;Emacsで日本語を書いてると，M-xしたときに面倒なことになるので，&lt;a href=&#34;https://ja.wikipedia.org/wiki/インプット%5Fメソッド%5Fエディタ&#34; target=&#34;_blank&#34;&gt;Imput Method Editor (IME)&lt;/a&gt;用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（&lt;a href=&#34;https://github.com/railwaycat/homebrew-emacsmacport&#34; target=&#34;_blank&#34;&gt;Emacs Mac Port&lt;/a&gt;）．ありがたい．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew tap railwaycat/emacsmacport
$ brew install emacs-mac --with-modern-icon --with-imagemagick
$ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ndash;with-modern-iconを指定すると、新しいアイコンになる。&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;なお，他のoptionは以下のように打てば分かる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew tap railwaycat/emacsmacport
$ brew info emacs-mac
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
