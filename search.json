[{"authors":null,"categories":null,"content":" org-modeで文書を書いていてhtmlにexportする際は，C-e h oとするわけだが，段々とこれが面倒になってくることがある．そこで，ネットを探ってみると，やはり，なんでも載ってるredditにhtml exportを自動化する関数の記事があった．\n Table of Contents  toggle-org-html-export-on-save directoryの内容が変更されると，自動でhtmlを再読込する． 使用方法   \ntoggle-org-html-export-on-save  情報元：How to auto export html when saving in org-mode?  例によって，下記のようにinit.orgに書き込めばよい．\n#+begin_src emacs-lisp (defun toggle-org-html-export-on-save () (interactive) (if (memq 'org-html-export-to-html after-save-hook) (progn (remove-hook 'after-save-hook 'org-html-export-to-html t) (message \u0026quot;Disabled org html export on save for current buffer...\u0026quot;)) (add-hook 'after-save-hook 'org-html-export-to-html nil t) (message \u0026quot;Enabled org html export on save for current buffer...\u0026quot;))) #+end_src  これで，toggle-org-html-export-on-saveで，htmlを自動で出力するかどうかを切り替え可能となる．しかし，これだけでは，org文書を保存するたびにブラウザーを手動でreloadしないといけなくなり，面倒である．自動でreloadしてくれるコマンドがあれば便利である．探してみると，これもネットに転がっていた．\ndirectoryの内容が変更されると，自動でhtmlを再読込する．  情報元：Watch for file changes and refresh your browser automatically 上記サイトに有るrubyのスクリプトが使えそうなので，頂いた． rubyのインストールについては，以下のようなサイトを参考  MacにHomeBrew,rbenv,bundlerをインストールする Ruby入門 01.導入（Macに最新版のRubyを入れる） Ruby初学者のRuby On Rails 環境構築【Mac】  しかし，上記サイトのスクリプトをそのまま使用するとと，reloadの際にページの先頭まで戻ってしまい不便！ 結局，上記サイトのFirefox用のスクリプトを参考に少し書き換えた下記のSafari用のスクリプトを使用すると，reloadの際に先頭まで戻らないので，こちらを使用することとした．  #!/usr/bin/env ruby # watch.rb by Brett Terpstra, 2011 \u0026lt;http://brettterpstra.com\u0026gt; # with credit to Carlo Zottmann \u0026lt;https://github.com/carlo/haml-sass-file-watcher\u0026gt; trap(\u0026quot;SIGINT\u0026quot;) { exit } if ARGV.length \u0026lt; 2 puts \u0026quot;Usage: #{$0} watch_folder keyword\u0026quot; puts \u0026quot;Example: #{$0} . mywebproject\u0026quot; exit end dev_extension = 'dev' filetypes = ['css','html','htm','php','rb','erb','less','js'] watch_folder = ARGV[0] keyword = ARGV[1] puts \u0026quot;Watching #{watch_folder} and subfolders for changes in project files...\u0026quot; while true do files = [] filetypes.each {|type| files += Dir.glob( File.join( watch_folder, \u0026quot;**\u0026quot;, \u0026quot;*.#{type}\u0026quot; ) ) } new_hash = files.collect {|f| [ f, File.stat(f).mtime.to_i ] } hash ||= new_hash diff_hash = new_hash - hash unless diff_hash.empty? hash = new_hash diff_hash.each do |df| puts \u0026quot;Detected change in #{df[0]}, refreshing\u0026quot; %x{osascript\u0026lt;\u0026lt;ENDGAME tell app \u0026quot;Safari\u0026quot; to activate tell app \u0026quot;System Events\u0026quot; keystroke \u0026quot;r\u0026quot; using command down end tell ENDGAME } end end sleep 1 end   このスクリプトにwatch_safari.rbという名前をつけてパスが通っている/usr/local/binに保存し，chomod a+x watch_safari.rbとして実行権限を付けた． Usage: /usr/local/bin/watch_safari.rb watch_folder keyword パスを通しておけば，watch_safari.rb watch_folder keyword で大丈夫  使用方法  /Data/Hoge/Fuga/hogefuga.orgを書いているとすると以下のようにそのディレクトリをみはらせておく．  $ cd /Data/Hoge $ watch_safari.rb Hoge hogefuga.html   org-modeでhogefuga.orgを書きはじめるときに，M-x toggle-org-html-export-on-save として保存するたびに自動的に新たなhtmlがexportされるようにする． 最初だけは，C-e h oでhtmlをexportして，safariでhogefuga.htmlを開いておく． 以降は，hogefuga.org文書を保存するたびに，現在見ている場所に戻った状態で最新のhtmlに更新されるようになる．便利である．  以上はOSX上のSafariを使用している場合であるが，他のブラウザーでも少し変更するだけで同じことができるはずである．\n","date":1546700400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546757635,"objectID":"b0a4c48aeb88da7d1aff5e18bb49cb57","permalink":"https://taipapamotohus.com/post/auto_html_export/","publishdate":"2019-01-06T00:00:00+09:00","relpermalink":"/post/auto_html_export/","section":"post","summary":"org-modeで文書を書いていてhtmlにexportする際は，C-e h oとするわけだが，段々とこれが面倒になってくることがある","tags":["emacs","org-mode","autoexport","html","autorefresh","browser"],"title":"Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする","type":"post"},{"authors":null,"categories":null,"content":" Emacsでpdf文書を読もうとするとdefaultではDocViewで読むことになるが，解像度がイマイチで動きもややモッサリとしていて使い勝手が悪かったため，サクッと止めて，skimを使っている．ただ，pdf-toolsというのがあって，こちらは割とスグレモノらしいとの噂は聞いていた．そこで，今回はこれを試してみることにした．\n Table of Contents  PDF Tools  インストールと設定 使用法  org-pdfview  インストールと設定  PDF Toolsと他のアプリ（skim, Previewなど）との比較   \nPDF Tools  参考１：pdf-tools　ご本家 参考２：emacsをPDF Viewerにしよう 参考３：emacs内でTeX文書の作成からpdf閲覧まで行う 参考４：pdf-tools on macos 参考５：VIEW AND ANNOTATE PDFS IN EMACS WITH PDF-TOOLS 参考６：MORE PDF-TOOLS TWEAKS 参考７：EVEN MORE PDF-TOOLS TWEAKS 参考８：pdf-tools pretty much unusable with linum-mode enabled 参考９：Using Emacs 44 - An Org mode and PDF-tools workflow  ご本家のイントロに書いてあるが，DocViewのようにghostscriptで予めrenderしておくのではなく，on demandでページを作成し，メモリーに貯めておく仕組みになっている．このrenderingは，popplerという名前の特別なライブラリーによって行われるが，これはepdfinfoと呼ばれるserver programの中で走っている．こいつの仕事はEmacsからの要求を連続して読んで適切な結果，すなわち，PDFのページのPNG imageを作成することである．\n　「実際のところ，PDFファイルを表示するのはPDF toolsの仕事の一部に過ぎない．popplerは文書に関する全ての情報を提供でき，かつ，それを修飾もできるので，遥かにたくさんのことができる」とイントロの最後で大見得を切って，何ができるかを示す動画を紹介している．\nインストールと設定 OSXは公式にはサポートされていないが，コンパイルできたと報告されている，と書いてあり，実際，以下のように出来た．まず，homebrewでpopplerをインストールする．もし，まだ，automakeを入れていなければそれもhomebrewでインストールする．\n$ brew install poppler automake  ついで，pkg-configをexportでいじるようなことが書いてあるが，特にそれはせずともよかった．ただし，pdf-toolsのインストールの際にコンパイルエラーが出た．どういうわけか， pdf-tools 20180428.1527 ではだめだったが，幸い， pdf-tools 20181221.1913 が出たので，参考4：pdf-tools on macosを頼りに，これにアップデートしたところ，あとは問題なくインストールできた．例によって，use-packagを用いて以下のように，init.orgに書けばよい．\n#+begin_src emacs-lisp (use-package pdf-tools :ensure t :config ;; initialise (pdf-tools-install) ;; PDF Tools does not work well together with linum-mode (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1))) ;; open pdfs scaled to fit page ;; (setq-default pdf-view-display-size 'fit-page) ;; automatically annotate highlights (setq pdf-annot-activate-created-annotations t) ;; use normal isearch (define-key pdf-view-mode-map (kbd \u0026quot;C-s\u0026quot;) 'isearch-forward) ;; more fine-grained zooming (setq pdf-view-resize-factor 1.1) ) #+end_src  以下に内容を説明する．\n pdf-tools-installにより最初のときにepdfinfoがコンパイルされる． 行番号を表示するとうまく動かない．私はnlinum-modeを使っているのでpdf-view-modeの際には止めておく． ハイライトした部分には自動的に注釈を加える． swiperはうまく動かないので，C-sを普通のisearchに戻す ＋とーで拡大，縮小だが，これを10%ずつにする．  使用法 上記のインストールと設定を行えば，C-x C-fでも，drag \u0026amp; dropでも，Emacsのpdf toolsのpdf-view-modeでpdfが開くようになる．ここまでくれば，あとは色々なことができる．\nhighlight マウスで文章をなぞって選択（下の画像の白黒反転した部分）したあとに，C-c C-a h もしくは，画像で示したように，PDF Tools \u0026rarr; Add markup annotation \u0026rarr; highlightを選択すれば，\n  選択した部分がハイライトされ，下に新たなバッファが開いてそこに注釈が書けるようになる（下の画像参照）．書き終わったら，C-c C-cで注釈バッファが閉じる．なお，上に元からある黄色にハイライトされた部分は以前に選択してハイライトした部分である．\n  Display Annotations 複数箇所をハイライトして注釈をつけたあとに，全ての注釈を一度にリストにしてみることができる．C-c C-a l もしくは，PDF Tools \u0026rarr; Display Annotationsを選択すれば，下の画像のように，下に２つの新たなバッファが開く．真ん中のバッファに注釈のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動してブルーの枠で囲んで表示され，下のバッファに注釈の内容が表示される．qを押せば，2つのバッファは閉じる．\n  Isearch document (C-s) pdf-toolsはswiperとはconflictするために，C-sは本来のisearch-forwardに戻して設定しておく必要がある（前述の設定の通り）．これで，C-sとやると，minibufferに打ち込んだ語が反転して表示され，C-sとやるごとに先へ移動していく．下の画像では，\u0026rdquo;MK2\u0026rdquo;という単語を打った時の状態を示している．\n  Occur document PDF Tools \u0026rarr; Occur documentを選択すれば，minibufferに List lines matching PCRE: と表示される．そこに例えばMK2と打てば，下の画像のように，下に新たなバッファが開き，MK2のあるページとそこにある文章のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動する．qを押せば，下のバッファは閉じる．\n  org-pdfview org-modeからpdf文書へのリンクを開くのをサポートするパッケージ．\n 参考１：org-pdfview 参考２：How to use pdf-tools (pdf-view-mode) in emacs? 参考３：Configure org-pdfview and pdf-tools to open at page  インストールと設定 例によって，use-packagを用いて以下のように，init.orgに書くだけ．\n#+begin_src emacs-lisp (use-package org-pdfview :ensure t) #+end_src  例えば，Emacsのpdf-toolsを用いて，hogehoge.pdfを開いて読んでいるとする．そこで，C-c lとすると， Stored: /Data/Hoge/Fuga/hogefuga.pdf と今読んでいるpdfへのリンクが保存される．そして，それを保存しておきたいorg文書の適当な場所で，C-c C-lとすれば，そのリンクが貼り付けられる．以前の記事（Org-modeでhtml exportの際のthemeについて）で書いたような文献のまとめを作成しているときに，元文献とリンクさせておく際などに便利である．貼り付けたリンクをクリックすれば，元文献がEmacsのpdf-toolsによって開かれるようになる（画面が分割され，下に新たなバッファが開いてそこにpdfが表示される）．割と便利である．\nPDF Toolsと他のアプリ（skim, Previewなど）との比較  注釈の一覧表示，C−s， occurなどの機能は便利である． skim, Previewなどでは，長方形ツールによりお好みの領域を選択してコピーすることができるし，このコピーした領域のみをpdfとして保存できるが，pdf-toolsではできない． skim, Preview, Adobe Acrobat Readerのように，全画面でプレゼンテーションするモードはない． Adobe Acrobat Readerのように，動画を動かすことは出来ない． 上記２つの理由から，auctexを使用する際のpdf viewerとしてEmacsを使用していない． 最近のpdfは，本文中に示された文献もしくはその番号をクリックすると，最後の文献リストの中の該当の論文のところに飛ぶようになっているものも多くなっているが，pdf-toolsはそれには対応していないようである．より正確にはリンク先が分からないようである．これは自力では解決できない．．． Outline構造にも対応しており，検出するのだが，リンク先が分からないようである．これも自力では解決できない．．．  以上のことより，学会発表用のスライドなどを作成している際は，skimなどの方がpdf viewerとして便利であるが，文献のまとめなどpdfを読み込む際には，pdf-toolsの方が向いているのではないかと考えている．\n","date":1546268400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546604844,"objectID":"5dd68405d9ddf11cd1f85505a91037a6","permalink":"https://taipapamotohus.com/post/pdf-tools/","publishdate":"2019-01-01T00:00:00+09:00","relpermalink":"/post/pdf-tools/","section":"post","summary":"Emacsでpdf文書を読もうとするとdefaultではDocViewで読むことになるが，解像度がイマイチで動きもややモッサリと","tags":["emacs","pdf","pdf-tools","org-mode"],"title":"Emacsでpdfを読む (pdf-tools)","type":"post"},{"authors":null,"categories":null,"content":" org-modeで文章を書いているときに，他のsubtreeが邪魔で消したくなることがある．そして必要になれば，また，もとに戻すことができれば便利である．これを実現してくれるパッケージがrecursive-narrowである．\nインストールと設定 インストールは例によって，init.orgに以下のように書き込むだけである．\n#+begin_src emacs-lisp (use-package recursive-narrow :ensure t) #+end_src  これでインストールと設定は終了である．\n使用法 使い方も実に簡単であり，\u0026rdquo;C-x n n\u0026rdquo;で現在カーソルがあるsubtree以下のみが表示されるようになり，\u0026rdquo;C-x n w\u0026rdquo;で元の表示に戻る．これではよくわからないので，実際の画像を示す．まず，最初の画像では全体の画面が表示されており，1951行目の「Org-modeで再帰的に」の行にカーソルがある．\n  ここで，\u0026rdquo;C-x n n\u0026rdquo;とやると，次の画面のようになる．つまり，1951行目以降のsubtreeのみが表示される．\n  次にカーソルを1962行目の「インストールと設定」に移動する（画像ではすでに移動済み）．そして，再度\u0026rdquo;C-x n n\u0026rdquo;とやると，以下の画像のようになる．\n  つまり，「インストールと設定」のsubtreeのみの表示となるわけである．集中したい領域だけが表示されて，効率よく入力できる．\n広い領域の表示が必要となれば，\u0026rdquo;C-x n w\u0026rdquo;とやると，1つ前の画像の状態に戻る．そして，もう一度\u0026rdquo;C-x n w\u0026rdquo;とやると，最初の状態に戻る．なんということはないのであるが，便利である．\n","date":1545577200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545655133,"objectID":"a1d9c32a1103d9c3cd80ed575f837592","permalink":"https://taipapamotohus.com/post/org-mode_recursive-narrow/","publishdate":"2018-12-24T00:00:00+09:00","relpermalink":"/post/org-mode_recursive-narrow/","section":"post","summary":"org-modeで文章を書いているときに，他のsubtreeが邪魔で消したくなることがある．そして必要になれば，また，もとに戻すこ","tags":["orgmode","emacs","recursive","narrow"],"title":"Org-modeで再帰的にsubtreeを絞ったり広げたりする（recursive-narrow）","type":"post"},{"authors":null,"categories":null,"content":" org-modeで文書を書いてhtmlにexportすると，素のままでは，なんの愛想もない．特にいくつかの項目をまとめた要約などを並べていくときは，side columnなどがあって，すぐに行きたいところに飛べるようになっていると嬉しい．ということで，今回はorg-modeをhtmlにexportするときのthemeがテーマである．．．．．\nとにかく，たくさんのthemesが存在する．まずは以下のサイトをチェック，というか以下を読めばこのブログは読まなくても良いような．．．(^^;;;\n org-modeのHTMLテーマ org-modeのHTMLテーマ第2弾 How to export Org mode files into awesome HTML in 2 minutes org-spec  私のお気に入りは，ReadTheOrg（上記の1, 3にある）とorg-spec（上記の4）である．\nTable of Contents    ReadTheOrg org-spec    ReadTheOrg これはRead the Docsで使われているthemeのcloneである．一番簡単な使い方は，3にあるようにsetup fileをorg fileのpreambleに書いておくことである．\n#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup  あるいは，3からOrg-HTML themes projectをダウンロードしてきて解凍しローカルの\u0026rdquo;setup file\u0026rdquo;へのパスを書き込めば，ネットの接続に依存せずにexportできるようになる．たとえば，/Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setupに設定ファイルがあるとすると以下のようにすれば良い．\n#+SETUPFILE: /Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setup  以下に研究会で発表するスライド原稿を作る下準備として，実際に10個の論文をまとめたorg fileの一部を掲示しておく．左に論文のタイトルが並び，見ている論文の小見出しが自動的に展開される．subheadの色も設定されており，読みやすい．デザインもプロっぽい印象である．書いた内容にかかわらず，なんとなく賢くなったような気分になれる（笑）．\n  org-spec An Org-mode template for technical specification documents and HTML publishing. とのことで，技術よりのthemeである．特徴としては，Ditaa, Graphviz \u0026amp; PlantUMLなどによりテキストベースで図が書ける．表に対応，自動的にアップデートするフィールド，PDF生成にも対応，コードブロックの基本的なsyntax highlightingなどがある．実際の例としてhttps://demo.thi.ng/org-spec/がある．\nこちらの使い方は少しだけ面倒である．リンク先からorg-specをダウンロードして解凍する．ここで，style.cssが/Hoge/Fuga/org-spec-master/css/style.cssに保存されたとする．ダウンロードして来たファイルに含まれているindex.orgに全て書いてあるので，それを真似てorg fileのpreambleに次のように書いておく．\n#+HTML_HEAD: \u0026lt;link href=\u0026quot;http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700\u0026quot; rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; /\u0026gt; #+HTML_HEAD: \u0026lt;link href=\u0026quot;/Hoge/Fuga/org-spec-master/css/style.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; /\u0026gt; #+AUTHOR: taipapa #+EMAIL: your@mail.address #+HTML: \u0026lt;div class=\u0026quot;outline-2\u0026quot; id=\u0026quot;meta\u0026quot;\u0026gt; | *Author* | {{{author}}} ({{{email}}}) | | *Date* | {{{time(%Y-%m-%d %H:%M:%S)}}} | #+HTML: \u0026lt;/div\u0026gt; #+TOC: headlines 2  以下に前述の論文のまとめをこのcssでexportしたものを掲示しておく．印象がかなり変わると思う．subheadなどは最初から展開されている．ReadTheOrgよりもビジネスライクな感じであるが，よりスマートな気もする．その日の気分によって，この2つを使い分けている．\n  以上あげた2つ以外にも無数のthemeが存在する．また，自分でthemeを作ってしまう剛の者もいらっしゃるので，あちこちを探してみるのも一興．．．(^o^)\n","date":1544886000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545448399,"objectID":"36aad1a19aa24068ff7198e275ef6262","permalink":"https://taipapamotohus.com/post/org-html-export-theme/","publishdate":"2018-12-16T00:00:00+09:00","relpermalink":"/post/org-html-export-theme/","section":"post","summary":"org-modeで文書を書いてhtmlにexportすると，素のままでは，なんの愛想もない．特にいくつかの項目をまとめた要約などを並へ","tags":["emacs","orgmode","html","export","css","theme"],"title":"Org-modeでhtml exportの際のthemeについて","type":"post"},{"authors":null,"categories":null,"content":" 学会発表や論文作成にあたっては，当然のことながら，その分野の他の研究者の論文を読んでまとめるなどの作業を行う．そこで，論文の要旨などをorg-modeにざっとまとめておくと，pdfにもhtmlにもtextにもexport出来て便利である．pdfは印刷に向いているが，htmlは多くの論文をいっぺんに見るのに向いており，また，compileの時間もpdfより圧倒的に速い．また，色を変えたり，ハイライトしたりするのもhtmlなら容易である．そこで，今回は，org-modeからhtmlへexportする際の有用な小技について書いてみたい．\nTable of Contents    Org Macros  上記に関しては，ox-hugoの作者であるKaushal Modi氏から以下のような指摘を頂いた．（12月19日追記）  Exporting org-mode to HTML: In-place coloring    Org Macros フォントの色を変更する方法はいろいろあるが，ハイライトや背景の色の変更までできるこの Org Macrosが一番便利である．内容は，org-modeの便利なマクロ集である．リンク先からダウンロードして，適当なところに保存し，解凍しておく．ここでは，/Users/taipapa/hoge/fuga/org-macros.setupに置くことにする．使い方は簡単で上記のwebsiteに書いてあるとおり，各org fileの先頭に以下のように記述してorg-macros.setupの場所を教えてやれば良い．\n#+INCLUDE: /Users/taipapa/hoge/fuga/org-macros.setup  これだけである．\n 注意事項としては，このブログはox-hugoで書いているが，ox-hugoの場合は文書の先頭に上記を書いても効かない．各ポストのpropertyのあとに書いておけば効く．各ポストごとに設定するようになっているらしい．．．．．（全国15人？ぐらいの人にしか意味のない注意書きである）  上記に関しては，ox-hugoの作者であるKaushal Modi氏から以下のような指摘を頂いた．（12月19日追記）  Can you try using #+setupfile instead of #+include? As an example, here is my blog Org source that I export using ox-hugo ( https://gitlab.com/kaushalm\u0026hellip; ), and here is the setup file tha t I \u0026ldquo;include\u0026rdquo; using the more appropriate #+setupfile ( https://gitlab.com/kaushalm\u0026hellip; ).\nAs you see, I use a lot of Org macros, and they all work in my \u0026ldquo;one post per subtree\u0026rdquo; flow.\n\nということで，ox-hugoの場合は，以下のように文書の先頭に書いておけば，one-post per subtreeの投稿全てにorg-macroが効くことを確認した．\n#+setupfile: /Users/taipapa/hoge/fuga/org-macros.setup  こんなブログにまで目を通してコメントしてくれるのには驚いた．親切な方である．日本語が読める人なのかとも思ったが，どうやらGoogleの翻訳を利用されているようだ．このページだと，A Perfect Autumn Dayに行くと翻訳版を見ることができる．その翻訳レベルにも今更ながら感心した．．．\n 残念ながら，LaTeXへのexportでは，この方法による色の変更などは（現在のところ）効かない．  いくつか使い方の例をあげておく\n{{{color(blue, 青くなるかな？)}}} *{{{color(blue, ボールドで青くなるかな？)}}}* {{{highlight(yellow, 黄色にハイライトされるかな？)}}} *{{{highlight(yellow, 黄色にハイライトされて文字はボールドになるかな？)}}}* {{{bgcolor(cyan, 背景がシアンになるかな？)}}} *{{{bgcolor(cyan, 背景がシアンになって文字はボールドになるかな？)}}}*  これが以下のように表示される．\n 青くなるかな？ ボールドで青くなるかな？ 黄色にハイライトされるかな？ 黄色にハイライトされて文字はボールドになるかな？ 背景がシアンになるかな？ 背景がシアンになって文字はボールドになるかな？  上記以外にも多くのマクロが含まれており，そちらも人によっては有用かもしれない．少しだけ例をあげておく．以下はパネルの例．\n{{{begin_panel}}} Panel example This is a formatted block of text… {{{end_panel}}}  これが，  Panel example This is a formatted block of text…  となる．マニュアルでは以下の使い方を薦めている．\n#+begin_panel *Panel example* \\\\ This is a formatted block of text... #+end_panel   Panel example This is a formatted block of text\u0026hellip;\n\nなお，org-modeのマクロ自体に関しては，org-modeのマニュアルの 12.5 Macro replacement を参考にしていただきたい．\nExporting org-mode to HTML: In-place coloring フォントの色を変える別の方法である．リンク先にある通り，\nこの文章は， *@@html:\u0026lt;font color = \u0026quot;blue\u0026quot;\u0026gt;@@青のボールド@@html:\u0026lt;/font\u0026gt;@@*になって欲しい！  これが以下のように表示される．\nこの文章は， 青のボールド になって欲しい！\n org-modeのマニュアルの 12.9.5 Quoting HTML tags も参考のこと  こちらは設定を必要としないが，やはり，最初に説明したマクロの方がいろいろ出来て便利である．\n次回は，htmlをexportする際のCSSについてまとめてみたい．\n","date":1544367600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545448399,"objectID":"45f367ab3e89130264bfd04223dd8950","permalink":"https://taipapamotohus.com/post/html_export/","publishdate":"2018-12-10T00:00:00+09:00","relpermalink":"/post/html_export/","section":"post","summary":"学会発表や論文作成にあたっては，当然のことながら，その分野の他の研究者の論文を読んでまとめるなどの作業を行う．そこで，論文の要旨なと","tags":["emacs","orgmode","html","export","css","color"],"title":"Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）","type":"post"},{"authors":null,"categories":null,"content":" 以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））にも書いたが，Tufte−LaTeXなるものを愛用している．今回はこれについてもう少し詳しく書いてみたい．\nTable of Contents    Tufte-LaTeX tufte-org-mode 設定  tufte-org-modeのインストールと設定 org-modeでtufte-latexの設定  tufteの使用の実例    Tufte-LaTeX  Edward R. Tufteによって作られたページレイアウトのためのlatex packageである．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである． さて，このスタイルが何の役に立つかというと，報告書の作成の際に図を入れたりするときに，latexのfloatを使うと案外思うところに挿入されないことがある．このスタイルだと，図は少し小さくなるが，きちんと横に納まってくれるのがよい． Tufte-LaTeXのサイトには，\u0026rdquo;the style of Edward R. Tufte and Richard Feynman\u0026rdquo;と書かれている．ん，と思って調べてみると，やはり，あの物理学者のファインマンのことであった．興味のある方は，The Feynman-Tufte Principleでググってみると面白いかもしれない． 以前の記事（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記））に書いたようにtexliveをインストールしてあれば，tufte-latexは一緒にインストールされているので，新たにインストールする必要はない．  tufte-org-mode  tufte-org-modeは，上述のlatexのtufte classをorg-modeから使えるようにした有り難いパッケージである．このおかげでlatexの記法を意識することなく，org-modeで普通に文章を書いていき，最後に後述する如く，オマジナイを唱えればTufte styleのpdfができあがる．  設定  下記の2つの設定で使えるようになる．init.orgでの設定の順番はどちらが先でも動く．  tufte-org-modeのインストールと設定  以下のようにinit.orgに書き込んで設定する． ox-tufte-latex.elは上記の tufte-org-modeからダウンロードしてローカルに置いてインストールしている．パスは各自の環境に合わせて変更していただきたい．\n#+begin_src emacs-lisp (quelpa '(ox-tufte-latex :fetcher file :path \u0026quot;/path/to/ox-tufte-latex.el\u0026quot;) ) (use-package ox-tufte-latex) #+end_src  quelpaは，use-packageでうまくインストール出来ないときに重宝する．\n quelpaについては以下を参照\n Quelpa quelpa.el : 【本邦初公開】MELPAを改善した新しいパッケージ管理システム CaskからQuelpaに移行する   org-modeでtufte-latexの設定  ox-latexの設定などは以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））に書いたようにinit.orgに記述しておく． 以下のようにinit.orgに書き込んで設定する．これは以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））と重複するが，念のためにここにも書いておく．\n#+begin_src emacs-lisp ;; tufte-handout class for writing classy handouts and papers (add-to-list 'org-latex-classes '(\u0026quot;tufte-handout\u0026quot; \u0026quot;\\\\documentclass[twoside,nobib]{tufte-handout} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026quot; (\u0026quot;\\\\section{%s}\u0026quot; . \u0026quot;\\\\section*{%s}\u0026quot;) (\u0026quot;\\\\subsection{%s}\u0026quot; . \u0026quot;\\\\subsection*{%s}\u0026quot;))) ;; tufte-book class (add-to-list 'org-latex-classes '(\u0026quot;tufte-book\u0026quot; \u0026quot;\\\\documentclass[twoside,nobib]{tufte-book} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026quot; (\u0026quot;\\\\part{%s}\u0026quot; . \u0026quot;\\\\part*{%s}\u0026quot;) (\u0026quot;\\\\chapter{%s}\u0026quot; . \u0026quot;\\\\chapter*{%s}\u0026quot;) (\u0026quot;\\\\section{%s}\u0026quot; . \u0026quot;\\\\section*{%s}\u0026quot;) (\u0026quot;\\\\subsection{%s}\u0026quot; . \u0026quot;\\\\subsection*{%s}\u0026quot;) (\u0026quot;\\\\paragraph{%s}\u0026quot; . \u0026quot;\\\\paragraph*{%s}\u0026quot;))) #+end_src  ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．\n  ここで，l oと打つと普通（Tufte styleではない）のpdfがオープンされてしまう．\n Tufte styleのpdfを得るためには，T pと打って，Export to Tufte LaTeX の中からAs PDF file and openを選択しなければならない．これで，原稿が得られ，skimでオープンされる．\n  tufteの使用の実例  それでは実例を示してみる．以下のような書類を作成し，Tufte_test.orgとして保存する．hoge_fuga.jpgなどの画像は全てTufte_test.orgファイルと同じdirectoryにあるものとする．\n 前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略\u0026hellip;..(^^;;; :offset -8inによって，図の位置を上にずらしてバランスをとるようにしているのにご注意いただきたい．  #+LaTeX_CLASS: tufte-handout #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=0.6in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+LINK_UP: #+LINK_HOME: #+OPTIONS: author:nil date:nil #+begin_fullwidth \\centering #+LATEX: \\huge{\\textbf{hoge/fugaによる相補的な治療における高難度症例の治療と成績}} \\vspace{0.5cm}\\\\ #+LATEX: \\normalsize{taipapa, 織田信長, 豊臣秀吉, 徳川家康}\\\\ \\vspace{0.5cm}\\\\ #+LATEX: \\normalsize{hogefuga大学大学院 hogefuga研究科 hogefuga分野} #+end_fullwidth * *背景と目的* hogeとfugaを比較し，治療成績を比較する． ​* *結果* まず，hogefugaの軽症例の画像を呈示する (*Fig. [[hoge_fuga2]]*)． \\vspace{0.25cm} そのころわたくしは、モリーオ市の博物局に勤めて居りました。 十八等官でしたから役所のなかでも、ずうっと下の方でしたし俸給もほんのわずかでしたが、受持ちが標本の採集や整理で生れ付き好きなことでしたから、わたくしは毎日ずいぶん愉快にはたらきました。殊にそのころ、モリーオ市では競馬場を植物園に拵え直すというので、その景色のいいまわりにアカシヤを植え込んだ広い地面が、切符売場や信号所の建物のついたまま、わたくしどもの役所の方へまわって来たものですから、わたくしはすぐ宿直という名前で月賦で買った小さな蓄音器と二十枚ばかりのレコードをもって、その番小屋にひとり住むことになりました。わたくしはそこの馬を置く場所に板で小さなしきいをつけて一疋の山羊を飼いました。毎朝その乳をしぼってつめたいパンをひたしてたべ、それから黒い革のかばんへすこしの書類や雑誌を入れ、靴もきれいにみがき、並木のポプラの影法師を大股にわたって市の役所へ出て行くのでした。 あのイーハトーヴォのすきとおった風、夏でも底に冷たさをもつ青いそら、うつくしい森で飾られたモリーオ市、郊外のぎらぎらひかる草の波。 またそのなかでいっしょになったたくさんのひとたち、ファゼーロとロザーロ、羊飼のミーロや、顔の赤いこどもたち、地主のテーモ、山猫博士のボーガント・デストゥパーゴなど、いまこの暗い巨きな石の建物のなかで考えていると、みんなむかし風のなつかしい青い幻燈のように思われます。では、わたくしはいつかの小さなみだしをつけながら、しずかにあの年のイーハトーヴォの五月から十月までを書きつけましょう。 \\vspace{0.25cm} ついで，hogefugaの重症例の画像を呈示する (*Fig. [[hoge_fuga]]*)． #+NAME: hoge_fuga2 #+caption: hoge-fuga（軽症例である） #+attr_latex: :float margin :width 2.8in :offset -8in #+attr_latex: :vertical-alignment t [[./hoge_fuga2.jpg]] #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float margin :width 2.8in :offset -2in #+attr_latex: :vertical-alignment t [[./hoge_fuga.jpg]] * *結論* hogefugaによる治療は有効である．   ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e T pと打てば，以下のようなpdfがskimで開かれる．\n  上述のように，:offset の部分で図の位置を調整している．これなしだと，かなり下の方に位置してしまう．\n なかなか良い感じになっている．(^o^)\n 今回は，Tufte styleの紹介であった．実は，このスタイルを手術所見を書くのに使用している．\n   ","date":1542121200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542373995,"objectID":"02ccfec25505fbc60248da168bad0654","permalink":"https://taipapamotohus.com/post/tufte/","publishdate":"2018-11-14T00:00:00+09:00","relpermalink":"/post/tufte/","section":"post","summary":"以前の記事（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））にも書いたが，Tufte−LaTeXなるものを","tags":["tufte","latex","org","mode"],"title":"Tufte-LaTeXとtufte-org-modeについて","type":"post"},{"authors":null,"categories":null,"content":" Rとは，オープンソース・フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である（Wikipediaより）．org-modeと同じくらい必要不可欠なRではあるが，定期的にupdateする必要がある．いや，まぁ，したほうが良い，というか，しないと新しいパッケージが試せなかったりするので，しないではいられない．しかし，updateすると，たいていどこかでハマる．そこで，今回は，ハマったときの対処法を自分のためにまとめておくことにする．ハマるのはbioconductorの方が多いような気がする．ちなみに当方の環境は，MacBook Pro (15-inch, Late 2016) macOS Sierra 10.12.6である．先日もRを3.5.1にupdateしてハマったばかりである\u0026hellip;..(^^;;;\ngccのリンク絡みのトラブル  大体は以下で直ることが多い（r has dependency on gcc@6, but only lists gcc (which has updated to 7) #5587）\n$ brew link --overwrite gcc   XMLが入らない  XMLを入れるのが目的ではなく，なにか別のパッケージをインストールしようとして，それがXMLに依存しており，XMLを入れようとしてハマることが多いと思う．エラーメッセージは，configure: error: “libxml not found”である．しかし，homebrewで，brew listしてみると，libxml2はインストールされている．このあたりは，Installing R package XML on MacOS 10.13.6と同じである．対処法は，同サイトや引用元のCannot install XML package in rにある通り，以下のようにコンパイラーに正しいxml2-configの場所を教えてやれば良い．\nSys.setenv(XML_CONFIG = \u0026quot;/usr/local/Cellar/libxml2/2.9.7/bin/xml2-config\u0026quot;)  なお，上記を入力するのはRのコンソールである．通常のterminalにexportで入力しても効かないので注意すること！（これでどれだけ時間を無駄にしたことか．．．(ToT)）\n  Cairoなどのインストール時に，#include \u0026lt;X11/Xlib.h\u0026gt; でハマる．  \u0026lsquo;X11/Xlib.h\u0026rsquo; file not found, #include \u0026lt;X11/Xlib.h\u0026gt; のようなエラーが出てコンパイルできないことがある（例えば，\u0026rdquo;Cairo\u0026rdquo; packageなど）．要するにXlib.hの在り処が分からんということである．mdfind（Mac版のlocate）で探してみると，以下のような結果が得られる．\n$ mdfind -name Xlib.h | grep X11 /opt/X11/include/cairo/cairo-xlib.h /opt/X11/include/X11/Xlib.h /System/Library/Frameworks/Tk.framework/Versions/8.4/Headers/X11/Xlib.h /System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h  そこで，目的のXlib.hは，/opt/X11/include/X11/Xlib.hと分かるので，include directoryにこれを含めるように指示すれば良い．これも，前項と同じく，Rのコンソールに入力すること！（これでどれだけ．．．以下同文）\nSys.setenv(C_INCLUDE_PATH = \u0026quot;/opt/X11/include\u0026quot;)  これで，コンパイルできるようになるはずである．\n どこにX11/Xlib.hが入っているかは，インストールの仕方により色々であろうから，場所を確認してから上記の操作を行うようにする．\n なお，ネットのあちこちに，Xquartzをdowngradeすればコンパイルできる，みたいなことが書いてあったが，あれはなんなのだろうか．．．？\n  rsvgのインストール時に，xcb-shm.pcがないと怒られる．  こんな感じである．\n\u0026gt; biocLite(\u0026quot;rsvg\u0026quot;) ................................... Package xcb-shm was not found in the pkg-config search path. Perhaps you should add the directory containing `xcb-shm.pc' to the PKG_CONFIG_PATH environment variable Package 'xcb-shm', required by 'cairo', not found Found INCLUDE_DIR and/or LIB_DIR! Using PKG_CFLAGS=-I/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig/librsvg-2.0.pc Using PKG_LIBS=-L/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig -lrsvg ------------------------- ANTICONF ERROR --------------------------- Configuration failed because librsvg-2.0 was not found. Try installing: ​* deb: librsvg2-dev (Debian, Ubuntu, etc) ​* rpm: librsvg2-devel (Fedora, EPEL) ​* csw: librsvg_dev, sunx11_devel (Solaris) ​* brew: librsvg (OSX) If librsvg-2.0 is already installed, check that 'pkg-config' is in your PATH and PKG_CONFIG_PATH contains a librsvg-2.0.pc file. If pkg-config is unavailable you can set INCLUDE_DIR and LIB_DIR manually via: R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...' -------------------------------------------------------------------- ERROR: configuration failed for package ‘rsvg’ ​* removing ‘/usr/local/Cellar/r/3.5.1/lib/R/library/rsvg’ The downloaded source packages are in ‘/private/var/folders/rq/hj_634613dbfzs41djqt52y80000gn/T/RtmpzsGqp0/downloaded_packages’ Updating HTML index of packages in '.Library' Making 'packages.html' ... done 警告メッセージ: install.packages(pkgs = doing, lib = lib, ...) で: installation of package ‘rsvg’ had non-zero exit status  要するに，xcb-shm.pcのあるディレクトリをPKG＿CONFIG＿DIRに追加しろと言ってるので，xcb-shm.pcがどこにあるかをmdfindで探してから，言われるとおり追加する．\n$ mdfind -name xcb-shm.pc /opt/X11/lib/pkgconfig/cairo-xcb-shm.pc /opt/X11/lib/pkgconfig/xcb-shm.pc /usr/local/Cellar/cairo/1.14.8/lib/pkgconfig/cairo-xcb-shm.pc /usr/local/Cellar/cairo/1.14.10/lib/pkgconfig/cairo-xcb-shm.pc /usr/local/Cellar/cairo/1.14.12/lib/pkgconfig/cairo-xcb-shm.pc  上記のように，/opt/X11/lib/pkgconfig/xcb-shm.pcとなっているので，これを追加する．このときも上述のごとく，RのコンソールでSys.setenvを使う．\n\u0026gt; Sys.setenv(PKG_CONFIG_PATH = \u0026quot;/opt/X11/lib/pkgconfig\u0026quot;)  これで，rsvgはうまくコンパイルされる．\n  今回はいきなりのRネタになってしまった．\n","date":1540566000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542287390,"objectID":"3c2cfad085dc3de701595c5b8dcabb95","permalink":"https://taipapamotohus.com/post/r_homebrew_update_error/","publishdate":"2018-10-27T00:00:00+09:00","relpermalink":"/post/r_homebrew_update_error/","section":"post","summary":"Rとは，オープンソース・フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である（Wikipediaより）","tags":["R","Rstudio","bioconductor","homebrew","install","update","error"],"title":"RをMac OSX (Sierra)にbrewでinstallしていて，upgradeしてハマったときの対処法","type":"post"},{"authors":null,"categories":null,"content":" 文章を書いている際に，ある単語を検索したくなるようなことがよくある．Emacsでのデフォルトはisearchであるが，今回は，これを強化するpackageを紹介する．また，最近開いたディレクトリ directory をまた開きたいこともよくあることである．これについてもivyによる検索が便利であるので紹介する．例によってネタ元を見たほうが早いかもしれない．．．(^^;;;\nTable of Contents    swiper.el  Install \u0026amp; setup 使い方  migemo  cmigemoのinstall migemo.elのInstall \u0026amp; setup  avy-migemo（swiperのmigemo対応）  Install \u0026amp; setup 使い方  最近開いたディレクトリを開く    swiper.el  参照1：swiper ご本家 参照2：swiper.el: 一覧付き正規表現isearch！C-sを置き換えろ 参照3：Emacsの補完\u0026amp;検索を超強化する Emacsでは，C-sに割り当てられたisearchによる正規表現検索がデフォルトで存在する．これをivyを用いて一覧を付加するようにした強化版である．  Install \u0026amp; setup  以下を，int.orgに書き込む．  #+begin_src emacs-lisp (use-package swiper :ensure t :config (defun isearch-forward-or-swiper (use-swiper) (interactive \u0026quot;p\u0026quot;) ;; (interactive \u0026quot;P\u0026quot;) ;; 大文字のPだと，C-u C-sでないと効かない (let (current-prefix-arg) (call-interactively (if use-swiper 'swiper 'isearch-forward)))) (global-set-key (kbd \u0026quot;C-s\u0026quot;) 'isearch-forward-or-swiper) ) (use-package ivy :ensure t ;; :config ;; (fset 'ivy--regex 'identity) ) #+end_src   ivyのコメントアウトしている部分については後述する．  使い方  現在開いているEmacsのバッファで，C-sとするだけでよい． 下図は，ivyを検索しているところだが，下に\u0026rdquo;Swiper\u0026rdquo;と表示されるバッファが表示され，そこに”ivy”と打つと，上の本文の中のivyは黄色でハイライトされる．同時に下のバッファでは，現在見ているivyのある行に下線が引かれ，行数が横に示される．上下のArrow Keyでivyのある行から次の行に飛べる．リターンすれば本文のその行に行ける．非常に便利である．\n   migemo  参照1：Migemo: ローマ字のまま日本語をインクリメンタル検索 参照2：【Emacs/macOS】migemoを有効にし、ローマ字のまま日本語検索する migemoとは，「ローマ字のまま日本語をインクリメンタル検索するため のツールです。かな漢字変換をすることなく日本語のインクリメン タル検索を快適に行うことができます。」 一度使い始めるとやみつきになるので，オススメ！  cmigemoのinstall  まず，C言語で再実装されたcmigemoをインストールする．homebrewで簡単にインストールできる．\u0026ndash;HEADのオプションが必要との記載もあるが，なくても同じであった．  $ brew install cmigemo  migemo.elのInstall \u0026amp; setup  以下を，int.orgに書き込む．  #+BEGIN_SRC emacs-lisp (use-package migemo :ensure t :config ;; C/Migemo を使う場合は次のような設定を .emacs に加えます． (setq migemo-command \u0026quot;cmigemo\u0026quot;) (setq migemo-options '(\u0026quot;-q\u0026quot; \u0026quot;--emacs\u0026quot; \u0026quot;-i\u0026quot; \u0026quot;\\a\u0026quot;)) (setq migemo-dictionary \u0026quot;/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict\u0026quot;) ;; 各自の辞書の在り処を指示 (setq migemo-user-dictionary nil) (setq migemo-regex-dictionary nil) ;; charset encoding (setq migemo-coding-system 'utf-8-unix)) #+END_SRC  avy-migemo（swiperのmigemo対応）  参照１：avy-migemo 参照２：avy と migemo を組み合わせたパッケージ avy-migemo.el のご紹介 参照３：avyのmigemo対応およびswiperのmigemo対応 上記のswiperだけでも十分に便利であるが，swiperをmigemoに対応させることで，更に便利になる． 前述したswiper.elでのコメントアウトした設定部分，つまり，\n;; (fset 'ivy--regex 'identity)  は，コメントアウトしておかないと，migemo化を無効にしてしまうので注意。\n  Install \u0026amp; setup  以下を，int.orgに書き込む．  #+begin_src emacs-lisp (use-package avy-migemo :ensure t :config (avy-migemo-mode 1) (setq avy-timeout-seconds nil) (require 'avy-migemo-e.g.swiper) (global-set-key (kbd \u0026quot;C-M-;\u0026quot;) 'avy-migemo-goto-char-timer) ;; (global-set-key (kbd \u0026quot;M-g m m\u0026quot;) 'avy-migemo-mode) ) #+end_src  使い方  現在開いているEmacsのバッファで，C-sとするだけでよい． 下図は，\u0026rdquo;taiou\u0026rdquo;，つまり，「対応」を検索しているところである．migemo化する前と同じようにローマ字で日本語が検索できる． 当たり前だが，漢字を入力しても検索できる．\n   最近開いたディレクトリを開く  参照：OPEN A RECENT DIRECTORY IN DIRED: REVISITED　ネタ元 ivyを使って最近開いたディレクトリを動的に探索する方法をコード化してくれているので紹介する． 以下のコードをinit.orgに書き込めば良い．\n#+begin_src emacs-lisp (defun bjm/ivy-dired-recent-dirs () \u0026quot;Present a list of recently used directories and open the selected one in dired\u0026quot; (interactive) (let ((recent-dirs (delete-dups (mapcar (lambda (file) (if (file-directory-p file) file (file-name-directory file))) recentf-list)))) (let ((dir (ivy-read \u0026quot;Directory: \u0026quot; recent-dirs :re-builder #'ivy--regex :sort nil :initial-input nil))) (dired dir)))) (global-set-key (kbd \u0026quot;C-x C-d\u0026quot;) 'bjm/ivy-dired-recent-dirs) #+end_src     C-x C-dすれば，下図のように，最近開いたディレクトリが表示され，その中から行きたいディレクトリを選んで，リターンすれば良い．\n   以上，今回は小ネタだが非常に有用なものばかりを紹介した．\n","date":1539442800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539505702,"objectID":"2298db973b4acacc2a522c3ee16de30f","permalink":"https://taipapamotohus.com/post/swiper_migemo/","publishdate":"2018-10-14T00:00:00+09:00","relpermalink":"/post/swiper_migemo/","section":"post","summary":"文章を書いている際に，ある単語を検索したくなるようなことがよくある．Emacsでのデフォルトはisearchであるが，今回は，これ","tags":["emacs","swiper","ivy","migemo","search","avy"],"title":"Swiper, ivy, avy, migemoによるEmacsの検索強化","type":"post"},{"authors":null,"categories":null,"content":" 以前の記事（beamerでスライド原稿用pdfを作成する（その１））で，Emacsでbeamerを用いてlatexのソースを書いてコンパイルし，スライド原稿としてpdfを出力する方法をまとめた．この際に，pdfの特定の箇所がlatexのソースでどこに当たるのかがわかったり，逆に，latexのソースの特定の箇所がpdf上のどこに当たるのかがわかったりすると便利である．今回はそれについてまとめる．なお，auctexの全般的な設定については，TeXWikiのmacOS での設定例 を参照していただきたい．\nTable of Contents    backward search forward search     参照：Mac OS X El Capitan の AUCTeX の設定 参照：skimとの連携 参照：AUCTeX の設定と便利な機能 参照：TeX_and_PDF_Synchronization  backward search  こちらのほうが便利なので最初に説明する． skimで表示されたpdf上の特定の箇所に該当するLaTeX文書の箇所を探して示してくれる． この機能を可能にするには，skimの環境設定を開いて「同期する」の初期値を「カスタム」とし，コマンドのところに以下のように打ち込む．\n$ /usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1/bin/emacsclient  defaultでは初期値に「Emacs」となっており，本来ならこれで動くはずだが，homebrewで最新のEmacsをinstallしたために，もともと入っているemacsとはversionが異なる．つまり，サーバーとして起動しているEmacsと、使用するEmacsClientのバージョンが異なることになり，このままでは動かない．そこで，homebrewでインストールした方をfull pathで明示的に指示する必要がある．\n 引数のところには，以下のように打ち込む．\n$ --no-wait +%line \u0026quot;%file\u0026quot;  つまりこうなる．\n  一方，Emacsのinit.orgには以下のように記述して，Emacs serverを立ち上げておく．\n#+begin_src emacs-lisp ;; Starts the Emacs server (server-start) #+end_src  これで，pdf上の任意の箇所で，Shift-Command-Clickすると，該当するlatex documentの箇所に飛ぶ．もし，Emacsが立ち上がっていなければ，Emacsを立ち上げるところからやってくれる．素晴らしい！ これは確かめてみると勘違いであった．Emacsは立ち上げておかないといけない．\n この機能は知ってしまうと，無くてはならないほど便利に感じる機能である．pdfで間違いを見つけたときに，それがlatexソースのどこに相当するかを同定するのは結構面倒であるが，この機能により一発で同定することができる．\n 該当箇所が少しずれることがあるのが欠点であるが，それでも十分に役に立つ．\n  forward search  こちらも，backward searchほどではないが，役に立つ． Emacs上のlatex document上の特定の箇所に該当するpdfの箇所を探して示してくれる． この機能を可能にするには，init.orgに以下のように記述する．\n#+begin_src emacs-lisp (add-hook 'LaTeX-mode-hook (function (lambda () (add-to-list 'TeX-command-list '(\u0026quot;displayline\u0026quot; \u0026quot;/Applications/Skim.app/Contents/SharedSupport/displayline %n %s.pdf \\\u0026quot;%b\\\u0026quot;\u0026quot; TeX-run-discard-or-function t t :help \u0026quot;Forward search with Skim\u0026quot;)) ))) #+end_src  これで，C-c C-c displayline により，Emacsのlatex document上の特定の箇所に該当するpdfの箇所に飛んでくれる．pdfの該当するところが赤丸で示される（数秒で消える）．\n ただし，該当する箇所が結構ずれてしまうことが多い．最近は，beamerでしか使わないので，もしかすると，通常のlatex 文書だと狂いなく示すのかもしれない．まぁ，backward searchと違って， なくても困らない機能である．\n  ","date":1538838000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538986908,"objectID":"bef5ced6fe6c53140e2637bf77c5cbbd","permalink":"https://taipapamotohus.com/post/synchronization/","publishdate":"2018-10-07T00:00:00+09:00","relpermalink":"/post/synchronization/","section":"post","summary":"以前の記事（beamerでスライド原稿用pdfを作成する（その１））で，Emacsでbeamerを用いてlatexのソースを書いてコ","tags":["latex","pdf","synchronization","tex","emacs","emacsclient"],"title":"Emacsとskimで，latexのソースとpdfの間を行ったり来たり","type":"post"},{"authors":null,"categories":null,"content":" 医学系の多くのジャーナルでは，論文投稿の際のフォーマットを Microsoft Word と指定しているところが多い．．．．．\nいま，一瞬，憤りのあまり意識を失いかけたが，気を取り直して続ける．実際のところ，仕事でもしばしばword文書を要求される．イチからwordで文書を書くのはやりたくないわけで，ふと，org-modeからexportできないかと調べてみた．やはり，同じようなことを考える人はいるもので，エライ人はそれを実現させるべく色々な方法を開発していた．それらの中から，自分で試してみてうまく行った方法をまとめておく．使用するのは， pandoc とそれをorg−modeから利用するための ox-pandoc である．\nTable of Contents    ox-pandoc 文書の中で実際に引用された論文のみからなる文献リストを生成する方法  reftex-create-bibtex-file bibexport  pandocのための設定 Citation Style Language (CSL)の設定 英語論文の場合のorg fileの設定 英語論文のWord fileのexport  org-modeからWord fileへのexportの方法  日本語論文の場合のorg fileの設定 org-modeからWord fileへのexportの方法 Word file の濁点分離を修正する方法  Pythonの導入 docx-normarize-nfcの導入 濁点分離の修正     ox-pandoc  参照サイト1：本家　ox-pandoc 参照サイト2：ox-pandoc - org-mode + org-ref to docx with bibliographies 参照サイト3：もっと本家　Pandoc a universal document converter pandoc自体の説明は略．ご存知，フォーマット変換のスイスアーミーナイフ． ox-pandocは，pandocを介してorg-mode fileを様々なフォーマットに変換する新しいexporterであり，40種ものフォーマットに変換できる． pandoc 2.0 (or later version)と，bibliography featureを使うならpandoc-citeproc 0.3 (or later)が必要なので，homebrewでインストールする．\n$ brew install pandoc $ brew install pandoc-citeproc  init.orgには以下のように書き込んで，ox-pandocをインストールし，設定する．use-packageを使うと両方がいっぺんにできて便利である．\n#+begin_src emacs-lisp (use-package ox-pandoc :ensure t :config ;; default options for all output formats (setq org-pandoc-options '((standalone . t))) ;; cancel above settings only for 'docx' format (setq org-pandoc-options-for-docx '((standalone . nil))) ;; special settings for beamer-pdf and latex-pdf exporters (setq org-pandoc-options-for-beamer-pdf '((pdf-engine . \u0026quot;xelatex\u0026quot;))) (setq org-pandoc-options-for-latex-pdf '((pdf-engine . \u0026quot;xelatex\u0026quot;))) ) #+end_src  latex engineにxelatex以外を使っている場合は，上記の設定をそちらに変更する．\n 以上でorg-mode自体の基本的な設定は終了である．\n  文書の中で実際に引用された論文のみからなる文献リストを生成する方法  このリスト（bib ファイル）を作成しておかないと，Wordをexportする際にうまくいかない． reftex-create-bibtex-fileとbibexportの２つの方法がある．  reftex-create-bibtex-file  参照サイト：reftex-create-bibtex-file Emacsの中に最初から入っているコマンドである． 前回の記事（Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化）の際に作成したhogefuga.orgからpdfをexportした際に同じdirectory内にhogefuga.texも保存されているはずである．これをEmacsでオープンし, M-x reftex-create-bibtex-file と打つ．すると，実際に引用された論文のみからなる文献リストを生成してくれる．この際に名前をどうするかを聞かれるので，適当につける．今回は，extract.bibとした． しかし，たまに，reftex-create-bibtex-fileで引用された論文の一部が欠けてしまうことがある．そのようなときは，第２の方法であるbibexportが役に立つ．  bibexport  参考サイト1：bibexport – Extract a BibTEX file based on a .aux file 参考サイト2：Creating .bib file containing only the cited references of a bigger .bib file texliveに含まれているshell script 文書の中の \\cite で引用された文献のみを抽出する．上記のreftex-create-bibtex-fileはtex ファイルが有れば抽出できたが，こちらはaux ファイルを必要とする．したがって，まず，org-modeからpdfをexportし，tex ファイルを作成し，次いで，tex ファイルをlatex でコンパイルしてaux ファイルを作成し，そのaux ファイルに対してbibexportを用いるというややこしいことをする必要がある． しかし，reftex-create-bibtex-fileでうまく抽出できないときも，bibexportならうまくいくことが多いので，知っておいて損はない． 使い方は以下を参考\nbibexport --help  bibexport: a tool to extract BibTeX entries out of .bib files. usage: bibexport [-h|v|n|c|a|d|s|t] [-b|e|es|ec|o|r file] file... Basic options: -------------- -a, --all export the entire .bib files -o bib, --output-file bib write output to file [default: bibexport.bib] -t, --terse operate silently -h, --help print this message and exit -v, --version print version number and exit Advanced options: ----------------- -b bst, --bst bst specifies the .bst style file [default: export.bst] -c, --crossref preserve crossref field [default: no] -n, --no-crossref remove crossref'd entries [default: no] -e bib, --extra bib extra .bib file to be used (crossrefs and strings) -es bib, --extras bib extra .bib file to be used (for strings) -ec bib, --extrac bib extra .bib file to be used (for crossrefs) -p, --preamble write a preamble at beginning of output -r bib, --replace bib replace .bib file(s) in the .aux file -d, --debug create intermediate files but don't run BibTeX  例えばこんなふうにshellで打つ\n$ bibexport -o extract2.bib hogefuga_English.aux   pandocのための設定  word fileとして出力しても，スタイルが気に入らない可能性は高い．そこで，予めスタイルファイルを自分好みにしておく． 参考サイト1：Defining custom DOCX styles in LibreOffice (and Word) 参考サイト2：Customize styles in Word for Mac 参考サイト3：ドキュメント変換ツールPandoc：ユーザーズガイドを熟読して分かったマニアックな使い方 上記のサイトを参考にスタイルファイルを作成し，~/.pandocにword用に reference.docx として置く．このテンプレートのフォーマットに従ってword fileが出力される． しかし，実は，これが結構面倒くさいのである．念のため自作のものをここに置いておく．  Citation Style Language (CSL)の設定  参考サイト1：Citation Style Language ご本家 参考サイト2：citation-style-language/styles スタイルの在り処 参考サイト3：citation-style-language/styles/stroke.csl 今回使用するスタイル CSLは学術出版の引用と文献スタイルの書式自動化を促進することを目的としたオープンソースプロジェクト．ありがたく使わせていただく． 上記の参考サイト3からstroke.cslをダウンロードする． stroke.cslをexportの対象のorg fileと同じdirectoryに置いておく． これで，Stroke という雑誌の引用書式に従ったスタイルになってword fileがexportされる．  英語論文の場合のorg fileの設定  ここからは，個々のorg-mode file側の設定である． 英語の場合は殆どなんの問題もなくexportされる． 早速実例を見てみる．まず下のorg fileをhogefuga_English.orgとして保存する．\n#+LaTeX_CLASS: koma-article #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{times} #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:3 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil #+LINK_UP: #+LINK_HOME: #+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease #+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa \\vspace*{-1.5cm} \\hspace{2.5cm} Department of Hogefuga, Hogefuga University ,* Introduction Stroke is estimated to be ranked as the second leading cause of death and the third most common cause of permanent disability around the world.\\cite{Donnan:2008ax} The proportion of ischemic stroke is more than 90% in all stroke. The underlying metabolomic pathophysiology of ischemic stroke, however, remains poorly understood. Recently, metabolome analysis using “omics” method has developed. Mass spectrometry (MS) and nuclear magnetic resonance (NMR) spectroscopy have garnered the most use for profiling a large number of metabolites simultaneously.\\cite{Lewis:2008uq} These technologies offer comprehensive information about thousands of low-molecular mass compounds (less than 2kDa) including lipids, amino acids, peptides, nucleic acids, organic acids, vitamins, thiols and carbohydrates. Metabolomics renders the metabolic profile of a system, the end points of biological events, and reflect the state of a cell or group of cells at a given time.\\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry (GC/MS) is one of the wide-spread techniques, which enables researchers to determine analyte masses with such high precision and accuracy that peptides and metabolites can be identified unambiguously even in complex fluids.\\cite{Lewis:2010oq} The profiling of low molecular weight biochemicals that serve as substrates and products in metabolic pathways is particularly relevant to cardiovascular diseases.\\cite{Lewis:2008uq} At present, however, very few studies have been reported on metabolic profiling of stroke. Unlike myocardial infarction, metabolomic changes in the brain are not sufficiently reflected by blood biomarkers due to the presence of the blood-brain barrier and dilution by peripheral blood.\\cite{kim2013biomarkers} In addition, most of the studies focused on acute stage of stroke.\\cite{Jiang:2011uq,Jung:2011fk,Kimberly:2013mq #+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_6-authors.bst option:-a limit:t  何故か *Introductionの前に２つコンマを打たないとうまくhugoでブログにexportされない（理由は不明，ご教示を乞う）．このために画面上 *Introduction の前にコンマが一つ残っているが，もしコピーして試して見るなら，この余分なコンマは除かないとうまくいかないので注意していただきたい．\n Emacsで上記のhogefuga_English.orgを開いた状態で，C-c C-e l oとすると，pdfが作成され，下図のようにskimで開かれる．\n     本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている． 何故pdfを作成するかというと， 文書の中で実際に引用された論文のみからなる文献リストを生成する ためである．pdfと一緒にできたtex ファイルで，reftex-create-bibtex-file もしくは bibexportを使って抽出された文献リストであるextract.bibを作成する． 実際に行った手順は以下の通りである．\n pdfのexportの際に一緒に生成された hogefuga_English.tex をEmacsで開く．\n M-x reftex-create-bibtex-file する\n 抽出された文献ファイルをextract.bibと命名し保存\n しかし，extract.bibは何故か引用された8つの文献のうちの6つしか含まれていなかった．\n そこで，上述のように bibexport を利用することにした．texファイルをxelatexでコンパイルし，できたaux ファイルにbibexportを適用した．LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）のlatexmkの項を参照のこと．\n$ latexmk -pvc -pdf -view=none hogefuga_English.tex $ bibexport -o extract2.bib hogefuga_English.aux  これで，８つの文献をすべて含むextract2.bibが生成された．\n   英語論文のWord fileのexport  ようやくWord fileへexportできる段階となった． 上記で作成したhogefuga_Engolish.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．多分パスも効くが，この原稿専用のリストなので，同じdirectoryの方が混乱することがないであろう．\n#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract2.bib  さらに，最後の文献についての以下の部分は削除する．\n#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t  以上で，下図のようになるので，hogefuga_English_WORD.org として保存する．\n#+LaTeX_CLASS: koma-article #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{times} #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:3 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil #+PANDOC_OPTIONS: csl:/Data/Stroke2018/Survival_CEA_CAS-MN/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract2.bib #+LINK_UP: #+LINK_HOME: #+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease #+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa. \\vspace*{-1.5cm} \\hspace{3cm} Department of Hogefuga, Hogefuga University ,* Introduction Stroke is estimated to be ranked as the second leading cause of death and the third most common cause of permanent disability around the world.\\cite{Donnan:2008ax} The proportion of ischemic stroke is more than 90% in all stroke. The underlying metabolomic pathophysiology of ischemic stroke, however, remains poorly understood. Recently, metabolome analysis using “omics” method has developed. Mass spectrometry (MS) and nuclear magnetic resonance (NMR) spectroscopy have garnered the most use for profiling a large number of metabolites simultaneously.\\cite{Lewis:2008uq} These technologies offer comprehensive information about thousands of low-molecular mass compounds (less than 2kDa) including lipids, amino acids, peptides, nucleic acids, organic acids, vitamins, thiols and carbohydrates. Metabolomics renders the metabolic profile of a system, the end points of biological events, and reflect the state of a cell or group of cells at a given time.\\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry (GC/MS) is one of the wide-spread techniques, which enables researchers to determine analyte masses with such high precision and accuracy that peptides and metabolites can be identified unambiguously even in complex fluids.\\cite{Lewis:2010oq} The profiling of low molecular weight biochemicals that serve as substrates and products in metabolic pathways is particularly relevant to cardiovascular diseases.\\cite{Lewis:2008uq} At present, however, very few studies have been reported on metabolic profiling of stroke. Unlike myocardial infarction, metabolomic changes in the brain are not sufficiently reflected by blood biomarkers due to the presence of the blood-brain barrier and dilution by peripheral blood.\\cite{kim2013biomarkers} In addition, most of the studies focused on acute stage of stroke.\\cite{Jiang:2011uq, Jung:2011fk, Kimberly:2013mq}  *Introductionの前のコンマについては前述のとおりである．\n  org-modeからWord fileへのexportの方法  ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, export via pandoc のメニューが見える．そこで，p xとして，export via pandoc \u0026mdash;\u0026gt; to docx and openを選択する．\n  暫く待つと，下図のようにWordが立ち上がって，docx file（ hogefuga_English_WORD.docx ）が開かれる．\n   全体的なスタイルはまずまずである．\n 本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．\n 文献リストの体裁はインデントに問題ありだが，これは手作業でやっても苦痛でないレベルである．\n org-modeのオプションが見えてしまっているが，この程度であれば僅かな手作業で消去できる．\n 英語に関しては，pdfと比べると多少見劣りがするが，まず問題ないレベルのWord fileが出力できた．\n   日本語論文の場合のorg fileの設定  前回の記事（Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化）の際に作成したhogefuga.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．\n#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract.bib  さらに，最後の文献についての以下の部分は削除する．\n#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t  以上で，下図のようになるので，hogefuga_WORD.org として保存する．\n  #+LaTeX_CLASS: koma-jarticle #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+OPTIONS: date:nil #+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl #+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx #+BIBLIOGRAPHY: extract.bib #+LINK_UP: #+LINK_HOME: #+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績 #+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康 \\vspace*{-1.5cm} \\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野 * 背景と目的 hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した． * 結果 hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\\cite{Cosentino:2011dn} #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float t :width 3in :align center #+ATTR_HTML: :width 500 :float: wrap :align center [[./hoge_fuga.jpg]] * 結論 hogefugaによる治療は有効である．  org-modeからWord fileへのexportの方法  ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, export via pandoc のメニューが見える．そこで，p xとして，export via pandoc \u0026mdash;\u0026gt; to docx and openを選択する．\n  暫く待つと，下図のようにWordが立ち上がって，docx file（ hogefuga_WORD.docx ）が開かれる．\n   本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．\n Figureのキャプションが消えているが，通常，論文投稿時には，本文と画像は別々になるので，画像自体を本文から削除できるため，問題無しとする．\n しかし，英語の場合には見られなかった大きな問題が発覚した！　本文が, 濁点分離 してしまっている．\n   Word file の濁点分離を修正する方法  濁点分離 したままでは使いものにならないので，修正する必要がある．しかし，Word fileの内容を点検して，いちいち手作業をやっていては堪らない．そこで，一気に濁点分離を修正する方法はないものかといろいろ探ってみた． 参考サイト1：Wordで文書内の文字をUnicode NFC正規化する方法 参考サイト2：あらゆる文字に濁点と半濁点を付けてみよう 参考サイト3：Macの濁点問題を解決するPython unicodedataモジュール 参考サイト4：濁点問題 参考サイト5：濁点の話 参考サイト6：docx-normarize-nfc 上記の参考サイト4, 5, 6では，emasaka氏により，pythonを用いた方法が報告されており，docx-normarize-nfc としてGithubにアップされている．これはpython scriptであり，.docxファイルをZIPアーカイブとして開き、文書本体のXMLテキストを開いてNFC正規化し、ZIPアーカイブに書き戻すというものであり，これを使わせてもらうことにした．  Pythonの導入  参考サイト：Welcome to Python.org （本家）ご存知いま一番アツい言語．それしか知らなくても下記のようにして使える（笑） まず下準備としてpythonを入れる． homebrew でpython3をインストール\n$ brew install python3   docx-normarize-nfcの導入  docx-normarize-nfc からダウンロードして，/usr/local/bin/ にコピーする．（/usr/local/binにパスが通っているものとする）  濁点分離の修正  これでWord fileに対して上記のスクリプトを使用すれば良い． 念のために，Word fileの名前を，hogefuga_WORD_濁点分離修正済み.docxに変更し新規保存しておく． そのうえで，shellで以下の操作を行う\n$ docx-normarize-nfc hogefuga_WORD_濁点分離修正済み.docx  一瞬で修正は終わるので，ファイルをオープンして確かめてみると，下図のように修正されている．素晴らしい．\n  ようやく，使い物になる日本語のWord fileを作成することができた．\n これで，英語でも日本語でも，pdfからWordにコピペして修正するという難行苦行から解放される．\n しかし，co-authorとのすり合わせやrevisionの際は，まだ，Wordでの作業が必要とされる．苦行は続くのである．．．．．\n  ","date":1537110000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538192253,"objectID":"dc1a246e4e1b6bfadc9748b4e4206d72","permalink":"https://taipapamotohus.com/post/org-mode_paper_4/","publishdate":"2018-09-17T00:00:00+09:00","relpermalink":"/post/org-mode_paper_4/","section":"post","summary":"医学系の多くのジャーナルでは，論文投稿の際のフォーマットを Microsoft Word と指定しているところが多い．．．．． いま，一瞬，憤りのあまり意識を失いか","tags":["org","mode","word","export","reference","citation","ox","pandoc"],"title":"Emacsのorg-modeで論文を書く（その4：pandocを利用してorg-modeからword [docx]を文献付きでexportする）","type":"post"},{"authors":null,"categories":null,"content":" 前回（Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理））は，BibDeskを用いて文献情報をbibtex ファイルとして収集する方法についてまとめた．今回は，この文献情報を利用した引用をEmacsのorg-modeでどのように自動化するかについてまとめる．早い話が，org-modeからlatexのbibtexとreftexの機能を利用するということになる．\nTable of Contents    org-mode-reftex-setup  org-mode-reftex-setupの使用方法  ox-bibtex.el bst ファイルについて  bst ファイルの置き場所  文献を引用したorg-modeからのexportの実例    org-mode-reftex-setup  参照サイト：Using Emacs Org-mode to Draft Papers RefTex-ModeというものがEmacsには含まれている．文献や引用の管理のためのパッケージである．詳細はC-h iでマニュアルを見れば分かる，と言いたいところだが，このマニュアルが膨大である．そこで，RefTeX in a Nutshellという2ページほどの要約を読めば，使うのには十分であるとマニュアル自体に書いてある（笑）．実は私はそれすらろくに読んでいないが，以下のように設定すれば，十分に使える．設定方法は，以前の記事（Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する）に記載したとおり，init.orgに書き込めば良い．\n#+begin_src emacs-lisp (defun org-mode-reftex-setup () (load-library \u0026quot;reftex\u0026quot;) (and (buffer-file-name) (file-exists-p (buffer-file-name)) (reftex-parse-all)) (define-key org-mode-map (kbd \u0026quot;C-c )\u0026quot;) 'reftex-citation) ) (add-hook 'org-mode-hook 'org-mode-reftex-setup) #+end_src  上記の設定により，参照サイトの説明のように，org-modeの中でreftex-citationの機能が働くようになる．\n  org-mode-reftex-setupの使用方法  org-modeで文書を書いている最中に文献を引用したい箇所で，C-c ) と打つ すると，まず，どの文献リストを使うかを聞いてくるので，hogefuga-reference.bibなど使いたいリストの名前を打つ．前回説明した方法で収集した文献のbib ファイルが有るはずである． 次に，文献を絞り込むためにキーワードを打つように催促されるので，それを打つ．すると，そのキーワードを有する文献のリストがずらずらと並ぶ．下図の例では，stetler と著者名を打ったときの結果が下のバッファに表示されている．該当する文献にカーソルを持ってくるか，クリックして選択し，リターンを押せば決定され，本文の該当箇所にその論文の cite-key，つまり，\\cite{Stetler:2012jt} が入力される．\n  上図の下のバッファ内でも，C-sの検索機能は使えるので，さらに絞り込みが必要な際は便利である．以前の記事（Emacsの設定（その1）Preludeの導入）で述べたようにpreludeを導入して，かつ，helmを有効にしておけば，下図のようにC-sでswiperが使えて更に便利である．（なお，下図では，まず，heat shock proteinと打ち，ズラッと並んだ真ん中のバッファでC-sとやってstetlerと打ったところである．一番下のバッファにstetlerで絞り込まれた候補が並んでいる）\n   ox-bibtex.el  参考サイト：Org and Bibtex 上述の作業で，文献を本文中にcite-keyとして引用することはできた．次に必要なのはorg-modeからpdfやhtmlにexportする際に，cite-keyをもとに，文献が雑誌の規定の様式で引用され，最後に文献リストが規定の様式で記述されるようにすることである．この面倒をみてくれるのが，ox-bibtex.el である． ox-bibtex.elは，org-plus-contrib packageの中に含まれているので，まず，org-plus-contribをインストールする．これは，package.el を使えば簡単である． 次いで，use-packageを使って，ox-bibtexを設定する．と言っても以下のようにinit.orgに書くだけである．\n(use-package ox-bibtex)  なお，use-packageを使ってox-bibtexを設定する際に，defer t にすると，htmlへの文献のexportができなくなるので注意！\n use-packageは非常に便利．emacsの新しいパッケージの導入と管理はこれでいいと思う．\n 参照サイト1：use-package 参照サイト2：use-packageで可読性の高いinit.elを書く  ox-bibtex.elはbibtexをLaTeX, html, asciiにexportしてくれる．HTMLへのexportには，bibtex2html が使われる．そこで，bibtex2htmlをインストールしておく．homebrewがインストールされていれば以下のようにすれば良い．\nbrew install bibtex2html  ox-bibtexの使い方はソースの最初に書いてあるとおりである．すなわち，文献をexportするためには，org-mode文書の冒頭に例えば以下を追加し，\n#+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib}  最後に，\n#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-references.bib Stroke_3-authors_alphabetical.bst option:-a limit:t  を追加する．\n #+LaTeX_HEADER: の行の最後のnatbib は，texliveに含まれる文献サポートのパッケージであり，1, 2, 3,\u0026hellip;.というような番号付タイプの文献引用や author-yearタイプの文献引用の両方に（それ以外にも）対応している．その手前はnatbibのオプションである．\n #+BIBLIOGRAPHY: のあとにfoo.bibを書くわけだが，この部分はフルパスで書いて良い．その後にはスタイルを書く．上記のStroke_3-authors_alphabetical.bstは自作だが，これは投稿ジャーナルの規定に合わせて作成する．ジャーナルによってはbst ファイルを用意してあるかもしれない．\n option: -foobar はbibtex2htmlに \u0026lsquo;foobar\u0026rsquo; を渡す．つまり\noption:-d sort by date option:-a sort as BibTeX (usually by author) *default* option:-u unsorted i.e. same order as in .bib file option:-r reverse the sort  複数のオプションを使用することも可能\noption:-d option:-r  上述のように， limit:t とすることにより，引用された文献のみのリストになる．これをしないと bib ファイルの中のすべての論文がリストになってしまう．\n  bst ファイルについて  bibtexにおいて引用のスタイルを決めているファイルであり，これを目指すジャーナルの投稿規定に合わせる．既にそのようなbst ファイルがあれば極楽だが，ない場合は大変である．この辺は以下のサイトを参照．  LaTeXで参考文献の形式を変更する方法（bstファイルの編集） BibTeXのドキュメント   bst ファイルの置き場所  これにはかなり悩まされたが，なんのことはないMacTeXのFAQサイトに書いてあった． The Most Frequently Asked Questions (FAQ)\nQM.06 : Why can\u0026rsquo;t the latest MacTeX find my local BibTeX files? Earlier versions of MacTeX worked correctly. AM.06 : TeX Live is slightly pickier about placement of these files. \u0026ldquo;.bib\u0026rdquo; files go in ~/Library/texmf/bibtex/bib or subfolders of this directory, and \u0026ldquo;.bst\u0026rdquo; files go in ~/Library/texmf/bibtex/bst or subfolders of this directory.\n ここにおいておけば，パスを指定することなく，どこからでもbstファイルを指定してスタイルを決められる．\n  文献を引用したorg-modeからのexportの実例  ようやく，これで準備が整ったので，実例を示す．以下のファイルを作成し，hogefuga.orgとして保存する．  #+LaTeX_CLASS: koma-jarticle #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+OPTIONS: date:nil #+LINK_UP: #+LINK_HOME: #+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績 #+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康 \\vspace*{-1.5cm} \\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野 * 背景と目的 hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した． * 結果 hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\\cite{Cosentino:2011dn} #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float t :width 3in :align center #+ATTR_HTML: :width 500 :float: wrap :align center [[./hoge_fuga.jpg]] * 結論 hogefugaによる治療は有効である． #+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t   hogefuga-References.bibの部分やbstの部分は，それぞれ該当するファイルに置き換えていただきたい． \\cite{Stetler:2012jt,Cosentino:2011dn} の部分は私のbibファイルにおけるcite-keyである． C-c C-e l o で，文献が番号付きで引用されたpdfが作成され，skimで開く． 下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．また，このbstでは著者名のアルファベット順を指定しているので，最初にでてきた文献が2に，二番目にでてきた文献が1になっていることに注意してほしい．さらに，著者名は3人までは全員記載し，4人以上の論文では4人目以降はet alになっている．bibtexの活用により，これらのことが自動的になされている．\n  ついで，htmlである．C-c C-e h o で，文献が番号付きで引用されたhtmlが作成され，browserで開く．\n 下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．その他もpdfと同様であるが，文献リストにはabstractやDOIも追加される．投稿する際はpdfか，別記事のようにwordにしてしまうので，html出力の設定はこれ以上触っていない．\n  ようやく，文献付きの原稿の出力の設定にまでたどり着くことができた．次回はpandocを利用して，org-modeからword ファイルを出力する方法をまとめる．\n  ","date":1536937200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537169947,"objectID":"5d2c58d19567e710688c09b7b139d125","permalink":"https://taipapamotohus.com/post/org-mode_paper_3/","publishdate":"2018-09-15T00:00:00+09:00","relpermalink":"/post/org-mode_paper_3/","section":"post","summary":"前回（Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理））は，BibDeskを用いて文献情報をbibt","tags":["reference","citation","bibtex","reftex","latex","org","mode","automation"],"title":"Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化）","type":"post"},{"authors":null,"categories":null,"content":" さて，前回（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））はorg-modeによる論文本体の執筆に付いてまとめたわけだが，今回は論文引用の方法についてまとめる．と思ったのだが，論文を引用するためには，当然のことながら論文を収集しなければならない．そのうち膨大な数の論文の海に溺れることになる．そこで，収集した論文，つまり，pdfの整理をするソフトが必要になってくる．その引用も，書式や番号付を雑誌の規定に合わせて自動化してくれれば言うことはない．ということで，そのようなソフトについて書くことにする．有料ソフトの定番としては，EndoNoteがあるし，フリーソフトでは，zoteroやMendeleyが有名である．私自身は，LaTeXを利用することが多い関係上，BibDeskというこれまた老舗のソフトをもっぱら利用している．ネット上でもzoteroやmendeleyについての情報は豊富だが，BibDeskについてはそれほど見られないので，まとめておくことは多少の意味があるであろうと考え，BibDeskによる論文収集を説明することにした．\nBibDesk  texliveをインストールすればその中に入っているが，最新版はリンク先にあるので，そちらを落とすほうが良い． 文献をbibtexのファイルとして管理する．pdfとの関連付けができるので，書誌事項とpdfが一体化して管理できる． bibtexに関しては，BiBTeXとは を参照 bibtexファイルなので，当然，latexの機能を用いて，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．これが便利！ 見た目はこんな感じ\n  医学系の論文となると，やはり，PubMedなどネットでの連携が重要である．下図のごとく，BibDeskではSearches menuからPubMedを選ぶことにより，BibDeskの中からPubMedを検索できる．\n     検索欄に，例えば，\u0026rdquo;heat shock protein\u0026rdquo;と打つと，下図のように検索結果が50編ずつ並ぶが，50編以上ある場合は，Searchを繰り返しクリックすることにより，100編と150編とどんどんリストに取り込まれていく．\n  上図のごとく，検索結果欄の左端に\u0026rdquo;Import\u0026rdquo; ボタンがあるが，これをクリックするとその論文の書誌事項が取り込まれる．その際に，自分の文献リストの名前を，\u0026rdquo;hogefuga-reference.bib\u0026rdquo; など適当に決めれば良い．以後はそのリストに追加していくことになる．\n また，取り込まれる際にcite-keyをBibDeskが自動的に決めてくれる．このcite-keyは次回の記事で述べる「引用の自動化」の際にreftexに使用される．\n なお，PubMedの番号，つまり，Pmidが分かっていれば，それを打ち込めば一発で書誌事項を検索できる．\n リストの中から興味のある論文をクリックして選択し，グレーにハイライトさせると，下図のごとく右側のサイドパネルに，その論文のあるサイトを示すアイコンが表示される．これをクリックすれば，ブラウザーが開いてそのサイトに飛ぶ．もし，その論文がオープンアクセスであれば，あるいは，所属する組織が出版社と契約を交わしていれば，その論文のpdfを落とせる．落としたpdfをドラッグしてその論文に該当するリストのラインにドロップすれば，その書誌事項とpdfはリンクし，以降はその論文のサイドパネルにpdfのアイコンが表示され，ダブルクリックによりオープンするようになる．さらに言えば，pdfではなく，パワポやワードのファイルとして文献が存在することもある．同じようにドラッグ＆ドロップすれば，これまたリンクする．しかも一つの文献にいくつものpdfやその他のファイルをリンクできる．非常に便利である．\n  また，下図のごとく，左のサイドパネルの一番上の方にある\u0026rdquo;Web BibDesk Web Group\u0026rdquo;をクリックして選択すれば，更にいろいろな文献ソースが表示される．医学系では，Google Scholarが有用なので，これをクリックすれば，BibDeskの中からGoogle Scholarを検索できるし，書誌事項も取り込める．pdfのリンクが存在すればBibDeskの中でpdfを落とすこともできる．\n  収集した文献の書誌事項はhogefuga-reference.bibにbibtex fileとしてまとめられているが，その中身は以下のような情報の集積である（下の例ではabstractなどは省略している）．\n@article{Rothwell:2018aa, Author = {Rothwell, Peter M and Cook, Nancy R and Gaziano, J Michael and Price, Jacqueline F and Belch, Jill F F and Roncaglioni, Maria Carla and Morimoto, Takeshi and Mehta, Ziyah}, Date-Added = {2018-08-03 22:46:26 +0900}, Date-Modified = {2018-08-03 22:46:26 +0900}, Doi = {10.1016/S0140-6736(18)31133-4}, Journal = {Lancet}, Journal-Full = {Lancet (London, England)}, Month = {Jul}, Pmid = {30017552}, Pst = {aheadofprint}, Title = {Effects of aspirin on risks of vascular events and cancer according to bodyweight and dose: analysis of individual patient data from randomised trials}, Year = {2018}, }  bibtexなので，前述のごとく，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．\n Emacsのorg-modeと組み合わせて，どのように文献の引用を自動化するかについては次回の記事にまとめる．\n  ","date":1536678000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537101885,"objectID":"aa1b10f45bd98954efa44cd4e9f7e89d","permalink":"https://taipapamotohus.com/post/org-mode_paper_2/","publishdate":"2018-09-12T00:00:00+09:00","relpermalink":"/post/org-mode_paper_2/","section":"post","summary":"さて，前回（Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力））はorg-modeによる論文本体の執筆に付いてま","tags":["reference","citation","bibdesk","bibtex","pdf","pubmed"],"title":"Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理）","type":"post"},{"authors":null,"categories":null,"content":" 私がEmacsを使用している理由の一番大きなものはorg-modeである．あらゆる文書作成にorg-modeを用いている．org-modeを使って論文を書くことに関しては，ググってもらえばおわかりのように，ネット上に山のように情報が存在する．「屋上屋を架してどうする」と言う自分の中の声を押し殺し，あくまで備忘録ということで，あえてここにまとめておく．なお，私はGTDのツールとしてはorg-modeを全く使用していないので，その種の情報はここにはまったくないことをお断りしておく．\nTable of Contents    目的 org-modeで論文を書く利点 org-modeの設定・セットアップ（pdfとhtmlへの出力用）  koma-script – A bundle of versatile classes and packages Tufte-LaTeX org-bullet org-modeのinit.elの設定（pdf出力用）  「org-modeで論文を書く」の実例    目的  org-modeからlatex経由で，文献がnumberingされ文献リストも付いたpdfを出力できるようにする org-modeから，文献がnumberingされ文献リストも付いたhtmlを出力できるようにする org-modeから，文献がnumberingされ文献リストも付いたwordファイルを出力できるようにする  org-modeで論文を書く利点  LaTeXのややこしいコマンドを覚えなくても普通に文章を書いていけば，pdfで出力できる． latexの力を借りることで，文献の引用やリストの作成を自動化できる． 必要なら，htmlとしても出力できる． どうしても必要なら，pandocの力を借りて，なんとMicrosoft Wordのファイルとしても出力できてしまう．  org-modeの設定・セットアップ（pdfとhtmlへの出力用） 設定が最もよくまとまっているのはTeX Wiki Emacs/Org mode 設定例のmacOSの部分である．正統派の方は，こちらを参考にしていただきたい．\n私は，koma-script – A bundle of versatile classes and packages と Tufte-LaTeX を気に入っており，ほぼこれらしか使わないので，その設定を書いておく．その前に少し情報をまとめておく．\nkoma-script – A bundle of versatile classes and packages  参考サイト１：Koma-Script 入門　～初歩の初歩～ 参考サイト２：使ってはいけない LaTeX のコマンド・パッケージ・作法 参考サイト３：LaTeX の「アレなデフォルト」 傾向と対策 アメリカ生まれのaritcleなどの欧文標準文書クラスはデフォルトがレターサイズで余白が広すぎてしまう．これに対して，ヨーロッパ生まれのkoma-scriptはa4がデフォルトで，余白も広すぎず，レイアウトもなんとなくオシャレ（笑）である．当然のことながら，texliveに含まれており，texliveをインストールした時点で，インストールされている．  Tufte-LaTeX  参考サイト１： tufte-org-mode Edward R. Tufteによって作られたページレイアウト．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．こういうスタイルはよく見かけるものだと思うが，作者がはっきりしているとは，恥ずかしながら全く知らなかった． tufte-org-modeはこのtufte classをorg-modeから使えるようにした有り難いパッケージである．  org-bullet  参考サイト１：https://github.com/sabof/org-bullets 参考サイト２：http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html pdf出力とは関係ないが，ついでに触れておく．要するにorg-modeの見た目が良くなるパッケージである．星印が色付きの丸や二重丸になる．やる気に繋がるので，見た目は大事である．こんな感じになる．\n  init.elには以下のようにuse-packageを用いて記述してインストール兼設定となる．もちろん，これも以前の記事（Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する）で説明したように，init.orgに書いたものから生成されたinit.elである．\n(use-package org-bullets :ensure t :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))   org-modeのinit.elの設定（pdf出力用）  前述のごとく，koma-scriptとTufte-LaTeXについて設定する．\n 何回もしつこいようだが，これも以前の記事（Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する）で説明したように，init.orgに書いたものから生成されたinit.elである．\n(require 'ox-latex) (add-to-list 'auto-mode-alist '(\u0026quot;\\\\.org$\u0026quot; . org-mode)) (setq org-latex-default-class \u0026quot;bxjsarticle\u0026quot;) (add-to-list 'org-latex-classes '(\u0026quot;koma-article\u0026quot; \u0026quot;\\\\documentclass{scrartcl}\u0026quot; (\u0026quot;\\\\section{%s}\u0026quot; . \u0026quot;\\\\section*{%s}\u0026quot;) (\u0026quot;\\\\subsection{%s}\u0026quot; . \u0026quot;\\\\subsection*{%s}\u0026quot;) (\u0026quot;\\\\subsubsection{%s}\u0026quot; . \u0026quot;\\\\subsubsection*{%s}\u0026quot;) (\u0026quot;\\\\paragraph{%s}\u0026quot; . \u0026quot;\\\\paragraph*{%s}\u0026quot;) (\u0026quot;\\\\subparagraph{%s}\u0026quot; . \u0026quot;\\\\subparagraph*{%s}\u0026quot;))) (add-to-list 'org-latex-classes '(\u0026quot;koma-jarticle\u0026quot; \u0026quot;\\\\documentclass{scrartcl} \\\\usepackage{amsmath} \\\\usepackage{amssymb} \\\\usepackage{xunicode} \\\\usepackage{fixltx2e} \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont} \\\\usepackage{xltxtra} \\\\usepackage{graphicx} \\\\usepackage{longtable} \\\\usepackage{float} \\\\usepackage{wrapfig} \\\\usepackage{soul} \\\\usepackage{hyperref}\u0026quot; (\u0026quot;\\\\section{%s}\u0026quot; . \u0026quot;\\\\section*{%s}\u0026quot;) (\u0026quot;\\\\subsection{%s}\u0026quot; . \u0026quot;\\\\subsection*{%s}\u0026quot;) (\u0026quot;\\\\subsubsection{%s}\u0026quot; . \u0026quot;\\\\subsubsection*{%s}\u0026quot;) (\u0026quot;\\\\paragraph{%s}\u0026quot; . \u0026quot;\\\\paragraph*{%s}\u0026quot;) (\u0026quot;\\\\subparagraph{%s}\u0026quot; . \u0026quot;\\\\subparagraph*{%s}\u0026quot;))) ;; tufte-handout class for writing classy handouts and papers (add-to-list 'org-latex-classes '(\u0026quot;tufte-handout\u0026quot; \u0026quot;\\\\documentclass[twoside,nobib]{tufte-handout} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026quot; (\u0026quot;\\\\section{%s}\u0026quot; . \u0026quot;\\\\section*{%s}\u0026quot;) (\u0026quot;\\\\subsection{%s}\u0026quot; . \u0026quot;\\\\subsection*{%s}\u0026quot;))) ;; tufte-book class (add-to-list 'org-latex-classes '(\u0026quot;tufte-book\u0026quot; \u0026quot;\\\\documentclass[twoside,nobib]{tufte-book} [NO-DEFAULT-PACKAGES] \\\\usepackage{zxjatype} \\\\usepackage[hiragino-dx]{zxjafont}\u0026quot; (\u0026quot;\\\\part{%s}\u0026quot; . \u0026quot;\\\\part*{%s}\u0026quot;) (\u0026quot;\\\\chapter{%s}\u0026quot; . \u0026quot;\\\\chapter*{%s}\u0026quot;) (\u0026quot;\\\\section{%s}\u0026quot; . \u0026quot;\\\\section*{%s}\u0026quot;) (\u0026quot;\\\\subsection{%s}\u0026quot; . \u0026quot;\\\\subsection*{%s}\u0026quot;) (\u0026quot;\\\\paragraph{%s}\u0026quot; . \u0026quot;\\\\paragraph*{%s}\u0026quot;)))  私はxelatexを使っているので，compileは以下のように設定している．\n(setq org-latex-pdf-process '(\u0026quot;xelatex -interaction nonstopmode -output-directory %o %f\u0026quot; \u0026quot;bibtex %b\u0026quot; \u0026quot;xelatex -interaction nontopmode -output-directory %o %f\u0026quot; \u0026quot;xelatex -interaction nonstopmode -output-directory %o %f\u0026quot;))  ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．なお，pandocやTufteの項は別途記事にするので，とりあえずは無視してほしい．\n  pdfで出力したければ，さらに，l o と打つと，As PDF file and openを選択したことになり，原稿がpdfとして出力され，かつ，skimでそのpdfがオープンされる．\n 同じく，htmlで出力したければ，h o と打つと，As HTML file and openを選択したことになり，ブラウザーでそのhtmlがオープンされる．\n  「org-modeで論文を書く」の実例  それでは実例を示してみる．以下のような書類を作成し，hogefuga.orgとして保存する．hoge_fuga.jpgはorg fileと同じdirectoryにあるものとする． 前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略\u0026hellip;..(^^;;;  #+LaTeX_CLASS: koma-jarticle #+LaTeX_CLASS_OPTIONS: [12pt] #+LATEX_HEADER: \\usepackage{geometry} #+LATEX_HEADER: \\geometry{left=1in,right=1in,top=1in,bottom=1in} #+LaTeX_HEADER: \\usepackage[sort,compress,super,comma]{natbib} #+STARTUP: overview #+STARTUP: hidestars #+OPTIONS: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc #+OPTIONS: date:nil #+LINK_UP: #+LINK_HOME: #+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績 #+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康 \\vspace*{-1.5cm} \\hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野 * 背景と目的 hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した． * 結果 hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)． #+NAME: hoge_fuga #+caption: hoge-fuga（重症例である） #+attr_latex: :float t :width 3in :align center #+ATTR_HTML: :width 500 :float: wrap :align center [[./hoge_fuga.jpg]] * 結論 hogefugaによる治療は有効である．   ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e l oと打てば，以下のようなpdfがskimで開かれる．\n  また，C-c C-e h oと打てば，以下のようなhtmlがbrowserで開かれる．latexのコマンドが見えてしまっているのがご愛嬌だが，htmlにしか出力しないのであれば，削除すればよい．\n  長くなったので，ここまでとし，文献の引用の設定は次回の記事にまとめることとする．\n  ","date":1535727600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536491871,"objectID":"4e30cf6963fde4840260320550496d56","permalink":"https://taipapamotohus.com/post/org-mode_paper_1/","publishdate":"2018-09-01T00:00:00+09:00","relpermalink":"/post/org-mode_paper_1/","section":"post","summary":"私がEmacsを使用している理由の一番大きなものはorg-modeである．あらゆる文書作成にorg-modeを用いている．org-mod","tags":["org","mode","emacs","latex","html","word","pandoc"],"title":"Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）","type":"post"},{"authors":null,"categories":null,"content":" 前回のポストを書いた後に，念のために調べてみると，どうやら，media9なるものが，いまやpdfに動画を埋め込むために普通に使われているようだということが判明してしまった！う〜む，勉強不足を痛感する．遅れを取り返すべく，早速やってみたので，それを追加報告とする．\nTable of Contents    media9 beamerで動画が走るスライド原稿を作る（media9版） media9を使用したときの利点 media9を使用したときの欠点 結論    media9 media9はtexlive2018に含まれており，特に別途インストールする必要はなかった．media9については様々な情報があったが，多くはWindowsやLinuxに関してであり，そのままコピペして動くような極楽情報はなかなか見つからなかった．やはり，餅は餅屋で，OS X TeXにそのものズバリの情報があった．それが参考サイト５である．\n 参考サイト１：TeXWiki media9 参考サイト２：TeXでプレゼン - LaTeX Beamerを使う人のためのTips集 参考サイト３：How to embed video files in a PDF using LaTeX (a media9/beamer example) 参考サイト４：Beamer で PDF ファイルに動画を埋め込む 参考サイト５：media9 problems  beamerで動画が走るスライド原稿を作る（media9版）  同一directoryにhogefuga.movがあるとすれば，以下のように書けば良い preambleに，\\usepackage{media9}を忘れずに追加しておく．\n\\newcommand{\\showmovie}[1]{\\includemedia[ activate=pageopen, deactivate=pageclose, width=110mm, height=72mm, addresource=#1, flashvars={ src=#1 \u0026amp;loop=true \u0026amp;autoPlay=false } ]{}{StrobeMediaPlayback.swf} } \\begin{frame} \\frametitle{hogefugaの動画} \\centering \\showmovie{hogefuga.mov} \\end{frame}  110mmと72mmの数値はフレーム内の動画の収まり具合により適宜調整する．\n loopは，ループ再生するかどうか\n autoplayは自動再生するかどうか\n  media9を使用したときの利点  なんと言ってもべた書きよりもelegant! スライドを開けたときに，何もしなくても動画の静止画が映るので，前回のやり方のように背景をべた書きしなくて良い．  media9を使用したときの欠点 もう完全にmedia9に乗り換えるつもりでいたが，以下に述べるようにいくつか欠点もあることが判明した．\n media9はpdf自体に動画を埋め込むようである．したがって，200MBの動画を走らせるとすると，pdf自体が200MB以上の大きさになってしまう． それだけでなく，200MB程度の動画になると，途中で固まってしまう！これでは使い物にならない． 一方，前回記事のべた書き方式だと，pdf自体に動画を埋め込まないので，pdfは大きくならないし，動画指定のパスは効くし，200MBだろうともっと大きかろうと動画はガンガン動く．  結論  容量の小さな動画であれば，media9でも十分であろう． 私のように，容量の大きな動画を使用するような場合は，べた書きを使用するほうが良いであろう． ということで，結局，元の木阿弥に戻ることとなった．  ","date":1535209200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375575,"objectID":"4ded31a2df93daf4372f1e31b03e39f2","permalink":"https://taipapamotohus.com/post/beamer_movie2/","publishdate":"2018-08-26T00:00:00+09:00","relpermalink":"/post/beamer_movie2/","section":"post","summary":"前回のポストを書いた後に，念のために調べてみると，どうやら，media9なるものが，いまやpdfに動画を埋め込むために普通に使われて","tags":["beamer","movie","latex","pdf"],"title":"beamerでスライド原稿用pdfを作成する（その3）動画が走るスライド原稿を作る（media9に関する追記）","type":"post"},{"authors":null,"categories":null,"content":" 実は，同じような内容について2010年に，TeX QA に投稿しているが，その後現在に至るまで使い続けることができており，一応，こちらでもまとめておくことにした．\nbeamerで動画が走るスライド原稿を作る  前述した ，TeX QA に経緯は投稿してあるので，詳細はそちらを読んでいただきたい． 参考にしたのは，Adobeのpdfのマニュアル（DVI specials for PDF generation） https://www.tug.org/TUGboat/tb30-1/tb94cho.pdf の以下の部分\n3 Annotations An annotation is considered as an object with a location on a page. The type of the object is given by the value of the key `/Subtype', for instance, `/Text', `/Link', `/Sound', `/Movie', etc. (See [1, p. 615] for the list of all annotation types.) The location is given by an array object associated to the key `/Rect'. DVIPDFM(x) provides the following special command for annotations............ The following example shows a movie annotation that enables us to run the movie file ‘mymovie.avi’ inside a PDF viewer program. \\special{pdf:ann bbox 0 0 360 180 \u0026lt;\u0026lt; /Subtype /Movie /Border [1 0 0] /T (My Movie) /Movie \u0026lt;\u0026lt; /F (mymovie.avi) /Aspect [720 360] /Poster true \u0026gt;\u0026gt; /A \u0026lt;\u0026lt; /ShowControls false \u0026gt;\u0026gt; \u0026gt;\u0026gt;}  アスペクト比やコントロールバーの有無，リピートするかどうかなども指示できる（下記参照）\n mymovie.aviのところに動かしたい動画を記入（パスも効く）\n 私の作成したものは読んでいただければおわかりのように，非常にダサいベタ書きである．\n 最近の書き方は以下の通りで，もっぱら，mov形式の画像を使用している．コンテナがaviやwmvだと動かないが，Mac以外でどうなるのかは不明．そういえば，Windowsで試したことはなかった\u0026hellip;..\n{ \\usebackgroundtemplate{\\put(20, -265){\\includegraphics[scale=0.45]{/Data/.../..../Figures/hogefuga.pdf}}} \\begin{frame} \\frametitle{hogefugaの対策} \\special{pdf:ann bbox -10 -130 320 90 \u0026lt;\u0026lt; /Subtype /Movie /Border [0 0 1] /T (My Movie) /Movie \u0026lt;\u0026lt; /F (/Data/.../hogefuga.mov) %/Aspect [720 480] /Aspect [640 480] /Poster false \u0026gt;\u0026gt; /A \u0026lt;\u0026lt; /ShowControls true /Mode /Repeat \u0026gt;\u0026gt; \u0026gt;\u0026gt;} \\end{frame} }  \\usebackgroundtemplateの部分には動画のキャプチャー画像を貼り付けておく．なにもないと，動画が動き出す前の画面が空白になってしまう（もっと良い方法があれば，どなたかご教示ください）．\n \\putで背景画像（キャプチャー画像）の位置を直接指定し，\\includegraphicsのscaleで倍率を指定して動画の大きさに合わせている．\n これで，画像をクリックすると（ほぼ）同じ大きさの動画が（ほぼ）同じ位置で動くようになる\n 動画の大きさはbboxで，かぶせる静止画の大きさはscaleで調整する．\n プレゼンテーションにskimを使うと動画が動かないので注意．\n 動画は同一directoryにある必要はなく，パスで指定すれば良い\n 動画自体はpdfの中に埋め込まれないので，pdfの容量がむやみに大きくならないという利点がある．\n Adobe Acrobat Readerでプレゼンすれば，動画は動くし，音もでる．コントロールバーにより早送りなども可能．\n 最初にpdfで動画をクリックすると「セキュリティ上の問題．．．」というメッセージが表示される．この横にあるオプションボタンをクリックして，信頼するを選択すれば，動画が動くようになる．\n  ","date":1535122800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375575,"objectID":"7a2ae2cdf3f251dc5fbc077277c9a723","permalink":"https://taipapamotohus.com/post/beamer_movie/","publishdate":"2018-08-25T00:00:00+09:00","relpermalink":"/post/beamer_movie/","section":"post","summary":"実は，同じような内容について2010年に，TeX QA に投稿しているが，その後現在に至るまで使い続けることができており，一応，こちらて","tags":["beamer","movie","latex","pdf"],"title":"beamerでスライド原稿用pdfを作成する（その2）動画が走るスライド原稿を作る","type":"post"},{"authors":null,"categories":null,"content":" 前回のポスト（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記））により，既にLaTeXはインストールされたので，今回は学会発表向けのスライド原稿作成についてまとめる．ようやく実質的な話になる． beamerによるスライド原稿の作成  基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsのauctexを使うと補完などあり，便利である． 下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う． なお， \\usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えていただいた．参考：beamerでの数式フォントの変更 また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．  % -*-coding:utf-8-*- \\documentclass[svgnames, table, 14pt]{beamer} \\usepackage{zxjatype} \\usepackage[hiragino-dx]{zxjafont} % ヒラギノ角ゴ Proを使う \\setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3} \\setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3} % themeを指定する \\usetheme{Darmstadt} \\usefonttheme[onlylarge]{structurebold} \\setbeamerfont*{frametitle}{size=\\large,series=\\bfseries} \\setbeamertemplate{navigation symbols}{} \\usepackage[english]{babel} \\usepackage[latin1]{inputenc} \\usepackage{times} \\usepackage[T1]{fontenc} \\usepackage{hyperref} % Setup TikZ \\usepackage{tikz} \\usetikzlibrary{arrows} \\tikzstyle{block}=[draw opacity=0.7,line width=1.4cm] % Figure position \\usepackage[absolute,overlay]{textpos} % math \\usepackage{mathabx} \\usefonttheme{professionalfonts} % Author, Title, etc. \\title[hoge/fugaによる相補的な治療における高難度症例の治療と成績] {hoge/fugaによる相補的な治療における高難度症例の治療と成績} \\author[taipapa] {taipapa, 織田信長, 豊臣秀吉, 徳川家康} \\institute[hogefuga University] {hogefuga大学大学院 hogefuga研究科　hogefuga分野} \\date[日本hogefuga外科学会 第??回学術総会　\\hspace{2.4cm} 201X年X月XX日] {\\scriptsize{Symposium-02「とっーても難しいhogeとfuga」 \\\\ \\vspace{0.15cm} 筆頭演者はhogefuga外科学会へ過去3年間のCOI自己申告を 完了しています．\\\\本演題の発表に関して開示すべきCOIはありません }} % 学会名，日付，スライド番号を挿入 \\setbeamertemplate{footline} {\\color{gray} % \\hspace{.075cm} \\insertshortdate% \\hspace{4cm} \\insertframenumber{} / \\inserttotalframenumber% } \\begin{document} \\begin{frame} \\titlepage \\end{frame} \\section{Introduction} \\begin{frame}{背景と目的} \\begin{block}{} \\begin{itemize} \\item hogeとfugaを比較してみると，一方で難易度の高い症例で も他方では容易に行える場合も多い. \\item 当施設では，一方に片寄ることなく，hogeとfugaを相補的に 用いることにより合併症の減少を目指す方針をとっている． \\item そこで，自験例から高難度のhogefuga症例についての 方針と成績を主にhogefuga surgeonの立場から検討した. \\end{itemize} \\end{block} \\end{frame} \\section{Results} \\begin{frame} \\frametitle{hogefuga症例の画像} \\centering \\includegraphics[width=3.5in]{hoge_fuga.pdf} \\end{frame} \\end{document}   ターミナルで，cdして上記のbeamer_test.texのあるdirectoryに移動し，shellで以下のように打ち込む．前回のポスト（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにするを参考　latexmk -pvc -pdf -view=none beamer_test.tex  これで下記のようなpdfが出来上がるはず．\n    画像の貼り付けが必要なら，上の文書にもあるように必要な箇所で，\n\\includegraphics[width=2in]{/Data/hoge/fuga/......./hoge_fuga.pdf}  などと打てばよい．以下のようなスライドが得られる．\n  なにもしなければ，画像は左寄せになる．中央に寄せたければ，上記の文書内にあるように，\\centering を使用する．\n 次回は，beamerで動画を走らせる件について書く予定．\n  ","date":1535036400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538286591,"objectID":"9e3e1973a4c87ed82130a2ea1b7150e6","permalink":"https://taipapamotohus.com/post/beamer/","publishdate":"2018-08-24T00:00:00+09:00","relpermalink":"/post/beamer/","section":"post","summary":"前回のポスト（LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新され","tags":["latex","latexmk","beamer","texlive","mactex","emacs"],"title":"beamerでスライド原稿用pdfを作成する（その１）","type":"post"},{"authors":null,"categories":null,"content":" Table of Contents    TeX Live 2018のインストール TeX Live 2018のインストール（2018年9月1日追記）  ヒラギノフォントの埋め込みなど インストール後のパスの修正（symbolic linkを張る）  auctexのインストールと設定 latexmk 実際の作業 XeLaTeXについて    TeX Live 2018のインストール  参考サイト１：TeX Wiki TeX Live 参考サイト２：TeX Wiki TeX LiveMac 参考サイト３：The MacTeX-2018 Distribution 上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする． これでスライド作成ソフトであるbeamerも一緒にインストールされる． beamerに固有の設定は特に必要なし．  TeX Live 2018のインストール（2018年9月1日追記） 大事なことを２つ忘れていたので追記する．\nヒラギノフォントの埋め込みなど  参考サイト：MacTeX 2018のインストール\u0026amp;日本語環境構築法 こんなところを読んでいないで，直ちに上記のサイトに飛んでいただきたい． マックユーザーにとっての最大の問題点は 「macos標準添付のヒラギノフォントなど商用フォントに関する設定ファイル群が，TeX LiveからTLContriに移動になった」 ということである．この問題に対する対応方法は，すべて上記のサイトに記載されているので，そのとおりにすれば良い．実にありがたい．  インストール後のパスの修正（symbolic linkを張る）  参考サイト：TeX Wiki TeX LiveMac MacTeX 2018を普通にインストールすると，/usr/local/texlive/2018/bin/x86_64-darwin/bibtexというふうにbinの下にx86_64-darwinというdirectoryが入って，tex関連のコマンドのパスが上手く通らなくなる．そこで，上記のTeX Wiki TeX LiveMacに書いてあるように，/usr/local/binディレクトリの下にsymbolic linkを張る．\n$ sudo /usr/local/texlive/????/bin/*/tlmgr path add  上記でうまくいかないときは下記のように具体的なディレクトリ名を指定する．\n$ sudo /usr/local/texlive/2018/bin/x86_64-darwin/tlmgr path add   auctexのインストールと設定  latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見） preludeをインストールした時点で，auctexもインストールされる． auctexの設定などについては以下を参照（手抜き\u0026hellip;.. (^^;;; ）  AUCTEX – Sophisticated document creation TeX Wiki AUCTeX Emacs/AUCTeX AUCTeX の設定と便利な機能  しかし，org-modeを使うようになってからは直接latex文書を打つことはめっきり少なくなってしまった．それでも，学会発表用のスライドなどはlatexを直接打って，beamer文書を作成し，pdf原稿に変換している．  latexmk  Emacsでbeamerを使って，スライド原稿などを作成していると，C-c C-cするたびにtex文書がcompileされてpdf原稿が出来上がるのを待たなければならず，この待ち時間が結構辛い．そこで，tex ファイルの変更が保存されるたびに自動で裏でlatexmkがcompileしてくれるようにする．latexmkを使う． 参考サイト：TeX Wiki Latexmk texlive2018, MacTeXに入っているので，これらを入れていれば別途インストールする必要なし． ~/.latexmkrcの中に以下のように記述する（ちなみに私はxelatexを使用している）\n$pdflatex = 'xelatex -interaction=nonstopmode -synctex=1 %O %S'; $pdf_mode = 1; $postscript_mode = $dvi_mode = 0; $pdf_previewer = 'open -a Skim'; $preview_continuous_mode = 1; # equivalent to -pvc   実際の作業  上記のようにセットアップしていることとする． ターミナルで，texファイルが有るdirectoryに移動し，\nlatexmk -pvc -pdf -view=none document.tex  これで，texファイルへの変更を保存すると自動でコンパイルされて，設定にもよるが，skimで開いているpdfファイルも更新される．\n  XeLaTeXについて  以下を参照されたい．特に最初にあげたZRさんの文書は必読！  XeLaTeX で日本語する件について TeXWiki XeTeX XeLaTeXだとかな混植が簡単にできて最高だという話   ","date":1534604400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535982370,"objectID":"cb1634b8fff3fa01f1399db6da235558","permalink":"https://taipapamotohus.com/post/latexmk/","publishdate":"2018-08-19T00:00:00+09:00","relpermalink":"/post/latexmk/","section":"post","summary":"Table of Contents TeX Live 2018のインストール TeX Live 2018のインストール（2018年9月1日追記） ヒラギノフォントの埋め込みなど インストール後のパス","tags":["emacs","latex","pdf","skim","beamer","auctex"],"title":"LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）","type":"post"},{"authors":null,"categories":null,"content":" ようやく，ここからinit.orgの具体的な記述になる．\nTable of Contents    Coding systemの設定 Inline-patchの設定    Coding systemの設定  まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から init.orgに以下のように書き込む\n​* Coding System Environment ** 言語を日本語にする #+BEGIN_SRC lisp (set-language-environment 'Japanese) #+END_SRC ** 極力UTF-8とする #+BEGIN_SRC lisp (prefer-coding-system 'utf-8) #+END_SRC ** 日本語フォントをヒラギノにする ​ - 日本語のサイズを指定しないと動的にサイズを変えられるようになる ​ - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/ #+BEGIN_SRC lisp (when (or (eq window-system 'mac) (eq window-system 'ns)) (set-face-attribute 'default nil :family \u0026quot;Menlo\u0026quot; :height 180) ;; 18pt (set-fontset-font nil 'japanese-jisx0208 (font-spec :family \u0026quot;Hiragino Kaku Gothic ProN\u0026quot;)) (setq face-font-rescale-alist '((\u0026quot;.*Hiragino Kaku Gothic ProN.*\u0026quot; . 1.1)))) #+END_SRC  これがEmacs起動時にorg-babel-load-fileにより変換されて下記のようなinit.elとなる．\n(set-language-environment 'Japanese) (prefer-coding-system 'utf-8) (when (or (eq window-system 'mac) (eq window-system 'ns)) (set-face-attribute 'default nil :family \u0026quot;Menlo\u0026quot; :height 180) ;; 18pt (set-fontset-font nil 'japanese-jisx0208 (font-spec :family \u0026quot;Hiragino Kaku Gothic ProN\u0026quot;)) (setq face-font-rescale-alist '((\u0026quot;.*Hiragino Kaku Gothic ProN.*\u0026quot; . 1.1))))  つまり，org-modeで書いたinit.orgでの解説はすべて除かれて，lispのみのcodeになってinit.elが生成される．\n この利点は，init.elの説明が実に書きやすい点にある（実際にはinit.orgに書くわけだが．．．）．org-modeはアウトライナーなので，階層構造も自由自在である．整理もしやすいし，後で順番を変えるのもCommand + arrow keyを使えば実に簡単である．\n  Inline-patchの設定  ついで，最も重要なinline-patchの設定 参考：Macに最新バージョンのEmacsをインストール 参考：El Capitan での日本語入力時に Emacs 内のカーソル色を変更する init.orgに以下のように書き込む．\n​* inline-patch on macosx ** ミニバッファ入力時に自動的に英語入力モードにする ​ - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945 #+BEGIN_SRC lisp (when (functionp 'mac-auto-ascii-mode) ;; ミニバッファに入力時、自動的に英語モード (mac-auto-ascii-mode 1)) #+END_SRC ** 日本語か英語かで，カーソルの色を変える． ​ - 参考１：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945 ​ - 参考２：http://suzuki.tdiary.net/20160103.html #+BEGIN_SRC lisp (when (fboundp 'mac-input-source) (defun my-mac-selected-keyboard-input-source-chage-function () (let ((mac-input-source (mac-input-source))) (set-cursor-color ; (if (string-match \u0026quot;com.apple.inputmethod.Kotoeri.Roman\u0026quot; mac-input-source) (if (string-match \u0026quot;com.google.inputmethod.Japanese.Roman\u0026quot; mac-input-source) \u0026quot;#91C3FF\u0026quot; \u0026quot;#FF9300\u0026quot;)))) (add-hook 'mac-selected-keyboard-input-source-change-hook 'my-mac-selected-keyboard-input-source-chage-function)) #+END_SRC  これがEmacsの起動時に，org-babel-load-fileによって，下記のようにcodeだけ抜き出されて，init.elに書き込まれる．\n(when (functionp 'mac-auto-ascii-mode) ;; ミニバッファに入力時、自動的に英語モード (mac-auto-ascii-mode 1)) (when (fboundp 'mac-input-source) (defun my-mac-selected-keyboard-input-source-chage-function () (let ((mac-input-source (mac-input-source))) (set-cursor-color ; (if (string-match \u0026quot;com.apple.inputmethod.Kotoeri.Roman\u0026quot; mac-input-source) (if (string-match \u0026quot;com.google.inputmethod.Japanese.Roman\u0026quot; mac-input-source) \u0026quot;#91C3FF\u0026quot; \u0026quot;#FF9300\u0026quot;)))) (add-hook 'mac-selected-keyboard-input-source-change-hook 'my-mac-selected-keyboard-input-source-chage-function))  これで日本語入力中であっても，M-xなどでミニバッファ入力時に自動的に英語入力モードになってくれる．\n ついでに行った日本語か英語かでカーソルの色が変わる設定はわりに有用だが，ときに色が変わらないことがあるが，気にしないことにしている．\n  ","date":1534518000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375574,"objectID":"db67e226f1d0ecf2ed24d284332c2d91","permalink":"https://taipapamotohus.com/post/japanese_setup/","publishdate":"2018-08-18T00:00:00+09:00","relpermalink":"/post/japanese_setup/","section":"post","summary":"ようやく，ここからinit.orgの具体的な記述になる． Table of Contents Coding systemの設定 Inline-patchの設定 Coding systemの設定 まずは","tags":["emacs","prelude","init-el"],"title":"Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など","type":"post"},{"authors":null,"categories":null,"content":" 自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．\n参考サイト  俺、ちゃんと全部管理してます（org-modeでinit.elを管理する） babel-loader:org-mode で init.el を管理する方法 平衡点(2011-12-13) ORG-Babel + init.el = ?? | くらいまーず　はい Prelude init.el \u0026amp; org-babel  Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法 基本方針  個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む． 起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む． 具体的には，init.elで，(require \u0026lsquo;org)した後にorg-babel-load-fileでinit.orgを読み込む． しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．  Preludeの導入 前回のポスト（Emacsの設定（その1）Preludeの導入）を参考　emac-init.elの作成  ~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む  (require 'org) (defvar my-config-dir (concat user-emacs-directory \u0026quot;personal/\u0026quot;)) (org-babel-load-file (expand-file-name \u0026quot;init.org\u0026quot; my-config-dir))   工夫と言っても， init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ． これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．  init.orgの作成  これでいよいよ肝心のinit.orgの作成を行う org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている． 具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．  Code blockの挿入  俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である． org-modeで以下のようにする．（後述する設定が必要）\n\u0026lt;l （ここで\u0026lt;TAB\u0026gt;すると．．．） 以下のように展開される #+begin_src emacs-lisp #+end_src  2019年1月14日追加\n上記の「TABで展開」に関して，Disqusで，mickaushyさんから「\u0026lt;lではなくて\u0026lt;sではないのか」とのご指摘をいただいた．全くそのとおりで，（後述する設定が必要）と自分で書いておきながら，その設定を書き忘れていた．mickaushyさんが指摘されている通りの設定をしている．\n 参考：http://pages.sachachua.com/.emacs.d/Sacha.html#org74bcbb3  #+begin_src emacs-lisp (setq org-structure-template-alist '((\u0026quot;s\u0026quot; \u0026quot;#+begin_src ?\\n\\n#+end_src\u0026quot; \u0026quot;\u0026lt;src lang=\\\u0026quot;?\\\u0026quot;\u0026gt;\\n\\n\u0026lt;/src\u0026gt;\u0026quot;) (\u0026quot;e\u0026quot; \u0026quot;#+begin_example\\n?\\n#+end_example\u0026quot; \u0026quot;\u0026lt;example\u0026gt;\\n?\\n\u0026lt;/example\u0026gt;\u0026quot;) (\u0026quot;q\u0026quot; \u0026quot;#+begin_quote\\n?\\n#+end_quote\u0026quot; \u0026quot;\u0026lt;quote\u0026gt;\\n?\\n\u0026lt;/quote\u0026gt;\u0026quot;) (\u0026quot;v\u0026quot; \u0026quot;#+BEGIN_VERSE\\n?\\n#+END_VERSE\u0026quot; \u0026quot;\u0026lt;verse\u0026gt;\\n?\\n\u0026lt;/verse\u0026gt;\u0026quot;) (\u0026quot;c\u0026quot; \u0026quot;#+BEGIN_COMMENT\\n?\\n#+END_COMMENT\u0026quot;) (\u0026quot;p\u0026quot; \u0026quot;#+BEGIN_PRACTICE\\n?\\n#+END_PRACTICE\u0026quot;) (\u0026quot;l\u0026quot; \u0026quot;#+begin_src emacs-lisp\\n?\\n#+end_src\u0026quot; \u0026quot;\u0026lt;src lang=\\\u0026quot;emacs-lisp\\\u0026quot;\u0026gt;\\n?\\n\u0026lt;/src\u0026gt;\u0026quot;) ;; (\u0026quot;l\u0026quot; \u0026quot;#+begin_src lisp\\n?\\n#+end_src\u0026quot; \u0026quot;\u0026lt;src lang=\\\u0026quot;lisp\\\u0026quot;\u0026gt;\\n?\\n\u0026lt;/src\u0026gt;\u0026quot;) (\u0026quot;L\u0026quot; \u0026quot;#+latex: \u0026quot; \u0026quot;\u0026lt;literal style=\\\u0026quot;latex\\\u0026quot;\u0026gt;?\u0026lt;/literal\u0026gt;\u0026quot;) (\u0026quot;h\u0026quot; \u0026quot;#+begin_html\\n?\\n#+end_html\u0026quot; \u0026quot;\u0026lt;literal style=\\\u0026quot;html\\\u0026quot;\u0026gt;\\n?\\n\u0026lt;/literal\u0026gt;\u0026quot;) (\u0026quot;H\u0026quot; \u0026quot;#+html: \u0026quot; \u0026quot;\u0026lt;literal style=\\\u0026quot;html\\\u0026quot;\u0026gt;?\u0026lt;/literal\u0026gt;\u0026quot;) (\u0026quot;a\u0026quot; \u0026quot;#+begin_ascii\\n?\\n#+end_ascii\u0026quot;) (\u0026quot;A\u0026quot; \u0026quot;#+ascii: \u0026quot;) (\u0026quot;i\u0026quot; \u0026quot;#+index: ?\u0026quot; \u0026quot;#+index: ?\u0026quot;) (\u0026quot;I\u0026quot; \u0026quot;#+include %file ?\u0026quot; \u0026quot;\u0026lt;include file=%file markup=\\\u0026quot;?\\\u0026quot;\u0026gt;\u0026quot;))) #+end_src  この設定を，init.orgに書き込んでおいて，「\u0026lt;lのあとにTAB」とすれば，上述のように展開される．この次の記事でまとめて書こうと考えていたが，すっかり失念していた．ここに書いておいたほうが確かにわかりやすい．mickaushyさん，ご指摘ありがとうございました．\n  Codeの記述  上記の#+begin_src emacs-lispと#+end_srcの間にemacs-lispで設定内容を書く．ここからが便利にできているところ． code-blockの中にいるときに\n C-c \u0026lsquo;とする 当該のcode blockだけのバッファが表示される（下図の下のバッファ）\n  この中はemacs-lisp modeでsyntaxも普通に効くので，普通にコードを書く．もちろん，括弧の対応もハイライトで表示される．\n C-c nとする\n すると，インデントも綺麗に整えてくれる．\n 満足したら，C-c \u0026lsquo;で元のバッファに戻る．整形は綺麗なまま反映される．素晴らしい！\n  具体的なinit.orgの内容は次回のポスト以降に記述予定\n  ","date":1534431600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547442355,"objectID":"b06af86de08d524aca096f3123538f39","permalink":"https://taipapamotohus.com/post/init_org/","publishdate":"2018-08-17T00:00:00+09:00","relpermalink":"/post/init_org/","section":"post","summary":"自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとか","tags":["emacs","init-org","init-el"],"title":"Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する","type":"post"},{"authors":null,"categories":null,"content":" 昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．\nPreludeとは  Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．． Prelude Githubはこちら  Preludeのインストール  上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになって入るが心配性なもんで）．\n$ curl -L https://git.io/epre | sh  インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！ （2018年10月9日修正） デフォルトのままではこうならない．下記のように設定する必要あり．\n prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．\n(require 'prelude-helm) ;; Interface for narrowing and search (require 'prelude-helm-everywhere) ;; Enable Helm everywhere .................. (require 'prelude-latex)  helmにすっかり慣らされてしまったのでこのあたりは外している．prelude-latexのコメントアウトを外すことにより，次回にEmacsを立ち上げるときに auctex がインストールされる．\n preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．\n 個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．\n  ","date":1534258800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539082908,"objectID":"75ec383bbee930d55f0c6255e6a3fc1b","permalink":"https://taipapamotohus.com/post/prelude_install/","publishdate":"2018-08-15T00:00:00+09:00","relpermalink":"/post/prelude_install/","section":"post","summary":"昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある． Preludeとは Emacs初","tags":["emacs","prelude"],"title":"Emacsの設定（その1）Preludeの導入（2018年10月9日修正）","type":"post"},{"authors":null,"categories":null,"content":"なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここではHomebrewを使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．\nEmacsで日本語を書いてると，M-xしたときに面倒なことになるので，Imput Method Editor (IME)用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（Emacs Mac Port）．ありがたい．\n$ brew tap railwaycat/emacsmacport $ brew install emacs-mac --with-modern-icon --with-imagemagick $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications   \u0026ndash;with-modern-iconを指定すると、新しいアイコンになる。    なお，他のoptionは以下のように打てば分かる．  $ brew tap railwaycat/emacsmacport $ brew info emacs-mac  ","date":1534172400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535375574,"objectID":"f69b5b841ae28423793b792cc9846d14","permalink":"https://taipapamotohus.com/post/emacs_install/","publishdate":"2018-08-14T00:00:00+09:00","relpermalink":"/post/emacs_install/","section":"post","summary":"なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここではHomebrewを使ってサク","tags":["emacs","homebrew"],"title":"Emacsのインストール","type":"post"},{"authors":null,"categories":null,"content":"\u0026hellip;\n","date":1530111600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530111600,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://taipapamotohus.com/privacy/","publishdate":"2018-06-28T00:00:00+09:00","relpermalink":"/privacy/","section":"","summary":"\u0026hellip;","tags":null,"title":"Privacy Policy","type":"page"}]